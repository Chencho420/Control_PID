
PID VERSION 3B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077b0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d38  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096c0  080096c0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080096c0  080096c0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096c0  080096c0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c0  080096c0  000196c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096c4  080096c4  000196c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080096c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  20000020  080096e8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  080096e8  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab39  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358c  00000000  00000000  0003ab89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  0003e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  0003fa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223e7  00000000  00000000  00041178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0d9  00000000  00000000  0006355f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e33ac  00000000  00000000  0007e638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001619e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b8c  00000000  00000000  00161a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007970 	.word	0x08007970

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08007970 	.word	0x08007970

08000218 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  EE_Status ee_status = EE_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	81fb      	strh	r3, [r7, #14]
  int dac_canal_1 = 2000, dac_canal_2 = 2000;
 8000222:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000226:	60bb      	str	r3, [r7, #8]
 8000228:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800022c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f002 faf7 	bl	8002820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f969 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 fcad 	bl	8000b94 <MX_GPIO_Init>
  MX_DMA_Init();
 800023a:	f000 fc81 	bl	8000b40 <MX_DMA_Init>
  MX_ADC1_Init();
 800023e:	f000 f9a5 	bl	800058c <MX_ADC1_Init>
  MX_RTC_Init();
 8000242:	f000 facf 	bl	80007e4 <MX_RTC_Init>
  MX_TIM1_Init();
 8000246:	f000 fb2f 	bl	80008a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800024a:	f000 fb81 	bl	8000950 <MX_TIM2_Init>
  MX_TIM3_Init();
 800024e:	f000 fbd3 	bl	80009f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000252:	f000 fc1f 	bl	8000a94 <MX_TIM4_Init>
  MX_DAC1_Init();
 8000256:	f000 fa41 	bl	80006dc <MX_DAC1_Init>
  MX_I2C2_Init();
 800025a:	f000 fa83 	bl	8000764 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800025e:	f002 f8dd 	bl	800241c <ssd1306_Init>
  TIM4->CR1 |= TIM_CR1_CEN; // Inicializa la perilla
 8000262:	4b85      	ldr	r3, [pc, #532]	; (8000478 <main+0x260>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a84      	ldr	r2, [pc, #528]	; (8000478 <main+0x260>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6013      	str	r3, [r2, #0]
  TIM2->CR1 |= TIM_CR1_CEN; // Inicializa el encoder 1
 800026e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	6013      	str	r3, [r2, #0]
  Pantalla_inicial(1000);
 800027e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000282:	f000 fd0f 	bl	8000ca4 <Pantalla_inicial>
  //HAL_GPIO_WritePin(DO_2_ERROR_GPIO_Port, DO_2_ERROR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(DO_1_OK_GPIO_Port, DO_1_OK_Pin, GPIO_PIN_SET);
  //write_variables_to_flash();
  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1 , DAC_ALIGN_8B_R, 0);
 8000286:	2300      	movs	r3, #0
 8000288:	2208      	movs	r2, #8
 800028a:	2100      	movs	r1, #0
 800028c:	487b      	ldr	r0, [pc, #492]	; (800047c <main+0x264>)
 800028e:	f004 f8f3 	bl	8004478 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000292:	2100      	movs	r1, #0
 8000294:	4879      	ldr	r0, [pc, #484]	; (800047c <main+0x264>)
 8000296:	f004 f89c 	bl	80043d2 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2 , DAC_ALIGN_8B_R, 0);
 800029a:	2300      	movs	r3, #0
 800029c:	2208      	movs	r2, #8
 800029e:	2110      	movs	r1, #16
 80002a0:	4876      	ldr	r0, [pc, #472]	; (800047c <main+0x264>)
 80002a2:	f004 f8e9 	bl	8004478 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80002a6:	2110      	movs	r1, #16
 80002a8:	4874      	ldr	r0, [pc, #464]	; (800047c <main+0x264>)
 80002aa:	f004 f892 	bl	80043d2 <HAL_DAC_Start>
    ee_status = EE_ReadVariable32bits(Index, &VarValue);
    if (VarValue != a_VarDataTab[Index-1]) {Error_Handler();}
    if (ee_status != EE_OK) {Error_Handler();}
  }
#endif 
  HAL_FLASH_Lock();
 80002ae:	f004 fc6d 	bl	8004b8c <HAL_FLASH_Lock>


  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1 , DAC_ALIGN_8B_R, 0);
 80002b2:	2300      	movs	r3, #0
 80002b4:	2208      	movs	r2, #8
 80002b6:	2100      	movs	r1, #0
 80002b8:	4870      	ldr	r0, [pc, #448]	; (800047c <main+0x264>)
 80002ba:	f004 f8dd 	bl	8004478 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80002be:	2100      	movs	r1, #0
 80002c0:	486e      	ldr	r0, [pc, #440]	; (800047c <main+0x264>)
 80002c2:	f004 f886 	bl	80043d2 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2 , DAC_ALIGN_8B_R, 0);
 80002c6:	2300      	movs	r3, #0
 80002c8:	2208      	movs	r2, #8
 80002ca:	2110      	movs	r1, #16
 80002cc:	486b      	ldr	r0, [pc, #428]	; (800047c <main+0x264>)
 80002ce:	f004 f8d3 	bl	8004478 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80002d2:	2110      	movs	r1, #16
 80002d4:	4869      	ldr	r0, [pc, #420]	; (800047c <main+0x264>)
 80002d6:	f004 f87c 	bl	80043d2 <HAL_DAC_Start>
  {

  /* Test is completed successfully */
  /* Lock the Flash Program Erase controller */

    switch (Pantalla_menu_inicial())
 80002da:	f000 fd97 	bl	8000e0c <Pantalla_menu_inicial>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	d05f      	beq.n	80003a4 <main+0x18c>
 80002e4:	2b03      	cmp	r3, #3
 80002e6:	dcf8      	bgt.n	80002da <main+0xc2>
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d002      	beq.n	80002f2 <main+0xda>
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d04a      	beq.n	8000386 <main+0x16e>
 80002f0:	e7f3      	b.n	80002da <main+0xc2>
    {
    case INSTALADOR:
      switch (menu_instalador_1())
 80002f2:	f001 fb77 	bl	80019e4 <menu_instalador_1>
 80002f6:	4603      	mov	r3, r0
 80002f8:	3b01      	subs	r3, #1
 80002fa:	2b07      	cmp	r3, #7
 80002fc:	f200 80b7 	bhi.w	800046e <main+0x256>
 8000300:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <main+0xf0>)
 8000302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000306:	bf00      	nop
 8000308:	08000329 	.word	0x08000329
 800030c:	08000333 	.word	0x08000333
 8000310:	08000341 	.word	0x08000341
 8000314:	0800034b 	.word	0x0800034b
 8000318:	08000357 	.word	0x08000357
 800031c:	08000363 	.word	0x08000363
 8000320:	0800036d 	.word	0x0800036d
 8000324:	08000379 	.word	0x08000379
      {
      case SALIDA_UNIPOLAR:
      cambiar_opcion("Salida Unipolar", &salida_unipolar);
 8000328:	4955      	ldr	r1, [pc, #340]	; (8000480 <main+0x268>)
 800032a:	4856      	ldr	r0, [pc, #344]	; (8000484 <main+0x26c>)
 800032c:	f001 fc64 	bl	8001bf8 <cambiar_opcion>
        break;
 8000330:	e028      	b.n	8000384 <main+0x16c>
      case KPI_ABIERTO:
      //kpi_abierto = Establecer_valor("KPI abierto", kpi_abierto, 1000);
      Establecer_valor("KPI abierto", &kpi_abierto, 1000);
 8000332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000336:	4954      	ldr	r1, [pc, #336]	; (8000488 <main+0x270>)
 8000338:	4854      	ldr	r0, [pc, #336]	; (800048c <main+0x274>)
 800033a:	f001 f9cd 	bl	80016d8 <Establecer_valor>
        break;
 800033e:	e021      	b.n	8000384 <main+0x16c>
      case PID_SALIDA_INV:
      cambiar_opcion("PID salida", &pid_salida_inv);
 8000340:	4953      	ldr	r1, [pc, #332]	; (8000490 <main+0x278>)
 8000342:	4854      	ldr	r0, [pc, #336]	; (8000494 <main+0x27c>)
 8000344:	f001 fc58 	bl	8001bf8 <cambiar_opcion>
        break;
 8000348:	e01c      	b.n	8000384 <main+0x16c>
      case PORCENTAJE_PID_POSITIVO:
      Establecer_valor("Porcentaje PID +", &pid_positivo, 100);
 800034a:	2264      	movs	r2, #100	; 0x64
 800034c:	4952      	ldr	r1, [pc, #328]	; (8000498 <main+0x280>)
 800034e:	4853      	ldr	r0, [pc, #332]	; (800049c <main+0x284>)
 8000350:	f001 f9c2 	bl	80016d8 <Establecer_valor>
        break;
 8000354:	e016      	b.n	8000384 <main+0x16c>
      case PORCENTAJE_PID_NEGATIVO:
      Establecer_valor("Porcentaje PID -", &pid_negativo, 100);
 8000356:	2264      	movs	r2, #100	; 0x64
 8000358:	4951      	ldr	r1, [pc, #324]	; (80004a0 <main+0x288>)
 800035a:	4852      	ldr	r0, [pc, #328]	; (80004a4 <main+0x28c>)
 800035c:	f001 f9bc 	bl	80016d8 <Establecer_valor>
        break;
 8000360:	e010      	b.n	8000384 <main+0x16c>
      case SUMA_PID_REFERENCIA:
      cambiar_opcion("Suma PID ref", &sumar_pid_con_referencia);
 8000362:	4951      	ldr	r1, [pc, #324]	; (80004a8 <main+0x290>)
 8000364:	4851      	ldr	r0, [pc, #324]	; (80004ac <main+0x294>)
 8000366:	f001 fc47 	bl	8001bf8 <cambiar_opcion>
        break;
 800036a:	e00b      	b.n	8000384 <main+0x16c>
      case LIMITE_SALIDA_ANALOG_POSITIVA:
      Establecer_valor("Voltaje salida +", &limite_analogica_positiva, 10);
 800036c:	220a      	movs	r2, #10
 800036e:	4950      	ldr	r1, [pc, #320]	; (80004b0 <main+0x298>)
 8000370:	4850      	ldr	r0, [pc, #320]	; (80004b4 <main+0x29c>)
 8000372:	f001 f9b1 	bl	80016d8 <Establecer_valor>
        break;
 8000376:	e005      	b.n	8000384 <main+0x16c>
      case LIMITE_SALIDA_ANALOG_NEGATIVA:
      Establecer_valor("Voltaje salida -", &limite_analogica_negativa, 10);
 8000378:	220a      	movs	r2, #10
 800037a:	494f      	ldr	r1, [pc, #316]	; (80004b8 <main+0x2a0>)
 800037c:	484f      	ldr	r0, [pc, #316]	; (80004bc <main+0x2a4>)
 800037e:	f001 f9ab 	bl	80016d8 <Establecer_valor>
        break;
 8000382:	bf00      	nop
      }
      
      continue;
 8000384:	e073      	b.n	800046e <main+0x256>
        Establecer_valor("Filtro digital", &tiempo_filtro_digital, 20000);
        break;
      }
      break;
    case MONITOREO:
      switch (menu_monitoreo())
 8000386:	f000 fdad 	bl	8000ee4 <menu_monitoreo>
 800038a:	4603      	mov	r3, r0
 800038c:	2b01      	cmp	r3, #1
 800038e:	d002      	beq.n	8000396 <main+0x17e>
 8000390:	2b02      	cmp	r3, #2
 8000392:	d003      	beq.n	800039c <main+0x184>
        break;
      case ANALOGICO:
        monitoreo_analogico();
        break;
      }
      break;
 8000394:	e06e      	b.n	8000474 <main+0x25c>
        monitoreo_digital();
 8000396:	f000 fdf5 	bl	8000f84 <monitoreo_digital>
        break;
 800039a:	e002      	b.n	80003a2 <main+0x18a>
        monitoreo_analogico();
 800039c:	f000 feb6 	bl	800110c <monitoreo_analogico>
        break;
 80003a0:	bf00      	nop
      break;
 80003a2:	e067      	b.n	8000474 <main+0x25c>
    case AJUSTES:
      switch (menu_offsets())
 80003a4:	f000 ff90 	bl	80012c8 <menu_offsets>
 80003a8:	4603      	mov	r3, r0
 80003aa:	3b01      	subs	r3, #1
 80003ac:	2b09      	cmp	r3, #9
 80003ae:	d860      	bhi.n	8000472 <main+0x25a>
 80003b0:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <main+0x1a0>)
 80003b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b6:	bf00      	nop
 80003b8:	080003e1 	.word	0x080003e1
 80003bc:	080003ef 	.word	0x080003ef
 80003c0:	080003fd 	.word	0x080003fd
 80003c4:	0800040b 	.word	0x0800040b
 80003c8:	08000419 	.word	0x08000419
 80003cc:	08000427 	.word	0x08000427
 80003d0:	08000435 	.word	0x08000435
 80003d4:	08000443 	.word	0x08000443
 80003d8:	08000451 	.word	0x08000451
 80003dc:	0800045f 	.word	0x0800045f
      {
      case AI1:
        Establecer_valor("Offset AI 1", &offset_AI_1, 2000);
 80003e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003e4:	4936      	ldr	r1, [pc, #216]	; (80004c0 <main+0x2a8>)
 80003e6:	4837      	ldr	r0, [pc, #220]	; (80004c4 <main+0x2ac>)
 80003e8:	f001 f976 	bl	80016d8 <Establecer_valor>
        break;
 80003ec:	e03e      	b.n	800046c <main+0x254>
      case AI2:
        Establecer_valor("Offset AI 2", &offset_AI_2, 2000);
 80003ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003f2:	4935      	ldr	r1, [pc, #212]	; (80004c8 <main+0x2b0>)
 80003f4:	4835      	ldr	r0, [pc, #212]	; (80004cc <main+0x2b4>)
 80003f6:	f001 f96f 	bl	80016d8 <Establecer_valor>
        break;
 80003fa:	e037      	b.n	800046c <main+0x254>
      case AI3:
        Establecer_valor("Offset AI 3", &offset_AI_3, 2000);
 80003fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000400:	4933      	ldr	r1, [pc, #204]	; (80004d0 <main+0x2b8>)
 8000402:	4834      	ldr	r0, [pc, #208]	; (80004d4 <main+0x2bc>)
 8000404:	f001 f968 	bl	80016d8 <Establecer_valor>
        break;
 8000408:	e030      	b.n	800046c <main+0x254>
      case A0:
        Establecer_valor("Offset A0", &offset_A0, 4096);
 800040a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800040e:	4932      	ldr	r1, [pc, #200]	; (80004d8 <main+0x2c0>)
 8000410:	4832      	ldr	r0, [pc, #200]	; (80004dc <main+0x2c4>)
 8000412:	f001 f961 	bl	80016d8 <Establecer_valor>

        canal2 = Establecer_valor_DAC("Canal 2", canal2, 4096);
        //HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2 , DAC_ALIGN_12B_R, 2048);
        HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
        #endif
        break;
 8000416:	e029      	b.n	800046c <main+0x254>
      case KP:
        Establecer_valor("KP", &kp, 32000);
 8000418:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800041c:	4930      	ldr	r1, [pc, #192]	; (80004e0 <main+0x2c8>)
 800041e:	4831      	ldr	r0, [pc, #196]	; (80004e4 <main+0x2cc>)
 8000420:	f001 f95a 	bl	80016d8 <Establecer_valor>
        break;
 8000424:	e022      	b.n	800046c <main+0x254>
      case KI:
        Establecer_valor("KI", &ki, 32000);
 8000426:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800042a:	492f      	ldr	r1, [pc, #188]	; (80004e8 <main+0x2d0>)
 800042c:	482f      	ldr	r0, [pc, #188]	; (80004ec <main+0x2d4>)
 800042e:	f001 f953 	bl	80016d8 <Establecer_valor>
        break;
 8000432:	e01b      	b.n	800046c <main+0x254>
      case KD:
        Establecer_valor("KD", &kd, 32000);
 8000434:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000438:	492d      	ldr	r1, [pc, #180]	; (80004f0 <main+0x2d8>)
 800043a:	482e      	ldr	r0, [pc, #184]	; (80004f4 <main+0x2dc>)
 800043c:	f001 f94c 	bl	80016d8 <Establecer_valor>
        break;
 8000440:	e014      	b.n	800046c <main+0x254>
      case TL:
        Establecer_valor("TL", &tiempo_lazo, 20000);
 8000442:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000446:	492c      	ldr	r1, [pc, #176]	; (80004f8 <main+0x2e0>)
 8000448:	482c      	ldr	r0, [pc, #176]	; (80004fc <main+0x2e4>)
 800044a:	f001 f945 	bl	80016d8 <Establecer_valor>
        break;
 800044e:	e00d      	b.n	800046c <main+0x254>
      case TD:
        Establecer_valor("KI", &td, 20000);
 8000450:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000454:	492a      	ldr	r1, [pc, #168]	; (8000500 <main+0x2e8>)
 8000456:	4825      	ldr	r0, [pc, #148]	; (80004ec <main+0x2d4>)
 8000458:	f001 f93e 	bl	80016d8 <Establecer_valor>
        break;
 800045c:	e006      	b.n	800046c <main+0x254>
      case TI:
        Establecer_valor("KD", &ti, 20000);
 800045e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000462:	4928      	ldr	r1, [pc, #160]	; (8000504 <main+0x2ec>)
 8000464:	4823      	ldr	r0, [pc, #140]	; (80004f4 <main+0x2dc>)
 8000466:	f001 f937 	bl	80016d8 <Establecer_valor>
        break;
 800046a:	bf00      	nop
      }
      break;
 800046c:	e001      	b.n	8000472 <main+0x25a>
      continue;
 800046e:	bf00      	nop
 8000470:	e733      	b.n	80002da <main+0xc2>
      break;
 8000472:	bf00      	nop
    switch (Pantalla_menu_inicial())
 8000474:	e731      	b.n	80002da <main+0xc2>
 8000476:	bf00      	nop
 8000478:	40000800 	.word	0x40000800
 800047c:	20000108 	.word	0x20000108
 8000480:	200002e4 	.word	0x200002e4
 8000484:	08007988 	.word	0x08007988
 8000488:	200002e8 	.word	0x200002e8
 800048c:	08007998 	.word	0x08007998
 8000490:	200002e5 	.word	0x200002e5
 8000494:	080079a4 	.word	0x080079a4
 8000498:	200002ec 	.word	0x200002ec
 800049c:	080079b0 	.word	0x080079b0
 80004a0:	200002f0 	.word	0x200002f0
 80004a4:	080079c4 	.word	0x080079c4
 80004a8:	200002e6 	.word	0x200002e6
 80004ac:	080079d8 	.word	0x080079d8
 80004b0:	200002f4 	.word	0x200002f4
 80004b4:	080079e8 	.word	0x080079e8
 80004b8:	200002f8 	.word	0x200002f8
 80004bc:	080079fc 	.word	0x080079fc
 80004c0:	200002c0 	.word	0x200002c0
 80004c4:	08007a10 	.word	0x08007a10
 80004c8:	200002c4 	.word	0x200002c4
 80004cc:	08007a1c 	.word	0x08007a1c
 80004d0:	200002c8 	.word	0x200002c8
 80004d4:	08007a28 	.word	0x08007a28
 80004d8:	20000000 	.word	0x20000000
 80004dc:	08007a34 	.word	0x08007a34
 80004e0:	200002cc 	.word	0x200002cc
 80004e4:	08007a40 	.word	0x08007a40
 80004e8:	200002d0 	.word	0x200002d0
 80004ec:	08007a44 	.word	0x08007a44
 80004f0:	200002d4 	.word	0x200002d4
 80004f4:	08007a48 	.word	0x08007a48
 80004f8:	200002d8 	.word	0x200002d8
 80004fc:	08007a4c 	.word	0x08007a4c
 8000500:	200002dc 	.word	0x200002dc
 8000504:	200002e0 	.word	0x200002e0

08000508 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	2238      	movs	r2, #56	; 0x38
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f007 f9e0 	bl	80078dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800052e:	f005 f9f7 	bl	8005920 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8000532:	230a      	movs	r3, #10
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	2340      	movs	r3, #64	; 0x40
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000544:	2300      	movs	r3, #0
 8000546:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	4618      	mov	r0, r3
 800054e:	f005 fa9b 	bl	8005a88 <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000558:	f001 fc1e 	bl	8001d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800055c:	230f      	movs	r3, #15
 800055e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000560:	2301      	movs	r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f005 fd9f 	bl	80060b8 <HAL_RCC_ClockConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000580:	f001 fc0a 	bl	8001d98 <Error_Handler>
  }
}
 8000584:	bf00      	nop
 8000586:	3750      	adds	r7, #80	; 0x50
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2220      	movs	r2, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f007 f999 	bl	80078dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 80005aa:	4b47      	ldr	r3, [pc, #284]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005b2:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ba:	4b43      	ldr	r3, [pc, #268]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c0:	4b41      	ldr	r3, [pc, #260]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005c6:	4b40      	ldr	r3, [pc, #256]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005cc:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005d2:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005d4:	2208      	movs	r2, #8
 80005d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d8:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80005e4:	4b38      	ldr	r3, [pc, #224]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ea:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f2:	4b35      	ldr	r3, [pc, #212]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005fe:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <MX_ADC1_Init+0x13c>)
 8000600:	2201      	movs	r2, #1
 8000602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_ADC1_Init+0x13c>)
 8000608:	2200      	movs	r2, #0
 800060a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <MX_ADC1_Init+0x13c>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	482c      	ldr	r0, [pc, #176]	; (80006c8 <MX_ADC1_Init+0x13c>)
 8000616:	f002 fc13 	bl	8002e40 <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000620:	f001 fbba 	bl	8001d98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062c:	4619      	mov	r1, r3
 800062e:	4826      	ldr	r0, [pc, #152]	; (80006c8 <MX_ADC1_Init+0x13c>)
 8000630:	f003 fcfa 	bl	8004028 <HAL_ADCEx_MultiModeConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800063a:	f001 fbad 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_3;
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_ADC1_Init+0x140>)
 8000640:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000642:	2306      	movs	r3, #6
 8000644:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064a:	237f      	movs	r3, #127	; 0x7f
 800064c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800064e:	2304      	movs	r3, #4
 8000650:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4619      	mov	r1, r3
 800065a:	481b      	ldr	r0, [pc, #108]	; (80006c8 <MX_ADC1_Init+0x13c>)
 800065c:	f002 ff50 	bl	8003500 <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000666:	f001 fb97 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_4;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x144>)
 800066c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800066e:	230c      	movs	r3, #12
 8000670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4619      	mov	r1, r3
 8000676:	4814      	ldr	r0, [pc, #80]	; (80006c8 <MX_ADC1_Init+0x13c>)
 8000678:	f002 ff42 	bl	8003500 <HAL_ADC_ConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000682:	f001 fb89 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_15;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_ADC1_Init+0x148>)
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800068a:	2312      	movs	r3, #18
 800068c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_ADC1_Init+0x13c>)
 8000694:	f002 ff34 	bl	8003500 <HAL_ADC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800069e:	f001 fb7b 	bl	8001d98 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_ADC1_Init+0x14c>)
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006a6:	2318      	movs	r3, #24
 80006a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <MX_ADC1_Init+0x13c>)
 80006b0:	f002 ff26 	bl	8003500 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80006ba:	f001 fb6d 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	; 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000003c 	.word	0x2000003c
 80006cc:	0c900008 	.word	0x0c900008
 80006d0:	10c00010 	.word	0x10c00010
 80006d4:	3ef08000 	.word	0x3ef08000
 80006d8:	c3210000 	.word	0xc3210000

080006dc <MX_DAC1_Init>:
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2230      	movs	r2, #48	; 0x30
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f007 f8f7 	bl	80078dc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
   */
  hdac1.Instance = DAC1;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_DAC1_Init+0x80>)
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <MX_DAC1_Init+0x84>)
 80006f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006f4:	4819      	ldr	r0, [pc, #100]	; (800075c <MX_DAC1_Init+0x80>)
 80006f6:	f003 fe4a 	bl	800438e <HAL_DAC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000700:	f001 fb4a 	bl	8001d98 <Error_Handler>
  }

  /** DAC channel OUT1 config
   */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000704:	2302      	movs	r3, #2
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <MX_DAC1_Init+0x80>)
 8000730:	f003 feca 	bl	80044c8 <HAL_DAC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800073a:	f001 fb2d 	bl	8001d98 <Error_Handler>
  }

  /** DAC channel OUT2 config
   */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	2210      	movs	r2, #16
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_DAC1_Init+0x80>)
 8000746:	f003 febf 	bl	80044c8 <HAL_DAC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000750:	f001 fb22 	bl	8001d98 <Error_Handler>
  }

  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */
}
 8000754:	bf00      	nop
 8000756:	3730      	adds	r7, #48	; 0x30
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000108 	.word	0x20000108
 8000760:	50000800 	.word	0x50000800

08000764 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_I2C2_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_I2C2_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_I2C2_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <MX_I2C2_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_I2C2_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_I2C2_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_I2C2_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_I2C2_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C2_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_I2C2_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C2_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_I2C2_Init+0x74>)
 80007a0:	f004 fbc0 	bl	8004f24 <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f001 faf5 	bl	8001d98 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_I2C2_Init+0x74>)
 80007b2:	f004 ffad 	bl	8005710 <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f001 faec 	bl	8001d98 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_I2C2_Init+0x74>)
 80007c4:	f004 ffef 	bl	80057a6 <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f001 fae3 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000011c 	.word	0x2000011c
 80007dc:	40005800 	.word	0x40005800
 80007e0:	00303d5b 	.word	0x00303d5b

080007e4 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_RTC_Init+0xbc>)
 80007fe:	4a29      	ldr	r2, [pc, #164]	; (80008a4 <MX_RTC_Init+0xc0>)
 8000800:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000802:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <MX_RTC_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_RTC_Init+0xbc>)
 800080a:	227f      	movs	r2, #127	; 0x7f
 800080c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <MX_RTC_Init+0xbc>)
 8000810:	22ff      	movs	r2, #255	; 0xff
 8000812:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_RTC_Init+0xbc>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_RTC_Init+0xbc>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_RTC_Init+0xbc>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_RTC_Init+0xbc>)
 8000828:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_RTC_Init+0xbc>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000834:	481a      	ldr	r0, [pc, #104]	; (80008a0 <MX_RTC_Init+0xbc>)
 8000836:	f006 f81f 	bl	8006878 <HAL_RTC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000840:	f001 faaa 	bl	8001d98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
   */
  sTime.Hours = 0x0;
 8000844:	2300      	movs	r3, #0
 8000846:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000848:	2300      	movs	r3, #0
 800084a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800084c:	2300      	movs	r3, #0
 800084e:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2201      	movs	r2, #1
 8000860:	4619      	mov	r1, r3
 8000862:	480f      	ldr	r0, [pc, #60]	; (80008a0 <MX_RTC_Init+0xbc>)
 8000864:	f006 f87d 	bl	8006962 <HAL_RTC_SetTime>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 800086e:	f001 fa93 	bl	8001d98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000872:	2301      	movs	r3, #1
 8000874:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000876:	2301      	movs	r3, #1
 8000878:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800087a:	2301      	movs	r3, #1
 800087c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800087e:	2300      	movs	r3, #0
 8000880:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	2201      	movs	r2, #1
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_RTC_Init+0xbc>)
 800088a:	f006 f907 	bl	8006a9c <HAL_RTC_SetDate>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000894:	f001 fa80 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000168 	.word	0x20000168
 80008a4:	40002800 	.word	0x40002800

080008a8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_TIM1_Init+0xa0>)
 80008c8:	4a20      	ldr	r2, [pc, #128]	; (800094c <MX_TIM1_Init+0xa4>)
 80008ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_TIM1_Init+0xa0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_TIM1_Init+0xa0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1700;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_TIM1_Init+0xa0>)
 80008da:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80008de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_TIM1_Init+0xa0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_TIM1_Init+0xa0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_TIM1_Init+0xa0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008f2:	4815      	ldr	r0, [pc, #84]	; (8000948 <MX_TIM1_Init+0xa0>)
 80008f4:	f006 fa18 	bl	8006d28 <HAL_TIM_Base_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008fe:	f001 fa4b 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000906:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <MX_TIM1_Init+0xa0>)
 8000910:	f006 fc86 	bl	8007220 <HAL_TIM_ConfigClockSource>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800091a:	f001 fa3d 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_TIM1_Init+0xa0>)
 8000930:	f006 fece 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800093a:	f001 fa2d 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000190 	.word	0x20000190
 800094c:	40012c00 	.word	0x40012c00

08000950 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	; 0x30
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	2224      	movs	r2, #36	; 0x24
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f006 ffbc 	bl	80078dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_TIM2_Init+0xa4>)
 8000970:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000974:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_TIM2_Init+0xa4>)
 8000978:	2201      	movs	r2, #1
 800097a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_TIM2_Init+0xa4>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_TIM2_Init+0xa4>)
 8000984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000988:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_TIM2_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM2_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000996:	2303      	movs	r3, #3
 8000998:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800099e:	2301      	movs	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009ae:	2301      	movs	r3, #1
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_TIM2_Init+0xa4>)
 80009c2:	f006 fa08 	bl	8006dd6 <HAL_TIM_Encoder_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80009cc:	f001 f9e4 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_TIM2_Init+0xa4>)
 80009de:	f006 fe77 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80009e8:	f001 f9d6 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 80009ec:	bf00      	nop
 80009ee:	3730      	adds	r7, #48	; 0x30
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200001dc 	.word	0x200001dc

080009f8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a16:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <MX_TIM3_Init+0x98>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a1e:	220a      	movs	r2, #10
 8000a20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 17000;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a2a:	f244 2268 	movw	r2, #17000	; 0x4268
 8000a2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a3e:	f006 f973 	bl	8006d28 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a48:	f001 f9a6 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	4619      	mov	r1, r3
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a5a:	f006 fbe1 	bl	8007220 <HAL_TIM_ConfigClockSource>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a64:	f001 f998 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a76:	f006 fe2b 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a80:	f001 f98a 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000228 	.word	0x20000228
 8000a90:	40000400 	.word	0x40000400

08000a94 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2224      	movs	r2, #36	; 0x24
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 ff1a 	bl	80078dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_TIM4_Init+0xa0>)
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <MX_TIM4_Init+0xa4>)
 8000ab6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_TIM4_Init+0xa0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_TIM4_Init+0xa0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100000;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_TIM4_Init+0xa0>)
 8000ac6:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <MX_TIM4_Init+0xa8>)
 8000ac8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_TIM4_Init+0xa0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_TIM4_Init+0xa0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_TIM4_Init+0xa0>)
 8000b02:	f006 f968 	bl	8006dd6 <HAL_TIM_Encoder_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f001 f944 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_TIM4_Init+0xa0>)
 8000b1e:	f006 fdd7 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000b28:	f001 f936 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	; 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000274 	.word	0x20000274
 8000b38:	40000800 	.word	0x40000800
 8000b3c:	000186a0 	.word	0x000186a0

08000b40 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_DMA_Init+0x50>)
 8000b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4a:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <MX_DMA_Init+0x50>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6493      	str	r3, [r2, #72]	; 0x48
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_DMA_Init+0x50>)
 8000b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_DMA_Init+0x50>)
 8000b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <MX_DMA_Init+0x50>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6493      	str	r3, [r2, #72]	; 0x48
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_DMA_Init+0x50>)
 8000b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	200b      	movs	r0, #11
 8000b7c:	f003 fbd3 	bl	8004326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b80:	200b      	movs	r0, #11
 8000b82:	f003 fbea 	bl	800435a <HAL_NVIC_EnableIRQ>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000baa:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <MX_GPIO_Init+0x108>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a3b      	ldr	r2, [pc, #236]	; (8000c9c <MX_GPIO_Init+0x108>)
 8000bb0:	f043 0320 	orr.w	r3, r3, #32
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <MX_GPIO_Init+0x108>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0320 	and.w	r3, r3, #32
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <MX_GPIO_Init+0x108>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a35      	ldr	r2, [pc, #212]	; (8000c9c <MX_GPIO_Init+0x108>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <MX_GPIO_Init+0x108>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <MX_GPIO_Init+0x108>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <MX_GPIO_Init+0x108>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <MX_GPIO_Init+0x108>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO_2_ERROR_GPIO_Port, DO_2_ERROR_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f004 f97a 	bl	8004ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO_1_OK_GPIO_Port, DO_1_OK_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2108      	movs	r1, #8
 8000c04:	4826      	ldr	r0, [pc, #152]	; (8000ca0 <MX_GPIO_Init+0x10c>)
 8000c06:	f004 f975 	bl	8004ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOTON_1_Pin BOTON_2_Pin */
  GPIO_InitStruct.Pin = BOTON_1_Pin | BOTON_2_Pin;
 8000c0a:	23c0      	movs	r3, #192	; 0xc0
 8000c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f003 ffce 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PERILLA_BOTON_Pin */
  GPIO_InitStruct.Pin = PERILLA_BOTON_Pin;
 8000c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PERILLA_BOTON_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3c:	f003 ffc0 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DO_2_ERROR_Pin */
  GPIO_InitStruct.Pin = DO_2_ERROR_Pin;
 8000c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DO_2_ERROR_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f003 ffb0 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DO_1_OK_Pin */
  GPIO_InitStruct.Pin = DO_1_OK_Pin;
 8000c60:	2308      	movs	r3, #8
 8000c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DO_1_OK_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <MX_GPIO_Init+0x10c>)
 8000c78:	f003 ffa2 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_4_Pin DI_3_Pin DI_2_PID_APAGADO_Pin DI_1_ENABLED_Pin */
  GPIO_InitStruct.Pin = DI_4_Pin | DI_3_Pin | DI_2_PID_APAGADO_Pin | DI_1_ENABLED_Pin;
 8000c7c:	23f0      	movs	r3, #240	; 0xf0
 8000c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_GPIO_Init+0x10c>)
 8000c90:	f003 ff96 	bl	8004bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000400 	.word	0x48000400

08000ca4 <Pantalla_inicial>:
  }
  ssd1306_UpdateScreen();
}

void Pantalla_inicial(int tiempo_ms)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  ssd1306_Fill(Black);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f001 fc1f 	bl	80024f0 <ssd1306_Fill>
  ssd1306_SetCursor(32, 16);
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	2020      	movs	r0, #32
 8000cb6:	f001 fd69 	bl	800278c <ssd1306_SetCursor>
  ssd1306_WriteString("ACM", Font_16x24, White);
 8000cba:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <Pantalla_inicial+0x4c>)
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	ca06      	ldmia	r2, {r1, r2}
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <Pantalla_inicial+0x50>)
 8000cc2:	f001 fd3d 	bl	8002740 <ssd1306_WriteString>
  ssd1306_SetCursor(10, 50);
 8000cc6:	2132      	movs	r1, #50	; 0x32
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f001 fd5f 	bl	800278c <ssd1306_SetCursor>
  ssd1306_WriteString("automatizacion", Font_7x10, White);
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <Pantalla_inicial+0x54>)
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	ca06      	ldmia	r2, {r1, r2}
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <Pantalla_inicial+0x58>)
 8000cd6:	f001 fd33 	bl	8002740 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000cda:	f001 fc2d 	bl	8002538 <ssd1306_UpdateScreen>
  HAL_Delay(tiempo_ms);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fe0d 	bl	8002900 <HAL_Delay>
  return;
 8000ce6:	bf00      	nop
}
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000010 	.word	0x20000010
 8000cf4:	08007aa0 	.word	0x08007aa0
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	08007aa4 	.word	0x08007aa4

08000d00 <Leer_botones>:

int Leer_botones(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
  int estado_anterior = NULO;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
  int estado_actual = NULO;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  int boton_presionado = false;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]

  // Leer el estado de BOTON_1
  if (!HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin))
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f004 f8d4 	bl	8004ec4 <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d104      	bne.n	8000d2c <Leer_botones+0x2c>
  {
    estado_actual = ACEPTAR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
    boton_presionado = true;
 8000d26:	2301      	movs	r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	e01e      	b.n	8000d6a <Leer_botones+0x6a>
  }
  // Leer el estado de BOTON_2
  else if (!HAL_GPIO_ReadPin(BOTON_2_GPIO_Port, BOTON_2_Pin))
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f004 f8c7 	bl	8004ec4 <HAL_GPIO_ReadPin>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d104      	bne.n	8000d46 <Leer_botones+0x46>
  {
    estado_actual = CANCELAR;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	60fb      	str	r3, [r7, #12]
    boton_presionado = true;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	e011      	b.n	8000d6a <Leer_botones+0x6a>
  }
  // Leer el estado de PERILLA_BOTON
  else if (!HAL_GPIO_ReadPin(PERILLA_BOTON_GPIO_Port, PERILLA_BOTON_Pin))
 8000d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4e:	f004 f8b9 	bl	8004ec4 <HAL_GPIO_ReadPin>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d104      	bne.n	8000d62 <Leer_botones+0x62>
  {
    estado_actual = PERILLA;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60fb      	str	r3, [r7, #12]
    boton_presionado = true;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	e003      	b.n	8000d6a <Leer_botones+0x6a>
  }
  else
  {
    estado_actual = NULO;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
    boton_presionado = false;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
  }

  // Si el estado actual es diferente al estado anterior
  if (estado_actual != estado_anterior)
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d021      	beq.n	8000db6 <Leer_botones+0xb6>
  {
    // Si se presionó algún botón, esperar a que se suelte
    if (boton_presionado)
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d01c      	beq.n	8000db2 <Leer_botones+0xb2>
    {
      while (true)
      {
        // Esperar a que el botón se suelte
        if (HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin) &&
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f004 f8a1 	bl	8004ec4 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f7      	beq.n	8000d78 <Leer_botones+0x78>
            HAL_GPIO_ReadPin(BOTON_2_GPIO_Port, BOTON_2_Pin) &&
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f004 f899 	bl	8004ec4 <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
        if (HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin) &&
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0ef      	beq.n	8000d78 <Leer_botones+0x78>
            HAL_GPIO_ReadPin(PERILLA_BOTON_GPIO_Port, PERILLA_BOTON_Pin))
 8000d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f004 f890 	bl	8004ec4 <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
            HAL_GPIO_ReadPin(BOTON_2_GPIO_Port, BOTON_2_Pin) &&
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d100      	bne.n	8000dac <Leer_botones+0xac>
        if (HAL_GPIO_ReadPin(BOTON_1_GPIO_Port, BOTON_1_Pin) &&
 8000daa:	e7e5      	b.n	8000d78 <Leer_botones+0x78>
        {
          break;
 8000dac:	bf00      	nop
        }
      }
      return estado_actual;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	e001      	b.n	8000db6 <Leer_botones+0xb6>
    }

    // Actualizar el estado anterior
    estado_anterior = estado_actual;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	607b      	str	r3, [r7, #4]
  }
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <Leer_encoder>:

// Lee el estado de la perilla
int Leer_encoder(int maximo)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  int encoder;
  encoder = TIM4->CNT;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <Leer_encoder+0x34>)
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	60fb      	str	r3, [r7, #12]
  return ((encoder / 2) % maximo) + 1;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	0fda      	lsrs	r2, r3, #31
 8000dd2:	4413      	add	r3, r2
 8000dd4:	105b      	asrs	r3, r3, #1
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	fb01 f202 	mul.w	r2, r1, r2
 8000de2:	1a9b      	subs	r3, r3, r2
 8000de4:	3301      	adds	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40000800 	.word	0x40000800

08000df8 <Leer_encoder1>:

// lee el encoder 1
int Leer_encoder1(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return TIM2->CNT;
 8000dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <Pantalla_menu_inicial>:

int Pantalla_menu_inicial(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  int opcion, boton;

  while (true)
  {
    opcion = Leer_encoder(3);
 8000e12:	2003      	movs	r0, #3
 8000e14:	f7ff ffd4 	bl	8000dc0 <Leer_encoder>
 8000e18:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f001 fb68 	bl	80024f0 <ssd1306_Fill>
    ssd1306_SetCursor(42, 0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	202a      	movs	r0, #42	; 0x2a
 8000e24:	f001 fcb2 	bl	800278c <ssd1306_SetCursor>
    ssd1306_WriteString("inicial", Font_7x10, White);
 8000e28:	4a29      	ldr	r2, [pc, #164]	; (8000ed0 <Pantalla_menu_inicial+0xc4>)
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	ca06      	ldmia	r2, {r1, r2}
 8000e2e:	4829      	ldr	r0, [pc, #164]	; (8000ed4 <Pantalla_menu_inicial+0xc8>)
 8000e30:	f001 fc86 	bl	8002740 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 18);
 8000e34:	2112      	movs	r1, #18
 8000e36:	2000      	movs	r0, #0
 8000e38:	f001 fca8 	bl	800278c <ssd1306_SetCursor>
    if (opcion == 1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d106      	bne.n	8000e50 <Pantalla_menu_inicial+0x44>
    {
      ssd1306_WriteString("Instalador", Font_7x10, Black);
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <Pantalla_menu_inicial+0xc4>)
 8000e44:	2300      	movs	r3, #0
 8000e46:	ca06      	ldmia	r2, {r1, r2}
 8000e48:	4823      	ldr	r0, [pc, #140]	; (8000ed8 <Pantalla_menu_inicial+0xcc>)
 8000e4a:	f001 fc79 	bl	8002740 <ssd1306_WriteString>
 8000e4e:	e005      	b.n	8000e5c <Pantalla_menu_inicial+0x50>
    }
    else
    {
      ssd1306_WriteString("Instalador", Font_7x10, White);
 8000e50:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <Pantalla_menu_inicial+0xc4>)
 8000e52:	2301      	movs	r3, #1
 8000e54:	ca06      	ldmia	r2, {r1, r2}
 8000e56:	4820      	ldr	r0, [pc, #128]	; (8000ed8 <Pantalla_menu_inicial+0xcc>)
 8000e58:	f001 fc72 	bl	8002740 <ssd1306_WriteString>
    }

    ssd1306_SetCursor(0, 36);
 8000e5c:	2124      	movs	r1, #36	; 0x24
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f001 fc94 	bl	800278c <ssd1306_SetCursor>
    if (opcion == 2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d106      	bne.n	8000e78 <Pantalla_menu_inicial+0x6c>
    {
      ssd1306_WriteString("Monitoreo", Font_7x10, Black);
 8000e6a:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <Pantalla_menu_inicial+0xc4>)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	ca06      	ldmia	r2, {r1, r2}
 8000e70:	481a      	ldr	r0, [pc, #104]	; (8000edc <Pantalla_menu_inicial+0xd0>)
 8000e72:	f001 fc65 	bl	8002740 <ssd1306_WriteString>
 8000e76:	e005      	b.n	8000e84 <Pantalla_menu_inicial+0x78>
    }
    else
    {
      ssd1306_WriteString("Monitoreo", Font_7x10, White);
 8000e78:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <Pantalla_menu_inicial+0xc4>)
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	ca06      	ldmia	r2, {r1, r2}
 8000e7e:	4817      	ldr	r0, [pc, #92]	; (8000edc <Pantalla_menu_inicial+0xd0>)
 8000e80:	f001 fc5e 	bl	8002740 <ssd1306_WriteString>
    }

    ssd1306_SetCursor(0, 54);
 8000e84:	2136      	movs	r1, #54	; 0x36
 8000e86:	2000      	movs	r0, #0
 8000e88:	f001 fc80 	bl	800278c <ssd1306_SetCursor>
    if (opcion == 3)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d106      	bne.n	8000ea0 <Pantalla_menu_inicial+0x94>
    {
      ssd1306_WriteString("Ajustes", Font_7x10, Black);
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <Pantalla_menu_inicial+0xc4>)
 8000e94:	2300      	movs	r3, #0
 8000e96:	ca06      	ldmia	r2, {r1, r2}
 8000e98:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <Pantalla_menu_inicial+0xd4>)
 8000e9a:	f001 fc51 	bl	8002740 <ssd1306_WriteString>
 8000e9e:	e005      	b.n	8000eac <Pantalla_menu_inicial+0xa0>
    }
    else
    {
      ssd1306_WriteString("Ajustes", Font_7x10, White);
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <Pantalla_menu_inicial+0xc4>)
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	ca06      	ldmia	r2, {r1, r2}
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <Pantalla_menu_inicial+0xd4>)
 8000ea8:	f001 fc4a 	bl	8002740 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8000eac:	f001 fb44 	bl	8002538 <ssd1306_UpdateScreen>

    boton = Leer_botones();
 8000eb0:	f7ff ff26 	bl	8000d00 <Leer_botones>
 8000eb4:	6038      	str	r0, [r7, #0]

    if (boton == ACEPTAR || boton == PERILLA)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d003      	beq.n	8000ec4 <Pantalla_menu_inicial+0xb8>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d000      	beq.n	8000ec4 <Pantalla_menu_inicial+0xb8>
    opcion = Leer_encoder(3);
 8000ec2:	e7a6      	b.n	8000e12 <Pantalla_menu_inicial+0x6>
    {
      break;
    }
  }
  return opcion;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	08007ab4 	.word	0x08007ab4
 8000ed8:	08007abc 	.word	0x08007abc
 8000edc:	08007ac8 	.word	0x08007ac8
 8000ee0:	08007ad4 	.word	0x08007ad4

08000ee4 <menu_monitoreo>:

int menu_monitoreo(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  int opcion;
  while (true)
  {
    opcion = Leer_encoder(2);
 8000eea:	2002      	movs	r0, #2
 8000eec:	f7ff ff68 	bl	8000dc0 <Leer_encoder>
 8000ef0:	6078      	str	r0, [r7, #4]

    ssd1306_Fill(Black);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f001 fafc 	bl	80024f0 <ssd1306_Fill>
    ssd1306_SetCursor(0, 18);
 8000ef8:	2112      	movs	r1, #18
 8000efa:	2000      	movs	r0, #0
 8000efc:	f001 fc46 	bl	800278c <ssd1306_SetCursor>

    if (opcion == 1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d106      	bne.n	8000f14 <menu_monitoreo+0x30>
    {
      ssd1306_WriteString("E/S digital", Font_7x10, Black);
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <menu_monitoreo+0x94>)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	ca06      	ldmia	r2, {r1, r2}
 8000f0c:	481b      	ldr	r0, [pc, #108]	; (8000f7c <menu_monitoreo+0x98>)
 8000f0e:	f001 fc17 	bl	8002740 <ssd1306_WriteString>
 8000f12:	e005      	b.n	8000f20 <menu_monitoreo+0x3c>
    }
    else
    {
      ssd1306_WriteString("E/S digital", Font_7x10, White);
 8000f14:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <menu_monitoreo+0x94>)
 8000f16:	2301      	movs	r3, #1
 8000f18:	ca06      	ldmia	r2, {r1, r2}
 8000f1a:	4818      	ldr	r0, [pc, #96]	; (8000f7c <menu_monitoreo+0x98>)
 8000f1c:	f001 fc10 	bl	8002740 <ssd1306_WriteString>
    }

    ssd1306_SetCursor(0, 36);
 8000f20:	2124      	movs	r1, #36	; 0x24
 8000f22:	2000      	movs	r0, #0
 8000f24:	f001 fc32 	bl	800278c <ssd1306_SetCursor>
    if (opcion == 2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d106      	bne.n	8000f3c <menu_monitoreo+0x58>
    {
      ssd1306_WriteString("E/S analogica", Font_7x10, Black);
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <menu_monitoreo+0x94>)
 8000f30:	2300      	movs	r3, #0
 8000f32:	ca06      	ldmia	r2, {r1, r2}
 8000f34:	4812      	ldr	r0, [pc, #72]	; (8000f80 <menu_monitoreo+0x9c>)
 8000f36:	f001 fc03 	bl	8002740 <ssd1306_WriteString>
 8000f3a:	e005      	b.n	8000f48 <menu_monitoreo+0x64>
    }
    else
    {
      ssd1306_WriteString("E/S analogica", Font_7x10, White);
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <menu_monitoreo+0x94>)
 8000f3e:	2301      	movs	r3, #1
 8000f40:	ca06      	ldmia	r2, {r1, r2}
 8000f42:	480f      	ldr	r0, [pc, #60]	; (8000f80 <menu_monitoreo+0x9c>)
 8000f44:	f001 fbfc 	bl	8002740 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8000f48:	f001 faf6 	bl	8002538 <ssd1306_UpdateScreen>

    switch (Leer_botones())
 8000f4c:	f7ff fed8 	bl	8000d00 <Leer_botones>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d006      	beq.n	8000f64 <menu_monitoreo+0x80>
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	dcc7      	bgt.n	8000eea <menu_monitoreo+0x6>
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d002      	beq.n	8000f64 <menu_monitoreo+0x80>
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d002      	beq.n	8000f68 <menu_monitoreo+0x84>
 8000f62:	e003      	b.n	8000f6c <menu_monitoreo+0x88>
    {
    case ACEPTAR:
    case PERILLA:
      return opcion;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	e002      	b.n	8000f6e <menu_monitoreo+0x8a>
      break;
    case CANCELAR:
      return NULO;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e000      	b.n	8000f6e <menu_monitoreo+0x8a>
    opcion = Leer_encoder(2);
 8000f6c:	e7bd      	b.n	8000eea <menu_monitoreo+0x6>
      break;
    }
  }
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	08007adc 	.word	0x08007adc
 8000f80:	08007ae8 	.word	0x08007ae8

08000f84 <monitoreo_digital>:

void monitoreo_digital(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
  char valor_encoder[10] = {0};
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	809a      	strh	r2, [r3, #4]
  while (true)
  {

    ssd1306_Fill(Black);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f001 faa9 	bl	80024f0 <ssd1306_Fill>

    switch (Leer_encoder(2))
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f7ff ff0e 	bl	8000dc0 <Leer_encoder>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d002      	beq.n	8000fb0 <monitoreo_digital+0x2c>
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d05e      	beq.n	800106c <monitoreo_digital+0xe8>
 8000fae:	e086      	b.n	80010be <monitoreo_digital+0x13a>
    {
    case 1:
      itoa(Leer_encoder1(), valor_encoder, 10);
 8000fb0:	f7ff ff22 	bl	8000df8 <Leer_encoder1>
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f006 fc8d 	bl	80078d8 <itoa>
      ssd1306_SetCursor(0, 0);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f001 fbe3 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("E/S digital 1/2", Font_7x10, White);
 8000fc6:	4a46      	ldr	r2, [pc, #280]	; (80010e0 <monitoreo_digital+0x15c>)
 8000fc8:	2301      	movs	r3, #1
 8000fca:	ca06      	ldmia	r2, {r1, r2}
 8000fcc:	4845      	ldr	r0, [pc, #276]	; (80010e4 <monitoreo_digital+0x160>)
 8000fce:	f001 fbb7 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 18);
 8000fd2:	2112      	movs	r1, #18
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f001 fbd9 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("Encoder", Font_7x10, White);
 8000fda:	4a41      	ldr	r2, [pc, #260]	; (80010e0 <monitoreo_digital+0x15c>)
 8000fdc:	2301      	movs	r3, #1
 8000fde:	ca06      	ldmia	r2, {r1, r2}
 8000fe0:	4841      	ldr	r0, [pc, #260]	; (80010e8 <monitoreo_digital+0x164>)
 8000fe2:	f001 fbad 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(64, 18);
 8000fe6:	2112      	movs	r1, #18
 8000fe8:	2040      	movs	r0, #64	; 0x40
 8000fea:	f001 fbcf 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(valor_encoder, Font_7x10, White);
 8000fee:	4a3c      	ldr	r2, [pc, #240]	; (80010e0 <monitoreo_digital+0x15c>)
 8000ff0:	1d38      	adds	r0, r7, #4
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	ca06      	ldmia	r2, {r1, r2}
 8000ff6:	f001 fba3 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 36);
 8000ffa:	2124      	movs	r1, #36	; 0x24
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f001 fbc5 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("DI 1", Font_7x10, HAL_GPIO_ReadPin(DI_1_ENABLED_GPIO_Port, DI_1_ENABLED_Pin));
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	4839      	ldr	r0, [pc, #228]	; (80010ec <monitoreo_digital+0x168>)
 8001006:	f003 ff5d 	bl	8004ec4 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	4a34      	ldr	r2, [pc, #208]	; (80010e0 <monitoreo_digital+0x15c>)
 800100e:	ca06      	ldmia	r2, {r1, r2}
 8001010:	4837      	ldr	r0, [pc, #220]	; (80010f0 <monitoreo_digital+0x16c>)
 8001012:	f001 fb95 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 54);
 8001016:	2136      	movs	r1, #54	; 0x36
 8001018:	2000      	movs	r0, #0
 800101a:	f001 fbb7 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("DI 2", Font_7x10, HAL_GPIO_ReadPin(DI_2_PID_APAGADO_GPIO_Port, DI_2_PID_APAGADO_Pin));
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	4832      	ldr	r0, [pc, #200]	; (80010ec <monitoreo_digital+0x168>)
 8001022:	f003 ff4f 	bl	8004ec4 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <monitoreo_digital+0x15c>)
 800102a:	ca06      	ldmia	r2, {r1, r2}
 800102c:	4831      	ldr	r0, [pc, #196]	; (80010f4 <monitoreo_digital+0x170>)
 800102e:	f001 fb87 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(64, 36);
 8001032:	2124      	movs	r1, #36	; 0x24
 8001034:	2040      	movs	r0, #64	; 0x40
 8001036:	f001 fba9 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("DI 3", Font_7x10, HAL_GPIO_ReadPin(DI_3_GPIO_Port, DI_3_Pin));
 800103a:	2120      	movs	r1, #32
 800103c:	482b      	ldr	r0, [pc, #172]	; (80010ec <monitoreo_digital+0x168>)
 800103e:	f003 ff41 	bl	8004ec4 <HAL_GPIO_ReadPin>
 8001042:	4603      	mov	r3, r0
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <monitoreo_digital+0x15c>)
 8001046:	ca06      	ldmia	r2, {r1, r2}
 8001048:	482b      	ldr	r0, [pc, #172]	; (80010f8 <monitoreo_digital+0x174>)
 800104a:	f001 fb79 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(64, 54);
 800104e:	2136      	movs	r1, #54	; 0x36
 8001050:	2040      	movs	r0, #64	; 0x40
 8001052:	f001 fb9b 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("DI 4", Font_7x10, HAL_GPIO_ReadPin(DI_4_GPIO_Port, DI_4_Pin));
 8001056:	2110      	movs	r1, #16
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <monitoreo_digital+0x168>)
 800105a:	f003 ff33 	bl	8004ec4 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <monitoreo_digital+0x15c>)
 8001062:	ca06      	ldmia	r2, {r1, r2}
 8001064:	4825      	ldr	r0, [pc, #148]	; (80010fc <monitoreo_digital+0x178>)
 8001066:	f001 fb6b 	bl	8002740 <ssd1306_WriteString>
      break;
 800106a:	e028      	b.n	80010be <monitoreo_digital+0x13a>
    case 2:
      ssd1306_SetCursor(0, 0);
 800106c:	2100      	movs	r1, #0
 800106e:	2000      	movs	r0, #0
 8001070:	f001 fb8c 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("E/S digital 2/2", Font_7x10, White);
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <monitoreo_digital+0x15c>)
 8001076:	2301      	movs	r3, #1
 8001078:	ca06      	ldmia	r2, {r1, r2}
 800107a:	4821      	ldr	r0, [pc, #132]	; (8001100 <monitoreo_digital+0x17c>)
 800107c:	f001 fb60 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 18);
 8001080:	2112      	movs	r1, #18
 8001082:	2000      	movs	r0, #0
 8001084:	f001 fb82 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("OK", Font_7x10, HAL_GPIO_ReadPin(DO_1_OK_GPIO_Port, DO_1_OK_Pin));
 8001088:	2108      	movs	r1, #8
 800108a:	4818      	ldr	r0, [pc, #96]	; (80010ec <monitoreo_digital+0x168>)
 800108c:	f003 ff1a 	bl	8004ec4 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <monitoreo_digital+0x15c>)
 8001094:	ca06      	ldmia	r2, {r1, r2}
 8001096:	481b      	ldr	r0, [pc, #108]	; (8001104 <monitoreo_digital+0x180>)
 8001098:	f001 fb52 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(64, 18);
 800109c:	2112      	movs	r1, #18
 800109e:	2040      	movs	r0, #64	; 0x40
 80010a0:	f001 fb74 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("ERR", Font_7x10, HAL_GPIO_ReadPin(DO_2_ERROR_GPIO_Port, DO_2_ERROR_Pin));
 80010a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f003 ff0a 	bl	8004ec4 <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <monitoreo_digital+0x15c>)
 80010b4:	ca06      	ldmia	r2, {r1, r2}
 80010b6:	4814      	ldr	r0, [pc, #80]	; (8001108 <monitoreo_digital+0x184>)
 80010b8:	f001 fb42 	bl	8002740 <ssd1306_WriteString>
      break;
 80010bc:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 80010be:	f001 fa3b 	bl	8002538 <ssd1306_UpdateScreen>

    switch (Leer_botones())
 80010c2:	f7ff fe1d 	bl	8000d00 <Leer_botones>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	dc02      	bgt.n	80010d2 <monitoreo_digital+0x14e>
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dc03      	bgt.n	80010d8 <monitoreo_digital+0x154>
 80010d0:	e001      	b.n	80010d6 <monitoreo_digital+0x152>
 80010d2:	2b03      	cmp	r3, #3
    case ACEPTAR:
    case CANCELAR:
      return;
      break;
    case PERILLA:
      break;
 80010d4:	bf00      	nop
    ssd1306_Fill(Black);
 80010d6:	e75f      	b.n	8000f98 <monitoreo_digital+0x14>
      return;
 80010d8:	bf00      	nop
    }
  }
}
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000008 	.word	0x20000008
 80010e4:	08007af8 	.word	0x08007af8
 80010e8:	08007b08 	.word	0x08007b08
 80010ec:	48000400 	.word	0x48000400
 80010f0:	08007b10 	.word	0x08007b10
 80010f4:	08007b18 	.word	0x08007b18
 80010f8:	08007b20 	.word	0x08007b20
 80010fc:	08007b28 	.word	0x08007b28
 8001100:	08007b30 	.word	0x08007b30
 8001104:	08007b40 	.word	0x08007b40
 8001108:	08007b44 	.word	0x08007b44

0800110c <monitoreo_analogico>:

void monitoreo_analogico(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	; 0x50
 8001110:	af00      	add	r7, sp, #0
  char bufferAI1[10], bufferAI2[10], bufferAI3[10], bufferA0[10];
  while (true)
  {
    ssd1306_Fill(Black);
 8001112:	2000      	movs	r0, #0
 8001114:	f001 f9ec 	bl	80024f0 <ssd1306_Fill>
    if(Leer_encoder(2) == 1){
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff fe51 	bl	8000dc0 <Leer_encoder>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	f040 8084 	bne.w	800122e <monitoreo_analogico+0x122>
      itoa(AI1_leer() - offset_AI_1, bufferAI1, 10);
 8001126:	f000 fc3f 	bl	80019a8 <AI1_leer>
 800112a:	4602      	mov	r2, r0
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <monitoreo_analogico+0x188>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001136:	220a      	movs	r2, #10
 8001138:	4618      	mov	r0, r3
 800113a:	f006 fbcd 	bl	80078d8 <itoa>


      	ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f006 fbc9 	bl	80078dc <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 800114a:	4b53      	ldr	r3, [pc, #332]	; (8001298 <monitoreo_analogico+0x18c>)
 800114c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800114e:	2301      	movs	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001152:	2303      	movs	r3, #3
 8001154:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	4850      	ldr	r0, [pc, #320]	; (800129c <monitoreo_analogico+0x190>)
 800115c:	f002 f9d0 	bl	8003500 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <monitoreo_analogico+0x5e>
	  {
	    Error_Handler();
 8001166:	f000 fe17 	bl	8001d98 <Error_Handler>
	  }
    /**/


      itoa(AI1_leer() - offset_AI_2, bufferAI2, 10);
 800116a:	f000 fc1d 	bl	80019a8 <AI1_leer>
 800116e:	4602      	mov	r2, r0
 8001170:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <monitoreo_analogico+0x194>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800117a:	220a      	movs	r2, #10
 800117c:	4618      	mov	r0, r3
 800117e:	f006 fbab 	bl	80078d8 <itoa>
      itoa(AI1_leer() - offset_AI_3, bufferAI3, 10);
 8001182:	f000 fc11 	bl	80019a8 <AI1_leer>
 8001186:	4602      	mov	r2, r0
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <monitoreo_analogico+0x198>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001192:	220a      	movs	r2, #10
 8001194:	4618      	mov	r0, r3
 8001196:	f006 fb9f 	bl	80078d8 <itoa>
      

      ssd1306_SetCursor(0, 0);
 800119a:	2100      	movs	r1, #0
 800119c:	2000      	movs	r0, #0
 800119e:	f001 faf5 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("E/S analogica 1/2", Font_7x10, White);
 80011a2:	4a41      	ldr	r2, [pc, #260]	; (80012a8 <monitoreo_analogico+0x19c>)
 80011a4:	2301      	movs	r3, #1
 80011a6:	ca06      	ldmia	r2, {r1, r2}
 80011a8:	4840      	ldr	r0, [pc, #256]	; (80012ac <monitoreo_analogico+0x1a0>)
 80011aa:	f001 fac9 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 18);
 80011ae:	2112      	movs	r1, #18
 80011b0:	2000      	movs	r0, #0
 80011b2:	f001 faeb 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("AI1", Font_7x10, White);
 80011b6:	4a3c      	ldr	r2, [pc, #240]	; (80012a8 <monitoreo_analogico+0x19c>)
 80011b8:	2301      	movs	r3, #1
 80011ba:	ca06      	ldmia	r2, {r1, r2}
 80011bc:	483c      	ldr	r0, [pc, #240]	; (80012b0 <monitoreo_analogico+0x1a4>)
 80011be:	f001 fabf 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(64, 18);
 80011c2:	2112      	movs	r1, #18
 80011c4:	2040      	movs	r0, #64	; 0x40
 80011c6:	f001 fae1 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(bufferAI1, Font_7x10, White);
 80011ca:	4a37      	ldr	r2, [pc, #220]	; (80012a8 <monitoreo_analogico+0x19c>)
 80011cc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80011d0:	2301      	movs	r3, #1
 80011d2:	ca06      	ldmia	r2, {r1, r2}
 80011d4:	f001 fab4 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 36);
 80011d8:	2124      	movs	r1, #36	; 0x24
 80011da:	2000      	movs	r0, #0
 80011dc:	f001 fad6 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("AI2", Font_7x10, White);
 80011e0:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <monitoreo_analogico+0x19c>)
 80011e2:	2301      	movs	r3, #1
 80011e4:	ca06      	ldmia	r2, {r1, r2}
 80011e6:	4833      	ldr	r0, [pc, #204]	; (80012b4 <monitoreo_analogico+0x1a8>)
 80011e8:	f001 faaa 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(64, 36);
 80011ec:	2124      	movs	r1, #36	; 0x24
 80011ee:	2040      	movs	r0, #64	; 0x40
 80011f0:	f001 facc 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(bufferAI2, Font_7x10, White);
 80011f4:	4a2c      	ldr	r2, [pc, #176]	; (80012a8 <monitoreo_analogico+0x19c>)
 80011f6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80011fa:	2301      	movs	r3, #1
 80011fc:	ca06      	ldmia	r2, {r1, r2}
 80011fe:	f001 fa9f 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 54);
 8001202:	2136      	movs	r1, #54	; 0x36
 8001204:	2000      	movs	r0, #0
 8001206:	f001 fac1 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("AI3", Font_7x10, White);
 800120a:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <monitoreo_analogico+0x19c>)
 800120c:	2301      	movs	r3, #1
 800120e:	ca06      	ldmia	r2, {r1, r2}
 8001210:	4829      	ldr	r0, [pc, #164]	; (80012b8 <monitoreo_analogico+0x1ac>)
 8001212:	f001 fa95 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(64, 54);
 8001216:	2136      	movs	r1, #54	; 0x36
 8001218:	2040      	movs	r0, #64	; 0x40
 800121a:	f001 fab7 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(bufferAI3, Font_7x10, White);
 800121e:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <monitoreo_analogico+0x19c>)
 8001220:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001224:	2301      	movs	r3, #1
 8001226:	ca06      	ldmia	r2, {r1, r2}
 8001228:	f001 fa8a 	bl	8002740 <ssd1306_WriteString>
 800122c:	e020      	b.n	8001270 <monitoreo_analogico+0x164>
    } else {
      itoa(0 - offset_A0, bufferA0, 10);
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <monitoreo_analogico+0x1b0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	425b      	negs	r3, r3
 8001234:	f107 0120 	add.w	r1, r7, #32
 8001238:	220a      	movs	r2, #10
 800123a:	4618      	mov	r0, r3
 800123c:	f006 fb4c 	bl	80078d8 <itoa>

      ssd1306_SetCursor(0, 0);
 8001240:	2100      	movs	r1, #0
 8001242:	2000      	movs	r0, #0
 8001244:	f001 faa2 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("E/S analogica 2/2", Font_7x10, White);
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <monitoreo_analogico+0x19c>)
 800124a:	2301      	movs	r3, #1
 800124c:	ca06      	ldmia	r2, {r1, r2}
 800124e:	481c      	ldr	r0, [pc, #112]	; (80012c0 <monitoreo_analogico+0x1b4>)
 8001250:	f001 fa76 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 18);
 8001254:	2112      	movs	r1, #18
 8001256:	2000      	movs	r0, #0
 8001258:	f001 fa98 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("A0", Font_7x10, White);
 800125c:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <monitoreo_analogico+0x19c>)
 800125e:	2301      	movs	r3, #1
 8001260:	ca06      	ldmia	r2, {r1, r2}
 8001262:	4818      	ldr	r0, [pc, #96]	; (80012c4 <monitoreo_analogico+0x1b8>)
 8001264:	f001 fa6c 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(64, 18);
 8001268:	2112      	movs	r1, #18
 800126a:	2040      	movs	r0, #64	; 0x40
 800126c:	f001 fa8e 	bl	800278c <ssd1306_SetCursor>
    }
    ssd1306_UpdateScreen();
 8001270:	f001 f962 	bl	8002538 <ssd1306_UpdateScreen>

    switch (Leer_botones())
 8001274:	f7ff fd44 	bl	8000d00 <Leer_botones>
 8001278:	4603      	mov	r3, r0
 800127a:	2b02      	cmp	r3, #2
 800127c:	dc02      	bgt.n	8001284 <monitoreo_analogico+0x178>
 800127e:	2b00      	cmp	r3, #0
 8001280:	dc03      	bgt.n	800128a <monitoreo_analogico+0x17e>
 8001282:	e001      	b.n	8001288 <monitoreo_analogico+0x17c>
 8001284:	2b03      	cmp	r3, #3
    {
    case ACEPTAR:
    case CANCELAR:
      return;
    case PERILLA:
      break;
 8001286:	bf00      	nop
    ssd1306_Fill(Black);
 8001288:	e743      	b.n	8001112 <monitoreo_analogico+0x6>
      return;
 800128a:	bf00      	nop
    }
  }
}
 800128c:	3750      	adds	r7, #80	; 0x50
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002c0 	.word	0x200002c0
 8001298:	08600004 	.word	0x08600004
 800129c:	2000003c 	.word	0x2000003c
 80012a0:	200002c4 	.word	0x200002c4
 80012a4:	200002c8 	.word	0x200002c8
 80012a8:	20000008 	.word	0x20000008
 80012ac:	08007b48 	.word	0x08007b48
 80012b0:	08007b5c 	.word	0x08007b5c
 80012b4:	08007b60 	.word	0x08007b60
 80012b8:	08007b64 	.word	0x08007b64
 80012bc:	20000000 	.word	0x20000000
 80012c0:	08007b68 	.word	0x08007b68
 80012c4:	08007b7c 	.word	0x08007b7c

080012c8 <menu_offsets>:

int menu_offsets(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
  int opcion; //Opcion seleccionada en el encoder
  char buffer[6];

  while (true)
  {
    opcion = Leer_encoder(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f7ff fd76 	bl	8000dc0 <Leer_encoder>
 80012d4:	60f8      	str	r0, [r7, #12]

    ssd1306_Fill(Black);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f001 f90a 	bl	80024f0 <ssd1306_Fill>

    if (opcion <= 3) //Mostrar primera pantalla
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	dc79      	bgt.n	80013d6 <menu_offsets+0x10e>
    {
      ssd1306_SetCursor(0, 0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2000      	movs	r0, #0
 80012e6:	f001 fa51 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("Ajustes 1/4", Font_7x10, White); //Cabecera de la primera página
 80012ea:	4ab0      	ldr	r2, [pc, #704]	; (80015ac <menu_offsets+0x2e4>)
 80012ec:	2301      	movs	r3, #1
 80012ee:	ca06      	ldmia	r2, {r1, r2}
 80012f0:	48af      	ldr	r0, [pc, #700]	; (80015b0 <menu_offsets+0x2e8>)
 80012f2:	f001 fa25 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 18);
 80012f6:	2112      	movs	r1, #18
 80012f8:	2000      	movs	r0, #0
 80012fa:	f001 fa47 	bl	800278c <ssd1306_SetCursor>
      /*Mostrar opciones*/
      if (opcion == 1)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d106      	bne.n	8001312 <menu_offsets+0x4a>
      {
        ssd1306_WriteString("Offset AI 1", Font_7x10, Black);
 8001304:	4aa9      	ldr	r2, [pc, #676]	; (80015ac <menu_offsets+0x2e4>)
 8001306:	2300      	movs	r3, #0
 8001308:	ca06      	ldmia	r2, {r1, r2}
 800130a:	48aa      	ldr	r0, [pc, #680]	; (80015b4 <menu_offsets+0x2ec>)
 800130c:	f001 fa18 	bl	8002740 <ssd1306_WriteString>
 8001310:	e005      	b.n	800131e <menu_offsets+0x56>
      }
      else
      {
        ssd1306_WriteString("Offset AI 1", Font_7x10, White);
 8001312:	4aa6      	ldr	r2, [pc, #664]	; (80015ac <menu_offsets+0x2e4>)
 8001314:	2301      	movs	r3, #1
 8001316:	ca06      	ldmia	r2, {r1, r2}
 8001318:	48a6      	ldr	r0, [pc, #664]	; (80015b4 <menu_offsets+0x2ec>)
 800131a:	f001 fa11 	bl	8002740 <ssd1306_WriteString>
      }
      itoa(offset_AI_1, buffer, 10); //Iniciar conversion
 800131e:	4ba6      	ldr	r3, [pc, #664]	; (80015b8 <menu_offsets+0x2f0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1d39      	adds	r1, r7, #4
 8001324:	220a      	movs	r2, #10
 8001326:	4618      	mov	r0, r3
 8001328:	f006 fad6 	bl	80078d8 <itoa>
      ssd1306_SetCursor(90, 18);
 800132c:	2112      	movs	r1, #18
 800132e:	205a      	movs	r0, #90	; 0x5a
 8001330:	f001 fa2c 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White);
 8001334:	4a9d      	ldr	r2, [pc, #628]	; (80015ac <menu_offsets+0x2e4>)
 8001336:	1d38      	adds	r0, r7, #4
 8001338:	2301      	movs	r3, #1
 800133a:	ca06      	ldmia	r2, {r1, r2}
 800133c:	f001 fa00 	bl	8002740 <ssd1306_WriteString>

      ssd1306_SetCursor(0, 36);
 8001340:	2124      	movs	r1, #36	; 0x24
 8001342:	2000      	movs	r0, #0
 8001344:	f001 fa22 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 2)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d106      	bne.n	800135c <menu_offsets+0x94>
      {
        ssd1306_WriteString("Offset AI 2", Font_7x10, Black);
 800134e:	4a97      	ldr	r2, [pc, #604]	; (80015ac <menu_offsets+0x2e4>)
 8001350:	2300      	movs	r3, #0
 8001352:	ca06      	ldmia	r2, {r1, r2}
 8001354:	4899      	ldr	r0, [pc, #612]	; (80015bc <menu_offsets+0x2f4>)
 8001356:	f001 f9f3 	bl	8002740 <ssd1306_WriteString>
 800135a:	e005      	b.n	8001368 <menu_offsets+0xa0>
      }
      else
      {
        ssd1306_WriteString("Offset AI 2", Font_7x10, White);
 800135c:	4a93      	ldr	r2, [pc, #588]	; (80015ac <menu_offsets+0x2e4>)
 800135e:	2301      	movs	r3, #1
 8001360:	ca06      	ldmia	r2, {r1, r2}
 8001362:	4896      	ldr	r0, [pc, #600]	; (80015bc <menu_offsets+0x2f4>)
 8001364:	f001 f9ec 	bl	8002740 <ssd1306_WriteString>
      }
      itoa(offset_AI_2, buffer, 10); //Iniciar conversion
 8001368:	4b95      	ldr	r3, [pc, #596]	; (80015c0 <menu_offsets+0x2f8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1d39      	adds	r1, r7, #4
 800136e:	220a      	movs	r2, #10
 8001370:	4618      	mov	r0, r3
 8001372:	f006 fab1 	bl	80078d8 <itoa>
      ssd1306_SetCursor(90, 36);
 8001376:	2124      	movs	r1, #36	; 0x24
 8001378:	205a      	movs	r0, #90	; 0x5a
 800137a:	f001 fa07 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White);
 800137e:	4a8b      	ldr	r2, [pc, #556]	; (80015ac <menu_offsets+0x2e4>)
 8001380:	1d38      	adds	r0, r7, #4
 8001382:	2301      	movs	r3, #1
 8001384:	ca06      	ldmia	r2, {r1, r2}
 8001386:	f001 f9db 	bl	8002740 <ssd1306_WriteString>

      ssd1306_SetCursor(0, 54);
 800138a:	2136      	movs	r1, #54	; 0x36
 800138c:	2000      	movs	r0, #0
 800138e:	f001 f9fd 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 3)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d106      	bne.n	80013a6 <menu_offsets+0xde>
      {
        ssd1306_WriteString("Offset AI 3", Font_7x10, Black);
 8001398:	4a84      	ldr	r2, [pc, #528]	; (80015ac <menu_offsets+0x2e4>)
 800139a:	2300      	movs	r3, #0
 800139c:	ca06      	ldmia	r2, {r1, r2}
 800139e:	4889      	ldr	r0, [pc, #548]	; (80015c4 <menu_offsets+0x2fc>)
 80013a0:	f001 f9ce 	bl	8002740 <ssd1306_WriteString>
 80013a4:	e005      	b.n	80013b2 <menu_offsets+0xea>
      }
      else
      {
        ssd1306_WriteString("Offset AI 3", Font_7x10, White);
 80013a6:	4a81      	ldr	r2, [pc, #516]	; (80015ac <menu_offsets+0x2e4>)
 80013a8:	2301      	movs	r3, #1
 80013aa:	ca06      	ldmia	r2, {r1, r2}
 80013ac:	4885      	ldr	r0, [pc, #532]	; (80015c4 <menu_offsets+0x2fc>)
 80013ae:	f001 f9c7 	bl	8002740 <ssd1306_WriteString>
      }
      itoa(offset_AI_3, buffer, 10); //Iniciar conversion
 80013b2:	4b85      	ldr	r3, [pc, #532]	; (80015c8 <menu_offsets+0x300>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	1d39      	adds	r1, r7, #4
 80013b8:	220a      	movs	r2, #10
 80013ba:	4618      	mov	r0, r3
 80013bc:	f006 fa8c 	bl	80078d8 <itoa>
      ssd1306_SetCursor(90, 54);
 80013c0:	2136      	movs	r1, #54	; 0x36
 80013c2:	205a      	movs	r0, #90	; 0x5a
 80013c4:	f001 f9e2 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White);
 80013c8:	4a78      	ldr	r2, [pc, #480]	; (80015ac <menu_offsets+0x2e4>)
 80013ca:	1d38      	adds	r0, r7, #4
 80013cc:	2301      	movs	r3, #1
 80013ce:	ca06      	ldmia	r2, {r1, r2}
 80013d0:	f001 f9b6 	bl	8002740 <ssd1306_WriteString>
 80013d4:	e15b      	b.n	800168e <menu_offsets+0x3c6>
    }
    else if(opcion > 3 && opcion <= 6)//Mostrar segunda pantalla
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	dd7c      	ble.n	80014d6 <menu_offsets+0x20e>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b06      	cmp	r3, #6
 80013e0:	dc79      	bgt.n	80014d6 <menu_offsets+0x20e>
    {
      ssd1306_SetCursor(0, 0);
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f001 f9d1 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("Ajustes 2/4", Font_7x10, White); //Cabecera de la segunda página
 80013ea:	4a70      	ldr	r2, [pc, #448]	; (80015ac <menu_offsets+0x2e4>)
 80013ec:	2301      	movs	r3, #1
 80013ee:	ca06      	ldmia	r2, {r1, r2}
 80013f0:	4876      	ldr	r0, [pc, #472]	; (80015cc <menu_offsets+0x304>)
 80013f2:	f001 f9a5 	bl	8002740 <ssd1306_WriteString>
      
      ssd1306_SetCursor(0, 18);
 80013f6:	2112      	movs	r1, #18
 80013f8:	2000      	movs	r0, #0
 80013fa:	f001 f9c7 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 4)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b04      	cmp	r3, #4
 8001402:	d106      	bne.n	8001412 <menu_offsets+0x14a>
      {
        ssd1306_WriteString("Offset A0", Font_7x10, Black);
 8001404:	4a69      	ldr	r2, [pc, #420]	; (80015ac <menu_offsets+0x2e4>)
 8001406:	2300      	movs	r3, #0
 8001408:	ca06      	ldmia	r2, {r1, r2}
 800140a:	4871      	ldr	r0, [pc, #452]	; (80015d0 <menu_offsets+0x308>)
 800140c:	f001 f998 	bl	8002740 <ssd1306_WriteString>
 8001410:	e005      	b.n	800141e <menu_offsets+0x156>
      }
      else
      {
        ssd1306_WriteString("Offset A0", Font_7x10, White);
 8001412:	4a66      	ldr	r2, [pc, #408]	; (80015ac <menu_offsets+0x2e4>)
 8001414:	2301      	movs	r3, #1
 8001416:	ca06      	ldmia	r2, {r1, r2}
 8001418:	486d      	ldr	r0, [pc, #436]	; (80015d0 <menu_offsets+0x308>)
 800141a:	f001 f991 	bl	8002740 <ssd1306_WriteString>
      }

      itoa(offset_A0, buffer, 10);
 800141e:	4b6d      	ldr	r3, [pc, #436]	; (80015d4 <menu_offsets+0x30c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1d39      	adds	r1, r7, #4
 8001424:	220a      	movs	r2, #10
 8001426:	4618      	mov	r0, r3
 8001428:	f006 fa56 	bl	80078d8 <itoa>
      ssd1306_SetCursor(90, 18);
 800142c:	2112      	movs	r1, #18
 800142e:	205a      	movs	r0, #90	; 0x5a
 8001430:	f001 f9ac 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White);
 8001434:	4a5d      	ldr	r2, [pc, #372]	; (80015ac <menu_offsets+0x2e4>)
 8001436:	1d38      	adds	r0, r7, #4
 8001438:	2301      	movs	r3, #1
 800143a:	ca06      	ldmia	r2, {r1, r2}
 800143c:	f001 f980 	bl	8002740 <ssd1306_WriteString>

      ssd1306_SetCursor(0, 36);
 8001440:	2124      	movs	r1, #36	; 0x24
 8001442:	2000      	movs	r0, #0
 8001444:	f001 f9a2 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 5)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b05      	cmp	r3, #5
 800144c:	d106      	bne.n	800145c <menu_offsets+0x194>
      {
        ssd1306_WriteString("KP", Font_7x10, Black);
 800144e:	4a57      	ldr	r2, [pc, #348]	; (80015ac <menu_offsets+0x2e4>)
 8001450:	2300      	movs	r3, #0
 8001452:	ca06      	ldmia	r2, {r1, r2}
 8001454:	4860      	ldr	r0, [pc, #384]	; (80015d8 <menu_offsets+0x310>)
 8001456:	f001 f973 	bl	8002740 <ssd1306_WriteString>
 800145a:	e005      	b.n	8001468 <menu_offsets+0x1a0>
      }
      else
      {
        ssd1306_WriteString("KP", Font_7x10, White);
 800145c:	4a53      	ldr	r2, [pc, #332]	; (80015ac <menu_offsets+0x2e4>)
 800145e:	2301      	movs	r3, #1
 8001460:	ca06      	ldmia	r2, {r1, r2}
 8001462:	485d      	ldr	r0, [pc, #372]	; (80015d8 <menu_offsets+0x310>)
 8001464:	f001 f96c 	bl	8002740 <ssd1306_WriteString>
      }

      itoa(kp, buffer, 10);
 8001468:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <menu_offsets+0x314>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	1d39      	adds	r1, r7, #4
 800146e:	220a      	movs	r2, #10
 8001470:	4618      	mov	r0, r3
 8001472:	f006 fa31 	bl	80078d8 <itoa>
      ssd1306_SetCursor(90, 36);
 8001476:	2124      	movs	r1, #36	; 0x24
 8001478:	205a      	movs	r0, #90	; 0x5a
 800147a:	f001 f987 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White);
 800147e:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <menu_offsets+0x2e4>)
 8001480:	1d38      	adds	r0, r7, #4
 8001482:	2301      	movs	r3, #1
 8001484:	ca06      	ldmia	r2, {r1, r2}
 8001486:	f001 f95b 	bl	8002740 <ssd1306_WriteString>

      ssd1306_SetCursor(0, 54);
 800148a:	2136      	movs	r1, #54	; 0x36
 800148c:	2000      	movs	r0, #0
 800148e:	f001 f97d 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 6)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b06      	cmp	r3, #6
 8001496:	d106      	bne.n	80014a6 <menu_offsets+0x1de>
      {
        ssd1306_WriteString("KI", Font_7x10, Black);
 8001498:	4a44      	ldr	r2, [pc, #272]	; (80015ac <menu_offsets+0x2e4>)
 800149a:	2300      	movs	r3, #0
 800149c:	ca06      	ldmia	r2, {r1, r2}
 800149e:	4850      	ldr	r0, [pc, #320]	; (80015e0 <menu_offsets+0x318>)
 80014a0:	f001 f94e 	bl	8002740 <ssd1306_WriteString>
 80014a4:	e005      	b.n	80014b2 <menu_offsets+0x1ea>
      }
      else
      {
        ssd1306_WriteString("KI", Font_7x10, White);
 80014a6:	4a41      	ldr	r2, [pc, #260]	; (80015ac <menu_offsets+0x2e4>)
 80014a8:	2301      	movs	r3, #1
 80014aa:	ca06      	ldmia	r2, {r1, r2}
 80014ac:	484c      	ldr	r0, [pc, #304]	; (80015e0 <menu_offsets+0x318>)
 80014ae:	f001 f947 	bl	8002740 <ssd1306_WriteString>
      }

      itoa(ki, buffer, 10);
 80014b2:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <menu_offsets+0x31c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1d39      	adds	r1, r7, #4
 80014b8:	220a      	movs	r2, #10
 80014ba:	4618      	mov	r0, r3
 80014bc:	f006 fa0c 	bl	80078d8 <itoa>
      ssd1306_SetCursor(90, 54);
 80014c0:	2136      	movs	r1, #54	; 0x36
 80014c2:	205a      	movs	r0, #90	; 0x5a
 80014c4:	f001 f962 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White);
 80014c8:	4a38      	ldr	r2, [pc, #224]	; (80015ac <menu_offsets+0x2e4>)
 80014ca:	1d38      	adds	r0, r7, #4
 80014cc:	2301      	movs	r3, #1
 80014ce:	ca06      	ldmia	r2, {r1, r2}
 80014d0:	f001 f936 	bl	8002740 <ssd1306_WriteString>
 80014d4:	e0db      	b.n	800168e <menu_offsets+0x3c6>
    }
    else if(opcion > 6 && opcion <= 9)//Mostrar tercera pantalla.
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b06      	cmp	r3, #6
 80014da:	f340 80a9 	ble.w	8001630 <menu_offsets+0x368>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b09      	cmp	r3, #9
 80014e2:	f300 80a5 	bgt.w	8001630 <menu_offsets+0x368>
    {
      ssd1306_SetCursor(0, 0);
 80014e6:	2100      	movs	r1, #0
 80014e8:	2000      	movs	r0, #0
 80014ea:	f001 f94f 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("Ajustes 3/4", Font_7x10, White); //Cabecera de la segunda página
 80014ee:	4a2f      	ldr	r2, [pc, #188]	; (80015ac <menu_offsets+0x2e4>)
 80014f0:	2301      	movs	r3, #1
 80014f2:	ca06      	ldmia	r2, {r1, r2}
 80014f4:	483c      	ldr	r0, [pc, #240]	; (80015e8 <menu_offsets+0x320>)
 80014f6:	f001 f923 	bl	8002740 <ssd1306_WriteString>
      
      ssd1306_SetCursor(0, 18);
 80014fa:	2112      	movs	r1, #18
 80014fc:	2000      	movs	r0, #0
 80014fe:	f001 f945 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 7)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b07      	cmp	r3, #7
 8001506:	d106      	bne.n	8001516 <menu_offsets+0x24e>
      {
        ssd1306_WriteString("KD", Font_7x10, Black);
 8001508:	4a28      	ldr	r2, [pc, #160]	; (80015ac <menu_offsets+0x2e4>)
 800150a:	2300      	movs	r3, #0
 800150c:	ca06      	ldmia	r2, {r1, r2}
 800150e:	4837      	ldr	r0, [pc, #220]	; (80015ec <menu_offsets+0x324>)
 8001510:	f001 f916 	bl	8002740 <ssd1306_WriteString>
 8001514:	e005      	b.n	8001522 <menu_offsets+0x25a>
      }
      else
      {
        ssd1306_WriteString("KD", Font_7x10, White);
 8001516:	4a25      	ldr	r2, [pc, #148]	; (80015ac <menu_offsets+0x2e4>)
 8001518:	2301      	movs	r3, #1
 800151a:	ca06      	ldmia	r2, {r1, r2}
 800151c:	4833      	ldr	r0, [pc, #204]	; (80015ec <menu_offsets+0x324>)
 800151e:	f001 f90f 	bl	8002740 <ssd1306_WriteString>
      }

      itoa(kd, buffer, 10);
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <menu_offsets+0x328>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1d39      	adds	r1, r7, #4
 8001528:	220a      	movs	r2, #10
 800152a:	4618      	mov	r0, r3
 800152c:	f006 f9d4 	bl	80078d8 <itoa>
      ssd1306_SetCursor(90, 18);
 8001530:	2112      	movs	r1, #18
 8001532:	205a      	movs	r0, #90	; 0x5a
 8001534:	f001 f92a 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White);
 8001538:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <menu_offsets+0x2e4>)
 800153a:	1d38      	adds	r0, r7, #4
 800153c:	2301      	movs	r3, #1
 800153e:	ca06      	ldmia	r2, {r1, r2}
 8001540:	f001 f8fe 	bl	8002740 <ssd1306_WriteString>

      ssd1306_SetCursor(0, 36);
 8001544:	2124      	movs	r1, #36	; 0x24
 8001546:	2000      	movs	r0, #0
 8001548:	f001 f920 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 8) //Tiempo de Lazo
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b08      	cmp	r3, #8
 8001550:	d106      	bne.n	8001560 <menu_offsets+0x298>
      {
        ssd1306_WriteString("TL", Font_7x10, Black);
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <menu_offsets+0x2e4>)
 8001554:	2300      	movs	r3, #0
 8001556:	ca06      	ldmia	r2, {r1, r2}
 8001558:	4826      	ldr	r0, [pc, #152]	; (80015f4 <menu_offsets+0x32c>)
 800155a:	f001 f8f1 	bl	8002740 <ssd1306_WriteString>
 800155e:	e005      	b.n	800156c <menu_offsets+0x2a4>
      }
      else
      {
        ssd1306_WriteString("TL", Font_7x10, White);
 8001560:	4a12      	ldr	r2, [pc, #72]	; (80015ac <menu_offsets+0x2e4>)
 8001562:	2301      	movs	r3, #1
 8001564:	ca06      	ldmia	r2, {r1, r2}
 8001566:	4823      	ldr	r0, [pc, #140]	; (80015f4 <menu_offsets+0x32c>)
 8001568:	f001 f8ea 	bl	8002740 <ssd1306_WriteString>
      }

      itoa(tiempo_lazo, buffer, 10);
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <menu_offsets+0x330>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1d39      	adds	r1, r7, #4
 8001572:	220a      	movs	r2, #10
 8001574:	4618      	mov	r0, r3
 8001576:	f006 f9af 	bl	80078d8 <itoa>
      ssd1306_SetCursor(90, 36);
 800157a:	2124      	movs	r1, #36	; 0x24
 800157c:	205a      	movs	r0, #90	; 0x5a
 800157e:	f001 f905 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White);
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <menu_offsets+0x2e4>)
 8001584:	1d38      	adds	r0, r7, #4
 8001586:	2301      	movs	r3, #1
 8001588:	ca06      	ldmia	r2, {r1, r2}
 800158a:	f001 f8d9 	bl	8002740 <ssd1306_WriteString>

      ssd1306_SetCursor(0, 54);
 800158e:	2136      	movs	r1, #54	; 0x36
 8001590:	2000      	movs	r0, #0
 8001592:	f001 f8fb 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 9)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d131      	bne.n	8001600 <menu_offsets+0x338>
      {
        ssd1306_WriteString("TD", Font_7x10, Black);
 800159c:	4a03      	ldr	r2, [pc, #12]	; (80015ac <menu_offsets+0x2e4>)
 800159e:	2300      	movs	r3, #0
 80015a0:	ca06      	ldmia	r2, {r1, r2}
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <menu_offsets+0x334>)
 80015a4:	f001 f8cc 	bl	8002740 <ssd1306_WriteString>
 80015a8:	e030      	b.n	800160c <menu_offsets+0x344>
 80015aa:	bf00      	nop
 80015ac:	20000008 	.word	0x20000008
 80015b0:	08007b80 	.word	0x08007b80
 80015b4:	08007a10 	.word	0x08007a10
 80015b8:	200002c0 	.word	0x200002c0
 80015bc:	08007a1c 	.word	0x08007a1c
 80015c0:	200002c4 	.word	0x200002c4
 80015c4:	08007a28 	.word	0x08007a28
 80015c8:	200002c8 	.word	0x200002c8
 80015cc:	08007b8c 	.word	0x08007b8c
 80015d0:	08007a34 	.word	0x08007a34
 80015d4:	20000000 	.word	0x20000000
 80015d8:	08007a40 	.word	0x08007a40
 80015dc:	200002cc 	.word	0x200002cc
 80015e0:	08007a44 	.word	0x08007a44
 80015e4:	200002d0 	.word	0x200002d0
 80015e8:	08007b98 	.word	0x08007b98
 80015ec:	08007a48 	.word	0x08007a48
 80015f0:	200002d4 	.word	0x200002d4
 80015f4:	08007a4c 	.word	0x08007a4c
 80015f8:	200002d8 	.word	0x200002d8
 80015fc:	08007ba4 	.word	0x08007ba4
      }
      else
      {
        ssd1306_WriteString("TD", Font_7x10, White);
 8001600:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <menu_offsets+0x3f8>)
 8001602:	2301      	movs	r3, #1
 8001604:	ca06      	ldmia	r2, {r1, r2}
 8001606:	482f      	ldr	r0, [pc, #188]	; (80016c4 <menu_offsets+0x3fc>)
 8001608:	f001 f89a 	bl	8002740 <ssd1306_WriteString>
      }

      itoa(td, buffer, 10);
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <menu_offsets+0x400>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	1d39      	adds	r1, r7, #4
 8001612:	220a      	movs	r2, #10
 8001614:	4618      	mov	r0, r3
 8001616:	f006 f95f 	bl	80078d8 <itoa>
      ssd1306_SetCursor(90, 54);
 800161a:	2136      	movs	r1, #54	; 0x36
 800161c:	205a      	movs	r0, #90	; 0x5a
 800161e:	f001 f8b5 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White);
 8001622:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <menu_offsets+0x3f8>)
 8001624:	1d38      	adds	r0, r7, #4
 8001626:	2301      	movs	r3, #1
 8001628:	ca06      	ldmia	r2, {r1, r2}
 800162a:	f001 f889 	bl	8002740 <ssd1306_WriteString>
 800162e:	e02e      	b.n	800168e <menu_offsets+0x3c6>
    } else {
      ssd1306_SetCursor(0, 0);
 8001630:	2100      	movs	r1, #0
 8001632:	2000      	movs	r0, #0
 8001634:	f001 f8aa 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("Ajustes 4/4", Font_7x10, White); //Cabecera de la segunda página
 8001638:	4a21      	ldr	r2, [pc, #132]	; (80016c0 <menu_offsets+0x3f8>)
 800163a:	2301      	movs	r3, #1
 800163c:	ca06      	ldmia	r2, {r1, r2}
 800163e:	4823      	ldr	r0, [pc, #140]	; (80016cc <menu_offsets+0x404>)
 8001640:	f001 f87e 	bl	8002740 <ssd1306_WriteString>
      
      ssd1306_SetCursor(0, 18);
 8001644:	2112      	movs	r1, #18
 8001646:	2000      	movs	r0, #0
 8001648:	f001 f8a0 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 10)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b0a      	cmp	r3, #10
 8001650:	d106      	bne.n	8001660 <menu_offsets+0x398>
      {
        ssd1306_WriteString("TI", Font_7x10, Black);
 8001652:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <menu_offsets+0x3f8>)
 8001654:	2300      	movs	r3, #0
 8001656:	ca06      	ldmia	r2, {r1, r2}
 8001658:	481d      	ldr	r0, [pc, #116]	; (80016d0 <menu_offsets+0x408>)
 800165a:	f001 f871 	bl	8002740 <ssd1306_WriteString>
 800165e:	e005      	b.n	800166c <menu_offsets+0x3a4>
      }
      else
      {
        ssd1306_WriteString("TI", Font_7x10, White);
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <menu_offsets+0x3f8>)
 8001662:	2301      	movs	r3, #1
 8001664:	ca06      	ldmia	r2, {r1, r2}
 8001666:	481a      	ldr	r0, [pc, #104]	; (80016d0 <menu_offsets+0x408>)
 8001668:	f001 f86a 	bl	8002740 <ssd1306_WriteString>
      }
      itoa(ti, buffer, 10);
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <menu_offsets+0x40c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	1d39      	adds	r1, r7, #4
 8001672:	220a      	movs	r2, #10
 8001674:	4618      	mov	r0, r3
 8001676:	f006 f92f 	bl	80078d8 <itoa>
      ssd1306_SetCursor(90, 18);
 800167a:	2112      	movs	r1, #18
 800167c:	205a      	movs	r0, #90	; 0x5a
 800167e:	f001 f885 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString(buffer, Font_7x10, White);
 8001682:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <menu_offsets+0x3f8>)
 8001684:	1d38      	adds	r0, r7, #4
 8001686:	2301      	movs	r3, #1
 8001688:	ca06      	ldmia	r2, {r1, r2}
 800168a:	f001 f859 	bl	8002740 <ssd1306_WriteString>

    }

    ssd1306_UpdateScreen();
 800168e:	f000 ff53 	bl	8002538 <ssd1306_UpdateScreen>

    switch (Leer_botones()) //Comprobar se se ha presionado un botón
 8001692:	f7ff fb35 	bl	8000d00 <Leer_botones>
 8001696:	4603      	mov	r3, r0
 8001698:	2b03      	cmp	r3, #3
 800169a:	d007      	beq.n	80016ac <menu_offsets+0x3e4>
 800169c:	2b03      	cmp	r3, #3
 800169e:	f73f ae16 	bgt.w	80012ce <menu_offsets+0x6>
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d002      	beq.n	80016ac <menu_offsets+0x3e4>
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d002      	beq.n	80016b0 <menu_offsets+0x3e8>
 80016aa:	e003      	b.n	80016b4 <menu_offsets+0x3ec>
    {
    case ACEPTAR:
    case PERILLA:
      return opcion; //Devolver la opción seleccionada 
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	e002      	b.n	80016b6 <menu_offsets+0x3ee>
      break;
    case CANCELAR:
      return NULO; //Devolver cancelado
 80016b0:	2300      	movs	r3, #0
 80016b2:	e000      	b.n	80016b6 <menu_offsets+0x3ee>
    opcion = Leer_encoder(10);
 80016b4:	e60b      	b.n	80012ce <menu_offsets+0x6>
    }
  }
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008
 80016c4:	08007ba4 	.word	0x08007ba4
 80016c8:	200002dc 	.word	0x200002dc
 80016cc:	08007ba8 	.word	0x08007ba8
 80016d0:	08007bb4 	.word	0x08007bb4
 80016d4:	200002e0 	.word	0x200002e0

080016d8 <Establecer_valor>:


/*Recive como entrada una cadena da caracteres, y la dirección a la variable a modificar, 
recibe como último argumento el valor máximo, retorna el valor seleccionado*/
int Establecer_valor(char *texto, int *variable, int valor_maximo)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b094      	sub	sp, #80	; 0x50
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  int cifra[4];                       // Valores enteros
  char digitos[5];                    // Caracteres (más espacio para el terminador nulo '\0')
  char buffer_multiplicador[2] = {0}; // Solo se necesita 1 byte para un dígito
 80016e4:	2300      	movs	r3, #0
 80016e6:	83bb      	strh	r3, [r7, #28]
  char digitos_maximos[5];
  int boton, multiplicador = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  int valor_actual = *variable;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	64bb      	str	r3, [r7, #72]	; 0x48
  Encoder_reiniciar();
 80016f2:	f000 fb43 	bl	8001d7c <Encoder_reiniciar>
  while (true)
  {
    int numero = valor_actual;
 80016f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f8:	647b      	str	r3, [r7, #68]	; 0x44

    //Llenar el array con números decimales
    for (int i = 3; i >= 0; i--)
 80016fa:	2303      	movs	r3, #3
 80016fc:	643b      	str	r3, [r7, #64]	; 0x40
 80016fe:	e01c      	b.n	800173a <Establecer_valor+0x62>
    {
      cifra[i] = numero % 10;
 8001700:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001702:	4ba2      	ldr	r3, [pc, #648]	; (800198c <Establecer_valor+0x2b4>)
 8001704:	fb83 2301 	smull	r2, r3, r3, r1
 8001708:	109a      	asrs	r2, r3, #2
 800170a:	17cb      	asrs	r3, r1, #31
 800170c:	1ad2      	subs	r2, r2, r3
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	1aca      	subs	r2, r1, r3
 8001718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	3350      	adds	r3, #80	; 0x50
 800171e:	443b      	add	r3, r7
 8001720:	f843 2c28 	str.w	r2, [r3, #-40]
      numero /= 10;
 8001724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001726:	4a99      	ldr	r2, [pc, #612]	; (800198c <Establecer_valor+0x2b4>)
 8001728:	fb82 1203 	smull	r1, r2, r2, r3
 800172c:	1092      	asrs	r2, r2, #2
 800172e:	17db      	asrs	r3, r3, #31
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	647b      	str	r3, [r7, #68]	; 0x44
    for (int i = 3; i >= 0; i--)
 8001734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001736:	3b01      	subs	r3, #1
 8001738:	643b      	str	r3, [r7, #64]	; 0x40
 800173a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800173c:	2b00      	cmp	r3, #0
 800173e:	dadf      	bge.n	8001700 <Establecer_valor+0x28>
    }

    // Convertir los valores enteros en caracteres
    for (int i = 0; i < 4; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001744:	e011      	b.n	800176a <Establecer_valor+0x92>
    {
      digitos[i] = '0' + cifra[i];
 8001746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	3350      	adds	r3, #80	; 0x50
 800174c:	443b      	add	r3, r7
 800174e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	3330      	adds	r3, #48	; 0x30
 8001756:	b2d9      	uxtb	r1, r3
 8001758:	f107 0220 	add.w	r2, r7, #32
 800175c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800175e:	4413      	add	r3, r2
 8001760:	460a      	mov	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
 8001764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001766:	3301      	adds	r3, #1
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800176a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800176c:	2b03      	cmp	r3, #3
 800176e:	ddea      	ble.n	8001746 <Establecer_valor+0x6e>
    }
    digitos[4] = '\0'; // Agregar terminador nulo al final del arreglo
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    cifra[multiplicador] = Leer_encoder(10) - 1;
 8001776:	200a      	movs	r0, #10
 8001778:	f7ff fb22 	bl	8000dc0 <Leer_encoder>
 800177c:	4603      	mov	r3, r0
 800177e:	1e5a      	subs	r2, r3, #1
 8001780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	3350      	adds	r3, #80	; 0x50
 8001786:	443b      	add	r3, r7
 8001788:	f843 2c28 	str.w	r2, [r3, #-40]

    // Convertir los dígitos actualizados a un número entero
    numero = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	647b      	str	r3, [r7, #68]	; 0x44
    for (int i = 0; i < 4; i++)
 8001790:	2300      	movs	r3, #0
 8001792:	63bb      	str	r3, [r7, #56]	; 0x38
 8001794:	e010      	b.n	80017b8 <Establecer_valor+0xe0>
    {
      numero = numero * 10 + cifra[i];
 8001796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	461a      	mov	r2, r3
 80017a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	3350      	adds	r3, #80	; 0x50
 80017a8:	443b      	add	r3, r7
 80017aa:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80017ae:	4413      	add	r3, r2
 80017b0:	647b      	str	r3, [r7, #68]	; 0x44
    for (int i = 0; i < 4; i++)
 80017b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b4:	3301      	adds	r3, #1
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	ddeb      	ble.n	8001796 <Establecer_valor+0xbe>
    }

    valor_actual = numero;
 80017be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c0:	64bb      	str	r3, [r7, #72]	; 0x48

    //Mostrar la cabecera en pantalla
    ssd1306_Fill(Black);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 fe94 	bl	80024f0 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80017c8:	2100      	movs	r1, #0
 80017ca:	2000      	movs	r0, #0
 80017cc:	f000 ffde 	bl	800278c <ssd1306_SetCursor>
    ssd1306_WriteString(texto, Font_7x10, White);
 80017d0:	4a6f      	ldr	r2, [pc, #444]	; (8001990 <Establecer_valor+0x2b8>)
 80017d2:	2301      	movs	r3, #1
 80017d4:	ca06      	ldmia	r2, {r1, r2}
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 ffb2 	bl	8002740 <ssd1306_WriteString>

    /*Mostrar cada dígito*/

    ssd1306_SetCursor(0, 18);
 80017dc:	2112      	movs	r1, #18
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 ffd4 	bl	800278c <ssd1306_SetCursor>
    if (multiplicador == 0)
 80017e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <Establecer_valor+0x122>
    {
      ssd1306_WriteChar(digitos[0], Font_16x24, Black);
 80017ea:	f897 0020 	ldrb.w	r0, [r7, #32]
 80017ee:	4a69      	ldr	r2, [pc, #420]	; (8001994 <Establecer_valor+0x2bc>)
 80017f0:	2300      	movs	r3, #0
 80017f2:	ca06      	ldmia	r2, {r1, r2}
 80017f4:	f000 ff1c 	bl	8002630 <ssd1306_WriteChar>
 80017f8:	e006      	b.n	8001808 <Establecer_valor+0x130>
    }
    else
    {
      ssd1306_WriteChar(digitos[0], Font_16x24, White);
 80017fa:	f897 0020 	ldrb.w	r0, [r7, #32]
 80017fe:	4a65      	ldr	r2, [pc, #404]	; (8001994 <Establecer_valor+0x2bc>)
 8001800:	2301      	movs	r3, #1
 8001802:	ca06      	ldmia	r2, {r1, r2}
 8001804:	f000 ff14 	bl	8002630 <ssd1306_WriteChar>
    }

    ssd1306_SetCursor(18, 18);
 8001808:	2112      	movs	r1, #18
 800180a:	2012      	movs	r0, #18
 800180c:	f000 ffbe 	bl	800278c <ssd1306_SetCursor>

    if (multiplicador == 1)
 8001810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <Establecer_valor+0x14e>
    {
      ssd1306_WriteChar(digitos[1], Font_16x24, Black);
 8001816:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
 800181a:	4a5e      	ldr	r2, [pc, #376]	; (8001994 <Establecer_valor+0x2bc>)
 800181c:	2300      	movs	r3, #0
 800181e:	ca06      	ldmia	r2, {r1, r2}
 8001820:	f000 ff06 	bl	8002630 <ssd1306_WriteChar>
 8001824:	e006      	b.n	8001834 <Establecer_valor+0x15c>
    }
    else
    {
      ssd1306_WriteChar(digitos[1], Font_16x24, White);
 8001826:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
 800182a:	4a5a      	ldr	r2, [pc, #360]	; (8001994 <Establecer_valor+0x2bc>)
 800182c:	2301      	movs	r3, #1
 800182e:	ca06      	ldmia	r2, {r1, r2}
 8001830:	f000 fefe 	bl	8002630 <ssd1306_WriteChar>
    }

    ssd1306_SetCursor(36, 18);
 8001834:	2112      	movs	r1, #18
 8001836:	2024      	movs	r0, #36	; 0x24
 8001838:	f000 ffa8 	bl	800278c <ssd1306_SetCursor>
    if (multiplicador == 2)
 800183c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <Establecer_valor+0x17a>
    {
      ssd1306_WriteChar(digitos[2], Font_16x24, Black);
 8001842:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8001846:	4a53      	ldr	r2, [pc, #332]	; (8001994 <Establecer_valor+0x2bc>)
 8001848:	2300      	movs	r3, #0
 800184a:	ca06      	ldmia	r2, {r1, r2}
 800184c:	f000 fef0 	bl	8002630 <ssd1306_WriteChar>
 8001850:	e006      	b.n	8001860 <Establecer_valor+0x188>
    }
    else
    {
      ssd1306_WriteChar(digitos[2], Font_16x24, White);
 8001852:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8001856:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <Establecer_valor+0x2bc>)
 8001858:	2301      	movs	r3, #1
 800185a:	ca06      	ldmia	r2, {r1, r2}
 800185c:	f000 fee8 	bl	8002630 <ssd1306_WriteChar>
    }

    if (multiplicador == 3)
 8001860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <Establecer_valor+0x19e>
    {
      ssd1306_WriteChar(digitos[3], Font_16x24, Black);
 8001866:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 800186a:	4a4a      	ldr	r2, [pc, #296]	; (8001994 <Establecer_valor+0x2bc>)
 800186c:	2300      	movs	r3, #0
 800186e:	ca06      	ldmia	r2, {r1, r2}
 8001870:	f000 fede 	bl	8002630 <ssd1306_WriteChar>
 8001874:	e006      	b.n	8001884 <Establecer_valor+0x1ac>
    }
    else
    {
      ssd1306_WriteChar(digitos[3], Font_16x24, White);
 8001876:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 800187a:	4a46      	ldr	r2, [pc, #280]	; (8001994 <Establecer_valor+0x2bc>)
 800187c:	2301      	movs	r3, #1
 800187e:	ca06      	ldmia	r2, {r1, r2}
 8001880:	f000 fed6 	bl	8002630 <ssd1306_WriteChar>
    itoa(multiplicador + 1, buffer_multiplicador, 10);
    ssd1306_WriteString(buffer_multiplicador, Font_7x10, White);
        ssd1306_Fill(Black);
        ssd1306_SetCursor(0, 18);
    */
    ssd1306_UpdateScreen();
 8001884:	f000 fe58 	bl	8002538 <ssd1306_UpdateScreen>

    //Ver qué botón se ha presionado
    switch (Leer_botones()) 
 8001888:	f7ff fa3a 	bl	8000d00 <Leer_botones>
 800188c:	4603      	mov	r3, r0
 800188e:	2b03      	cmp	r3, #3
 8001890:	d007      	beq.n	80018a2 <Establecer_valor+0x1ca>
 8001892:	2b03      	cmp	r3, #3
 8001894:	f73f af2f 	bgt.w	80016f6 <Establecer_valor+0x1e>
 8001898:	2b01      	cmp	r3, #1
 800189a:	d00d      	beq.n	80018b8 <Establecer_valor+0x1e0>
 800189c:	2b02      	cmp	r3, #2
 800189e:	d059      	beq.n	8001954 <Establecer_valor+0x27c>
 80018a0:	e06e      	b.n	8001980 <Establecer_valor+0x2a8>
    {
    case PERILLA: //Cambiar el dígito a editar 
      Encoder_reiniciar();
 80018a2:	f000 fa6b 	bl	8001d7c <Encoder_reiniciar>
      multiplicador = (multiplicador >= 3) ? 0 : (multiplicador + 1);
 80018a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	dc02      	bgt.n	80018b2 <Establecer_valor+0x1da>
 80018ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ae:	3301      	adds	r3, #1
 80018b0:	e000      	b.n	80018b4 <Establecer_valor+0x1dc>
 80018b2:	2300      	movs	r3, #0
 80018b4:	64fb      	str	r3, [r7, #76]	; 0x4c

      break;
 80018b6:	e063      	b.n	8001980 <Establecer_valor+0x2a8>
    case ACEPTAR:
      if (valor_actual <= valor_maximo) //Devolver el valor sí establecido si es correcto
 80018b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dc17      	bgt.n	80018f0 <Establecer_valor+0x218>
      {
        ssd1306_Fill(Black);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 fe15 	bl	80024f0 <ssd1306_Fill>
        ssd1306_SetCursor(0, 18);
 80018c6:	2112      	movs	r1, #18
 80018c8:	2000      	movs	r0, #0
 80018ca:	f000 ff5f 	bl	800278c <ssd1306_SetCursor>
        ssd1306_WriteString("Guardado", Font_7x10, White);
 80018ce:	4a30      	ldr	r2, [pc, #192]	; (8001990 <Establecer_valor+0x2b8>)
 80018d0:	2301      	movs	r3, #1
 80018d2:	ca06      	ldmia	r2, {r1, r2}
 80018d4:	4830      	ldr	r0, [pc, #192]	; (8001998 <Establecer_valor+0x2c0>)
 80018d6:	f000 ff33 	bl	8002740 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80018da:	f000 fe2d 	bl	8002538 <ssd1306_UpdateScreen>
        HAL_Delay(1000);
 80018de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e2:	f001 f80d 	bl	8002900 <HAL_Delay>
        *variable = valor_actual; //Modificar el valor de la variable introducida
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018ea:	601a      	str	r2, [r3, #0]
        return valor_actual;
 80018ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ee:	e048      	b.n	8001982 <Establecer_valor+0x2aa>
      }
      else //Volver a pedir el valor si es incorrecto
      {
        itoa(valor_maximo, digitos_maximos, 10);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	220a      	movs	r2, #10
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f005 ffed 	bl	80078d8 <itoa>
        digitos_maximos[4] = '\0';
 80018fe:	2300      	movs	r3, #0
 8001900:	763b      	strb	r3, [r7, #24]
        ssd1306_Fill(Black);
 8001902:	2000      	movs	r0, #0
 8001904:	f000 fdf4 	bl	80024f0 <ssd1306_Fill>
        ssd1306_SetCursor(0, 18);
 8001908:	2112      	movs	r1, #18
 800190a:	2000      	movs	r0, #0
 800190c:	f000 ff3e 	bl	800278c <ssd1306_SetCursor>
        ssd1306_WriteString("Error, el valor", Font_7x10, White);
 8001910:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <Establecer_valor+0x2b8>)
 8001912:	2301      	movs	r3, #1
 8001914:	ca06      	ldmia	r2, {r1, r2}
 8001916:	4821      	ldr	r0, [pc, #132]	; (800199c <Establecer_valor+0x2c4>)
 8001918:	f000 ff12 	bl	8002740 <ssd1306_WriteString>
        ssd1306_SetCursor(0, 36);
 800191c:	2124      	movs	r1, #36	; 0x24
 800191e:	2000      	movs	r0, #0
 8001920:	f000 ff34 	bl	800278c <ssd1306_SetCursor>
        ssd1306_WriteString("maximo es", Font_7x10, White);
 8001924:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <Establecer_valor+0x2b8>)
 8001926:	2301      	movs	r3, #1
 8001928:	ca06      	ldmia	r2, {r1, r2}
 800192a:	481d      	ldr	r0, [pc, #116]	; (80019a0 <Establecer_valor+0x2c8>)
 800192c:	f000 ff08 	bl	8002740 <ssd1306_WriteString>
        ssd1306_SetCursor(70, 36);
 8001930:	2124      	movs	r1, #36	; 0x24
 8001932:	2046      	movs	r0, #70	; 0x46
 8001934:	f000 ff2a 	bl	800278c <ssd1306_SetCursor>
        ssd1306_WriteString(digitos_maximos, Font_7x10, White);
 8001938:	4a15      	ldr	r2, [pc, #84]	; (8001990 <Establecer_valor+0x2b8>)
 800193a:	f107 0014 	add.w	r0, r7, #20
 800193e:	2301      	movs	r3, #1
 8001940:	ca06      	ldmia	r2, {r1, r2}
 8001942:	f000 fefd 	bl	8002740 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001946:	f000 fdf7 	bl	8002538 <ssd1306_UpdateScreen>
        HAL_Delay(1000);
 800194a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800194e:	f000 ffd7 	bl	8002900 <HAL_Delay>
        break;
 8001952:	e015      	b.n	8001980 <Establecer_valor+0x2a8>
      }
    case CANCELAR: //Cancelar y devolver el valor anterior
      ssd1306_Fill(Black);
 8001954:	2000      	movs	r0, #0
 8001956:	f000 fdcb 	bl	80024f0 <ssd1306_Fill>
      ssd1306_SetCursor(0, 18);
 800195a:	2112      	movs	r1, #18
 800195c:	2000      	movs	r0, #0
 800195e:	f000 ff15 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("Cancelado", Font_7x10, White);
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <Establecer_valor+0x2b8>)
 8001964:	2301      	movs	r3, #1
 8001966:	ca06      	ldmia	r2, {r1, r2}
 8001968:	480e      	ldr	r0, [pc, #56]	; (80019a4 <Establecer_valor+0x2cc>)
 800196a:	f000 fee9 	bl	8002740 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 800196e:	f000 fde3 	bl	8002538 <ssd1306_UpdateScreen>
      HAL_Delay(1000);
 8001972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001976:	f000 ffc3 	bl	8002900 <HAL_Delay>
      return *variable;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	e000      	b.n	8001982 <Establecer_valor+0x2aa>
  {
 8001980:	e6b9      	b.n	80016f6 <Establecer_valor+0x1e>
    }
  }
}
 8001982:	4618      	mov	r0, r3
 8001984:	3750      	adds	r7, #80	; 0x50
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	66666667 	.word	0x66666667
 8001990:	20000008 	.word	0x20000008
 8001994:	20000010 	.word	0x20000010
 8001998:	08007bc0 	.word	0x08007bc0
 800199c:	08007bcc 	.word	0x08007bcc
 80019a0:	08007bdc 	.word	0x08007bdc
 80019a4:	08007be8 	.word	0x08007be8

080019a8 <AI1_leer>:
  }
}


int AI1_leer(void) //Leer el ADC sospechoso
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  int adcValue = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]

  // Start the ADC conversion
  HAL_ADC_Start(&hadc1);
 80019b2:	480b      	ldr	r0, [pc, #44]	; (80019e0 <AI1_leer+0x38>)
 80019b4:	f001 fbce 	bl	8003154 <HAL_ADC_Start>

  // Wait for the conversion to complete
  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80019b8:	2164      	movs	r1, #100	; 0x64
 80019ba:	4809      	ldr	r0, [pc, #36]	; (80019e0 <AI1_leer+0x38>)
 80019bc:	f001 fcba 	bl	8003334 <HAL_ADC_PollForConversion>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <AI1_leer+0x28>
  {
    // Read the ADC value
    adcValue = HAL_ADC_GetValue(&hadc1);
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <AI1_leer+0x38>)
 80019c8:	f001 fd8c 	bl	80034e4 <HAL_ADC_GetValue>
 80019cc:	4603      	mov	r3, r0
 80019ce:	607b      	str	r3, [r7, #4]
  }

  // Stop the ADC conversion
  HAL_ADC_Stop(&hadc1);
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <AI1_leer+0x38>)
 80019d2:	f001 fc7b 	bl	80032cc <HAL_ADC_Stop>

  return adcValue;
 80019d6:	687b      	ldr	r3, [r7, #4]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000003c 	.word	0x2000003c

080019e4 <menu_instalador_1>:

int menu_instalador_1(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
  int opcion;
  while (true)
  {
    opcion = Leer_encoder(8);
 80019ea:	2008      	movs	r0, #8
 80019ec:	f7ff f9e8 	bl	8000dc0 <Leer_encoder>
 80019f0:	6078      	str	r0, [r7, #4]

    ssd1306_Fill(Black);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 fd7c 	bl	80024f0 <ssd1306_Fill>

    if(opcion <= 3){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	dc46      	bgt.n	8001a8c <menu_instalador_1+0xa8>
      ssd1306_SetCursor(0, 0);
 80019fe:	2100      	movs	r1, #0
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 fec3 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("instalador 1/3", Font_7x10, White); //Cabecera de la primera página
 8001a06:	4a70      	ldr	r2, [pc, #448]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001a08:	2301      	movs	r3, #1
 8001a0a:	ca06      	ldmia	r2, {r1, r2}
 8001a0c:	486f      	ldr	r0, [pc, #444]	; (8001bcc <menu_instalador_1+0x1e8>)
 8001a0e:	f000 fe97 	bl	8002740 <ssd1306_WriteString>
      
      ssd1306_SetCursor(0, 18);
 8001a12:	2112      	movs	r1, #18
 8001a14:	2000      	movs	r0, #0
 8001a16:	f000 feb9 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <menu_instalador_1+0x4a>
      {
        ssd1306_WriteString("Salida unipolar", Font_7x10, Black);
 8001a20:	4a69      	ldr	r2, [pc, #420]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001a22:	2300      	movs	r3, #0
 8001a24:	ca06      	ldmia	r2, {r1, r2}
 8001a26:	486a      	ldr	r0, [pc, #424]	; (8001bd0 <menu_instalador_1+0x1ec>)
 8001a28:	f000 fe8a 	bl	8002740 <ssd1306_WriteString>
 8001a2c:	e005      	b.n	8001a3a <menu_instalador_1+0x56>
      }
      else
      {
        ssd1306_WriteString("Salida unipolar", Font_7x10, White);
 8001a2e:	4a66      	ldr	r2, [pc, #408]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001a30:	2301      	movs	r3, #1
 8001a32:	ca06      	ldmia	r2, {r1, r2}
 8001a34:	4866      	ldr	r0, [pc, #408]	; (8001bd0 <menu_instalador_1+0x1ec>)
 8001a36:	f000 fe83 	bl	8002740 <ssd1306_WriteString>
      }

      ssd1306_SetCursor(0, 36);
 8001a3a:	2124      	movs	r1, #36	; 0x24
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f000 fea5 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d106      	bne.n	8001a56 <menu_instalador_1+0x72>
      {
        ssd1306_WriteString("KP I abierto", Font_7x10, Black);
 8001a48:	4a5f      	ldr	r2, [pc, #380]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	ca06      	ldmia	r2, {r1, r2}
 8001a4e:	4861      	ldr	r0, [pc, #388]	; (8001bd4 <menu_instalador_1+0x1f0>)
 8001a50:	f000 fe76 	bl	8002740 <ssd1306_WriteString>
 8001a54:	e005      	b.n	8001a62 <menu_instalador_1+0x7e>
      }
      else
      {
        ssd1306_WriteString("KP I abierto", Font_7x10, White);
 8001a56:	4a5c      	ldr	r2, [pc, #368]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001a58:	2301      	movs	r3, #1
 8001a5a:	ca06      	ldmia	r2, {r1, r2}
 8001a5c:	485d      	ldr	r0, [pc, #372]	; (8001bd4 <menu_instalador_1+0x1f0>)
 8001a5e:	f000 fe6f 	bl	8002740 <ssd1306_WriteString>
      }

      ssd1306_SetCursor(0, 54);
 8001a62:	2136      	movs	r1, #54	; 0x36
 8001a64:	2000      	movs	r0, #0
 8001a66:	f000 fe91 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 3)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d106      	bne.n	8001a7e <menu_instalador_1+0x9a>
      {
        ssd1306_WriteString("PID Salida INV", Font_7x10, Black);
 8001a70:	4a55      	ldr	r2, [pc, #340]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001a72:	2300      	movs	r3, #0
 8001a74:	ca06      	ldmia	r2, {r1, r2}
 8001a76:	4858      	ldr	r0, [pc, #352]	; (8001bd8 <menu_instalador_1+0x1f4>)
 8001a78:	f000 fe62 	bl	8002740 <ssd1306_WriteString>
 8001a7c:	e08b      	b.n	8001b96 <menu_instalador_1+0x1b2>
      }
      else
      {
        ssd1306_WriteString("PID Salida INV", Font_7x10, White);
 8001a7e:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001a80:	2301      	movs	r3, #1
 8001a82:	ca06      	ldmia	r2, {r1, r2}
 8001a84:	4854      	ldr	r0, [pc, #336]	; (8001bd8 <menu_instalador_1+0x1f4>)
 8001a86:	f000 fe5b 	bl	8002740 <ssd1306_WriteString>
 8001a8a:	e084      	b.n	8001b96 <menu_instalador_1+0x1b2>
      }
    } else if(opcion > 3 && opcion <= 6){
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	dd49      	ble.n	8001b26 <menu_instalador_1+0x142>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	dc46      	bgt.n	8001b26 <menu_instalador_1+0x142>

      ssd1306_SetCursor(0, 0);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 fe76 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("instalador 2/3", Font_7x10, White); //Cabecera de la primera página
 8001aa0:	4a49      	ldr	r2, [pc, #292]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	ca06      	ldmia	r2, {r1, r2}
 8001aa6:	484d      	ldr	r0, [pc, #308]	; (8001bdc <menu_instalador_1+0x1f8>)
 8001aa8:	f000 fe4a 	bl	8002740 <ssd1306_WriteString>
      
      ssd1306_SetCursor(0, 18);
 8001aac:	2112      	movs	r1, #18
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f000 fe6c 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 4)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d106      	bne.n	8001ac8 <menu_instalador_1+0xe4>
      {
        ssd1306_WriteString("% PID positivo", Font_7x10, Black);
 8001aba:	4a43      	ldr	r2, [pc, #268]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001abc:	2300      	movs	r3, #0
 8001abe:	ca06      	ldmia	r2, {r1, r2}
 8001ac0:	4847      	ldr	r0, [pc, #284]	; (8001be0 <menu_instalador_1+0x1fc>)
 8001ac2:	f000 fe3d 	bl	8002740 <ssd1306_WriteString>
 8001ac6:	e005      	b.n	8001ad4 <menu_instalador_1+0xf0>
      }
      else
      {
        ssd1306_WriteString("% PID positivo", Font_7x10, White);
 8001ac8:	4a3f      	ldr	r2, [pc, #252]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001aca:	2301      	movs	r3, #1
 8001acc:	ca06      	ldmia	r2, {r1, r2}
 8001ace:	4844      	ldr	r0, [pc, #272]	; (8001be0 <menu_instalador_1+0x1fc>)
 8001ad0:	f000 fe36 	bl	8002740 <ssd1306_WriteString>
      }

      ssd1306_SetCursor(0, 36);
 8001ad4:	2124      	movs	r1, #36	; 0x24
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 fe58 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 5)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d106      	bne.n	8001af0 <menu_instalador_1+0x10c>
      {
        ssd1306_WriteString("% PID negativo", Font_7x10, Black);
 8001ae2:	4a39      	ldr	r2, [pc, #228]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	ca06      	ldmia	r2, {r1, r2}
 8001ae8:	483e      	ldr	r0, [pc, #248]	; (8001be4 <menu_instalador_1+0x200>)
 8001aea:	f000 fe29 	bl	8002740 <ssd1306_WriteString>
 8001aee:	e005      	b.n	8001afc <menu_instalador_1+0x118>
      }
      else
      {
        ssd1306_WriteString("% PID negativo", Font_7x10, White);
 8001af0:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001af2:	2301      	movs	r3, #1
 8001af4:	ca06      	ldmia	r2, {r1, r2}
 8001af6:	483b      	ldr	r0, [pc, #236]	; (8001be4 <menu_instalador_1+0x200>)
 8001af8:	f000 fe22 	bl	8002740 <ssd1306_WriteString>
      }

      ssd1306_SetCursor(0, 54);
 8001afc:	2136      	movs	r1, #54	; 0x36
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 fe44 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 6)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d106      	bne.n	8001b18 <menu_instalador_1+0x134>
      {
        ssd1306_WriteString("Suma PID con ref", Font_7x10, Black);
 8001b0a:	4a2f      	ldr	r2, [pc, #188]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	ca06      	ldmia	r2, {r1, r2}
 8001b10:	4835      	ldr	r0, [pc, #212]	; (8001be8 <menu_instalador_1+0x204>)
 8001b12:	f000 fe15 	bl	8002740 <ssd1306_WriteString>
      if (opcion == 6)
 8001b16:	e03e      	b.n	8001b96 <menu_instalador_1+0x1b2>
      }
      else
      {
        ssd1306_WriteString("Suma PID con ref", Font_7x10, White);
 8001b18:	4a2b      	ldr	r2, [pc, #172]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	ca06      	ldmia	r2, {r1, r2}
 8001b1e:	4832      	ldr	r0, [pc, #200]	; (8001be8 <menu_instalador_1+0x204>)
 8001b20:	f000 fe0e 	bl	8002740 <ssd1306_WriteString>
      if (opcion == 6)
 8001b24:	e037      	b.n	8001b96 <menu_instalador_1+0x1b2>
      }
    } else if(opcion > 6 && opcion <= 9){
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b06      	cmp	r3, #6
 8001b2a:	dd34      	ble.n	8001b96 <menu_instalador_1+0x1b2>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b09      	cmp	r3, #9
 8001b30:	dc31      	bgt.n	8001b96 <menu_instalador_1+0x1b2>
      ssd1306_SetCursor(0, 0);
 8001b32:	2100      	movs	r1, #0
 8001b34:	2000      	movs	r0, #0
 8001b36:	f000 fe29 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("instalador 3/3", Font_7x10, White); //Cabecera de la primera página
 8001b3a:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	ca06      	ldmia	r2, {r1, r2}
 8001b40:	482a      	ldr	r0, [pc, #168]	; (8001bec <menu_instalador_1+0x208>)
 8001b42:	f000 fdfd 	bl	8002740 <ssd1306_WriteString>

      ssd1306_SetCursor(0, 18);
 8001b46:	2112      	movs	r1, #18
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f000 fe1f 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 7)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b07      	cmp	r3, #7
 8001b52:	d106      	bne.n	8001b62 <menu_instalador_1+0x17e>
      {
        ssd1306_WriteString("Lim salida analog +", Font_7x10, Black);
 8001b54:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001b56:	2300      	movs	r3, #0
 8001b58:	ca06      	ldmia	r2, {r1, r2}
 8001b5a:	4825      	ldr	r0, [pc, #148]	; (8001bf0 <menu_instalador_1+0x20c>)
 8001b5c:	f000 fdf0 	bl	8002740 <ssd1306_WriteString>
 8001b60:	e005      	b.n	8001b6e <menu_instalador_1+0x18a>
      }
      else
      {
        ssd1306_WriteString("Lim salida analog +", Font_7x10, White);
 8001b62:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001b64:	2301      	movs	r3, #1
 8001b66:	ca06      	ldmia	r2, {r1, r2}
 8001b68:	4821      	ldr	r0, [pc, #132]	; (8001bf0 <menu_instalador_1+0x20c>)
 8001b6a:	f000 fde9 	bl	8002740 <ssd1306_WriteString>
      }

      ssd1306_SetCursor(0, 36);
 8001b6e:	2124      	movs	r1, #36	; 0x24
 8001b70:	2000      	movs	r0, #0
 8001b72:	f000 fe0b 	bl	800278c <ssd1306_SetCursor>
      if (opcion == 8)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d106      	bne.n	8001b8a <menu_instalador_1+0x1a6>
      {
        ssd1306_WriteString("Lim salida analog -", Font_7x10, Black);
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	ca06      	ldmia	r2, {r1, r2}
 8001b82:	481c      	ldr	r0, [pc, #112]	; (8001bf4 <menu_instalador_1+0x210>)
 8001b84:	f000 fddc 	bl	8002740 <ssd1306_WriteString>
 8001b88:	e005      	b.n	8001b96 <menu_instalador_1+0x1b2>
      }
      else
      {
        ssd1306_WriteString("Lim salida analog -", Font_7x10, White);
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <menu_instalador_1+0x1e4>)
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	ca06      	ldmia	r2, {r1, r2}
 8001b90:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <menu_instalador_1+0x210>)
 8001b92:	f000 fdd5 	bl	8002740 <ssd1306_WriteString>
      }
    }
    ssd1306_UpdateScreen();
 8001b96:	f000 fccf 	bl	8002538 <ssd1306_UpdateScreen>

    switch (Leer_botones())
 8001b9a:	f7ff f8b1 	bl	8000d00 <Leer_botones>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d007      	beq.n	8001bb4 <menu_instalador_1+0x1d0>
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	f73f af20 	bgt.w	80019ea <menu_instalador_1+0x6>
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d002      	beq.n	8001bb4 <menu_instalador_1+0x1d0>
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d002      	beq.n	8001bb8 <menu_instalador_1+0x1d4>
 8001bb2:	e003      	b.n	8001bbc <menu_instalador_1+0x1d8>
    {
    case ACEPTAR:
    case PERILLA:
      return opcion;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	e002      	b.n	8001bbe <menu_instalador_1+0x1da>
    case CANCELAR:
      return NULO;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e000      	b.n	8001bbe <menu_instalador_1+0x1da>
    opcion = Leer_encoder(8);
 8001bbc:	e715      	b.n	80019ea <menu_instalador_1+0x6>
    }
  }
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	08007c44 	.word	0x08007c44
 8001bd0:	08007c54 	.word	0x08007c54
 8001bd4:	08007c64 	.word	0x08007c64
 8001bd8:	08007c74 	.word	0x08007c74
 8001bdc:	08007c84 	.word	0x08007c84
 8001be0:	08007c94 	.word	0x08007c94
 8001be4:	08007ca4 	.word	0x08007ca4
 8001be8:	08007cb4 	.word	0x08007cb4
 8001bec:	08007cc8 	.word	0x08007cc8
 8001bf0:	08007cd8 	.word	0x08007cd8
 8001bf4:	08007cec 	.word	0x08007cec

08001bf8 <cambiar_opcion>:

bool cambiar_opcion(char *texto ,bool *valor){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  int opcion;
  while(true){
    opcion = Leer_encoder(2);
 8001c02:	2002      	movs	r0, #2
 8001c04:	f7ff f8dc 	bl	8000dc0 <Leer_encoder>
 8001c08:	60f8      	str	r0, [r7, #12]

    ssd1306_Fill(Black);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 fc70 	bl	80024f0 <ssd1306_Fill>

    ssd1306_SetCursor(0, 0);
 8001c10:	2100      	movs	r1, #0
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 fdba 	bl	800278c <ssd1306_SetCursor>
    ssd1306_WriteString(texto, Font_7x10, White);
 8001c18:	4a37      	ldr	r2, [pc, #220]	; (8001cf8 <cambiar_opcion+0x100>)
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	ca06      	ldmia	r2, {r1, r2}
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fd8e 	bl	8002740 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 18);
 8001c24:	2112      	movs	r1, #18
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 fdb0 	bl	800278c <ssd1306_SetCursor>

    if(*valor == true){
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <cambiar_opcion+0x4a>
      ssd1306_WriteString("Valor inicial: V", Font_7x10, White);
 8001c34:	4a30      	ldr	r2, [pc, #192]	; (8001cf8 <cambiar_opcion+0x100>)
 8001c36:	2301      	movs	r3, #1
 8001c38:	ca06      	ldmia	r2, {r1, r2}
 8001c3a:	4830      	ldr	r0, [pc, #192]	; (8001cfc <cambiar_opcion+0x104>)
 8001c3c:	f000 fd80 	bl	8002740 <ssd1306_WriteString>
 8001c40:	e005      	b.n	8001c4e <cambiar_opcion+0x56>
    } else
    {
      ssd1306_WriteString("Valor inicial: F", Font_7x10, White);
 8001c42:	4a2d      	ldr	r2, [pc, #180]	; (8001cf8 <cambiar_opcion+0x100>)
 8001c44:	2301      	movs	r3, #1
 8001c46:	ca06      	ldmia	r2, {r1, r2}
 8001c48:	482d      	ldr	r0, [pc, #180]	; (8001d00 <cambiar_opcion+0x108>)
 8001c4a:	f000 fd79 	bl	8002740 <ssd1306_WriteString>
    }
    
    if (opcion % 2 == 0)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d114      	bne.n	8001c82 <cambiar_opcion+0x8a>
    {
      ssd1306_SetCursor(0, 36);
 8001c58:	2124      	movs	r1, #36	; 0x24
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f000 fd96 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("Verdadero", Font_7x10, Black);
 8001c60:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <cambiar_opcion+0x100>)
 8001c62:	2300      	movs	r3, #0
 8001c64:	ca06      	ldmia	r2, {r1, r2}
 8001c66:	4827      	ldr	r0, [pc, #156]	; (8001d04 <cambiar_opcion+0x10c>)
 8001c68:	f000 fd6a 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(70, 36);
 8001c6c:	2124      	movs	r1, #36	; 0x24
 8001c6e:	2046      	movs	r0, #70	; 0x46
 8001c70:	f000 fd8c 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("Falso", Font_7x10, White);
 8001c74:	4a20      	ldr	r2, [pc, #128]	; (8001cf8 <cambiar_opcion+0x100>)
 8001c76:	2301      	movs	r3, #1
 8001c78:	ca06      	ldmia	r2, {r1, r2}
 8001c7a:	4823      	ldr	r0, [pc, #140]	; (8001d08 <cambiar_opcion+0x110>)
 8001c7c:	f000 fd60 	bl	8002740 <ssd1306_WriteString>
 8001c80:	e013      	b.n	8001caa <cambiar_opcion+0xb2>
    } else
    {
      ssd1306_SetCursor(0, 36);
 8001c82:	2124      	movs	r1, #36	; 0x24
 8001c84:	2000      	movs	r0, #0
 8001c86:	f000 fd81 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("Verdadero", Font_7x10, White);
 8001c8a:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <cambiar_opcion+0x100>)
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	ca06      	ldmia	r2, {r1, r2}
 8001c90:	481c      	ldr	r0, [pc, #112]	; (8001d04 <cambiar_opcion+0x10c>)
 8001c92:	f000 fd55 	bl	8002740 <ssd1306_WriteString>
      ssd1306_SetCursor(70, 36);
 8001c96:	2124      	movs	r1, #36	; 0x24
 8001c98:	2046      	movs	r0, #70	; 0x46
 8001c9a:	f000 fd77 	bl	800278c <ssd1306_SetCursor>
      ssd1306_WriteString("Falso", Font_7x10, Black);
 8001c9e:	4a16      	ldr	r2, [pc, #88]	; (8001cf8 <cambiar_opcion+0x100>)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	ca06      	ldmia	r2, {r1, r2}
 8001ca4:	4818      	ldr	r0, [pc, #96]	; (8001d08 <cambiar_opcion+0x110>)
 8001ca6:	f000 fd4b 	bl	8002740 <ssd1306_WriteString>
    }
    ssd1306_UpdateScreen();
 8001caa:	f000 fc45 	bl	8002538 <ssd1306_UpdateScreen>
    switch (Leer_botones())
 8001cae:	f7ff f827 	bl	8000d00 <Leer_botones>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d006      	beq.n	8001cc6 <cambiar_opcion+0xce>
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	dca2      	bgt.n	8001c02 <cambiar_opcion+0xa>
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d002      	beq.n	8001cc6 <cambiar_opcion+0xce>
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d00f      	beq.n	8001ce4 <cambiar_opcion+0xec>
 8001cc4:	e013      	b.n	8001cee <cambiar_opcion+0xf6>
    {
    case ACEPTAR:
    case PERILLA:
      *valor = (opcion % 2 == 0) ? true : false;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	701a      	strb	r2, [r3, #0]
      pantalla_guardado();
 8001cda:	f000 f833 	bl	8001d44 <pantalla_guardado>
      return *valor;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	e005      	b.n	8001cf0 <cambiar_opcion+0xf8>
    case CANCELAR:
      pantalla_cancelar();
 8001ce4:	f000 f812 	bl	8001d0c <pantalla_cancelar>
      return *valor;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	e000      	b.n	8001cf0 <cambiar_opcion+0xf8>
    opcion = Leer_encoder(2);
 8001cee:	e788      	b.n	8001c02 <cambiar_opcion+0xa>
    } 
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	08007d00 	.word	0x08007d00
 8001d00:	08007d14 	.word	0x08007d14
 8001d04:	08007d28 	.word	0x08007d28
 8001d08:	08007d34 	.word	0x08007d34

08001d0c <pantalla_cancelar>:

void pantalla_cancelar(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  ssd1306_Fill(Black);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f000 fbed 	bl	80024f0 <ssd1306_Fill>
  ssd1306_SetCursor(0, 18);
 8001d16:	2112      	movs	r1, #18
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f000 fd37 	bl	800278c <ssd1306_SetCursor>
  ssd1306_WriteString("Cancelado", Font_7x10, White);
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <pantalla_cancelar+0x30>)
 8001d20:	2301      	movs	r3, #1
 8001d22:	ca06      	ldmia	r2, {r1, r2}
 8001d24:	4806      	ldr	r0, [pc, #24]	; (8001d40 <pantalla_cancelar+0x34>)
 8001d26:	f000 fd0b 	bl	8002740 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001d2a:	f000 fc05 	bl	8002538 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 8001d2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d32:	f000 fde5 	bl	8002900 <HAL_Delay>
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	08007be8 	.word	0x08007be8

08001d44 <pantalla_guardado>:

void pantalla_guardado(void){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  ssd1306_Fill(Black);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f000 fbd1 	bl	80024f0 <ssd1306_Fill>
  ssd1306_SetCursor(0, 18);
 8001d4e:	2112      	movs	r1, #18
 8001d50:	2000      	movs	r0, #0
 8001d52:	f000 fd1b 	bl	800278c <ssd1306_SetCursor>
  ssd1306_WriteString("Guardado", Font_7x10, White);
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <pantalla_guardado+0x30>)
 8001d58:	2301      	movs	r3, #1
 8001d5a:	ca06      	ldmia	r2, {r1, r2}
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <pantalla_guardado+0x34>)
 8001d5e:	f000 fcef 	bl	8002740 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001d62:	f000 fbe9 	bl	8002538 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 8001d66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d6a:	f000 fdc9 	bl	8002900 <HAL_Delay>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000008 	.word	0x20000008
 8001d78:	08007bc0 	.word	0x08007bc0

08001d7c <Encoder_reiniciar>:

void Encoder_reiniciar(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  TIM4->CNT = 1000;
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <Encoder_reiniciar+0x18>)
 8001d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d86:	625a      	str	r2, [r3, #36]	; 0x24
  return;
 8001d88:	bf00      	nop
}
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40000800 	.word	0x40000800

08001d98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
}
 8001d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    ssd1306_Init();
 8001da0:	f000 fb3c 	bl	800241c <ssd1306_Init>
    ssd1306_Fill(Black);
 8001da4:	2000      	movs	r0, #0
 8001da6:	f000 fba3 	bl	80024f0 <ssd1306_Fill>
    ssd1306_WriteString("Error", Font_7x10, Black);
 8001daa:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <Error_Handler+0x2c>)
 8001dac:	2300      	movs	r3, #0
 8001dae:	ca06      	ldmia	r2, {r1, r2}
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <Error_Handler+0x30>)
 8001db2:	f000 fcc5 	bl	8002740 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001db6:	f000 fbbf 	bl	8002538 <ssd1306_UpdateScreen>
    HAL_Delay(10000);
 8001dba:	f242 7010 	movw	r0, #10000	; 0x2710
 8001dbe:	f000 fd9f 	bl	8002900 <HAL_Delay>
    ssd1306_Init();
 8001dc2:	e7ed      	b.n	8001da0 <Error_Handler+0x8>
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	08007d3c 	.word	0x08007d3c

08001dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_MspInit+0x64>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_MspInit+0x64>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6613      	str	r3, [r2, #96]	; 0x60
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_MspInit+0x64>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_MspInit+0x64>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_MspInit+0x64>)
 8001dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_MspInit+0x64>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fd11 	bl	8005840 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001e1e:	f003 fd6f 	bl	8005900 <HAL_PWR_EnablePVD>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e22:	f003 fe21 	bl	8005a68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b09c      	sub	sp, #112	; 0x70
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4c:	f107 0318 	add.w	r3, r7, #24
 8001e50:	2244      	movs	r2, #68	; 0x44
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f005 fd41 	bl	80078dc <memset>
  if(hadc->Instance==ADC1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e62:	d177      	bne.n	8001f54 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e68:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e6e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e70:	f107 0318 	add.w	r3, r7, #24
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 fb0f 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e80:	f7ff ff8a 	bl	8001d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e84:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <HAL_ADC_MspInit+0x128>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	4a34      	ldr	r2, [pc, #208]	; (8001f5c <HAL_ADC_MspInit+0x128>)
 8001e8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_ADC_MspInit+0x128>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_ADC_MspInit+0x128>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	4a2e      	ldr	r2, [pc, #184]	; (8001f5c <HAL_ADC_MspInit+0x128>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <HAL_ADC_MspInit+0x128>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_ADC_MspInit+0x128>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb8:	4a28      	ldr	r2, [pc, #160]	; (8001f5c <HAL_ADC_MspInit+0x128>)
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec0:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_ADC_MspInit+0x128>)
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ecc:	230c      	movs	r3, #12
 8001ece:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee2:	f002 fe6d 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eea:	2303      	movs	r3, #3
 8001eec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4819      	ldr	r0, [pc, #100]	; (8001f60 <HAL_ADC_MspInit+0x12c>)
 8001efa:	f002 fe61 	bl	8004bc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_ADC_MspInit+0x134>)
 8001f02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f06:	2205      	movs	r2, #5
 8001f08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f2e:	2220      	movs	r2, #32
 8001f30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f38:	480a      	ldr	r0, [pc, #40]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f3a:	f002 fc6d 	bl	8004818 <HAL_DMA_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001f44:	f7ff ff28 	bl	8001d98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <HAL_ADC_MspInit+0x130>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f54:	bf00      	nop
 8001f56:	3770      	adds	r7, #112	; 0x70
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	48000400 	.word	0x48000400
 8001f64:	200000a8 	.word	0x200000a8
 8001f68:	40020008 	.word	0x40020008

08001f6c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <HAL_DAC_MspInit+0x74>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d124      	bne.n	8001fd8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_DAC_MspInit+0x78>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <HAL_DAC_MspInit+0x78>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_DAC_MspInit+0x78>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_DAC_MspInit+0x78>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <HAL_DAC_MspInit+0x78>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_DAC_MspInit+0x78>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fbe:	2330      	movs	r3, #48	; 0x30
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd4:	f002 fdf4 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	50000800 	.word	0x50000800
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b09a      	sub	sp, #104	; 0x68
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	2244      	movs	r2, #68	; 0x44
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f005 fc67 	bl	80078dc <memset>
  if(hi2c->Instance==I2C2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_I2C_MspInit+0xa8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d137      	bne.n	8002088 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	4618      	mov	r0, r3
 8002026:	f004 fa37 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002030:	f7ff feb2 	bl	8001d98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_I2C_MspInit+0xac>)
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_I2C_MspInit+0xac>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_I2C_MspInit+0xac>)
 8002042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800204c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002050:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002052:	2312      	movs	r3, #18
 8002054:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800205e:	2304      	movs	r3, #4
 8002060:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002066:	4619      	mov	r1, r3
 8002068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800206c:	f002 fda8 	bl	8004bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_I2C_MspInit+0xac>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_I2C_MspInit+0xac>)
 8002076:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800207a:	6593      	str	r3, [r2, #88]	; 0x58
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_I2C_MspInit+0xac>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002088:	bf00      	nop
 800208a:	3768      	adds	r7, #104	; 0x68
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40005800 	.word	0x40005800
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b094      	sub	sp, #80	; 0x50
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	2244      	movs	r2, #68	; 0x44
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f005 fc17 	bl	80078dc <memset>
  if(hrtc->Instance==RTC)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a15      	ldr	r2, [pc, #84]	; (8002108 <HAL_RTC_MspInit+0x70>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d123      	bne.n	8002100 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c2:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 f9e5 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80020d4:	f7ff fe60 	bl	8001d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_RTC_MspInit+0x74>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <HAL_RTC_MspInit+0x74>)
 80020e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_RTC_MspInit+0x74>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_RTC_MspInit+0x74>)
 80020ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f2:	6593      	str	r3, [r2, #88]	; 0x58
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RTC_MspInit+0x74>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	3750      	adds	r7, #80	; 0x50
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40002800 	.word	0x40002800
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1a      	ldr	r2, [pc, #104]	; (8002188 <HAL_TIM_Base_MspInit+0x78>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d114      	bne.n	800214c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_TIM_Base_MspInit+0x7c>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_TIM_Base_MspInit+0x7c>)
 8002128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800212c:	6613      	str	r3, [r2, #96]	; 0x60
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_TIM_Base_MspInit+0x7c>)
 8002130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2018      	movs	r0, #24
 8002140:	f002 f8f1 	bl	8004326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002144:	2018      	movs	r0, #24
 8002146:	f002 f908 	bl	800435a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800214a:	e018      	b.n	800217e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0f      	ldr	r2, [pc, #60]	; (8002190 <HAL_TIM_Base_MspInit+0x80>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d113      	bne.n	800217e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_TIM_Base_MspInit+0x7c>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	4a0c      	ldr	r2, [pc, #48]	; (800218c <HAL_TIM_Base_MspInit+0x7c>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6593      	str	r3, [r2, #88]	; 0x58
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_TIM_Base_MspInit+0x7c>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	201d      	movs	r0, #29
 8002174:	f002 f8d7 	bl	8004326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002178:	201d      	movs	r0, #29
 800217a:	f002 f8ee 	bl	800435a <HAL_NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40012c00 	.word	0x40012c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40000400 	.word	0x40000400

08002194 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	; 0x30
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d129      	bne.n	800220a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6593      	str	r3, [r2, #88]	; 0x58
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	4a27      	ldr	r2, [pc, #156]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 80021e6:	2303      	movs	r3, #3
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021f6:	2301      	movs	r3, #1
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002204:	f002 fcdc 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002208:	e02e      	b.n	8002268 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a19      	ldr	r2, [pc, #100]	; (8002274 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d129      	bne.n	8002268 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6593      	str	r3, [r2, #88]	; 0x58
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 800222e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_TIM_Encoder_MspInit+0xdc>)
 800223a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PERILLA_B_Pin|PERILLA_A_Pin;
 8002244:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002256:	230a      	movs	r3, #10
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 031c 	add.w	r3, r7, #28
 800225e:	4619      	mov	r1, r3
 8002260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002264:	f002 fcac 	bl	8004bc0 <HAL_GPIO_Init>
}
 8002268:	bf00      	nop
 800226a:	3730      	adds	r7, #48	; 0x30
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	40000800 	.word	0x40000800

08002278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800227c:	e7fe      	b.n	800227c <NMI_Handler+0x4>
	...

08002280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	    ssd1306_Init();
 8002284:	f000 f8ca 	bl	800241c <ssd1306_Init>
	    ssd1306_Fill(Black);
 8002288:	2000      	movs	r0, #0
 800228a:	f000 f931 	bl	80024f0 <ssd1306_Fill>
	    ssd1306_WriteString("Error", Font_7x10, Black);
 800228e:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <HardFault_Handler+0x28>)
 8002290:	2300      	movs	r3, #0
 8002292:	ca06      	ldmia	r2, {r1, r2}
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <HardFault_Handler+0x2c>)
 8002296:	f000 fa53 	bl	8002740 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 800229a:	f000 f94d 	bl	8002538 <ssd1306_UpdateScreen>
	    HAL_Delay(10000);
 800229e:	f242 7010 	movw	r0, #10000	; 0x2710
 80022a2:	f000 fb2d 	bl	8002900 <HAL_Delay>
	    ssd1306_Init();
 80022a6:	e7ed      	b.n	8002284 <HardFault_Handler+0x4>
 80022a8:	20000008 	.word	0x20000008
 80022ac:	08007d44 	.word	0x08007d44

080022b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <MemManage_Handler+0x4>

080022b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f0:	f000 fae8 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <DMA1_Channel1_IRQHandler+0x10>)
 80022fe:	f002 fb33 	bl	8004968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200000a8 	.word	0x200000a8

0800230c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002312:	f004 fe06 	bl	8006f22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000190 	.word	0x20000190

08002320 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <TIM3_IRQHandler+0x10>)
 8002326:	f004 fdfc 	bl	8006f22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000228 	.word	0x20000228

08002334 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <SystemInit+0x20>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <SystemInit+0x20>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800235a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800235c:	480d      	ldr	r0, [pc, #52]	; (8002394 <LoopForever+0x6>)
  ldr r1, =_edata
 800235e:	490e      	ldr	r1, [pc, #56]	; (8002398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002360:	4a0e      	ldr	r2, [pc, #56]	; (800239c <LoopForever+0xe>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002364:	e002      	b.n	800236c <LoopCopyDataInit>

08002366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236a:	3304      	adds	r3, #4

0800236c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800236c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002370:	d3f9      	bcc.n	8002366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002374:	4c0b      	ldr	r4, [pc, #44]	; (80023a4 <LoopForever+0x16>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002378:	e001      	b.n	800237e <LoopFillZerobss>

0800237a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800237c:	3204      	adds	r2, #4

0800237e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002380:	d3fb      	bcc.n	800237a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002382:	f7ff ffd7 	bl	8002334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002386:	f005 fa6b 	bl	8007860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800238a:	f7fd ff45 	bl	8000218 <main>

0800238e <LoopForever>:

LoopForever:
    b LoopForever
 800238e:	e7fe      	b.n	800238e <LoopForever>
  ldr   r0, =_estack
 8002390:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800239c:	080096c8 	.word	0x080096c8
  ldr r2, =_sbss
 80023a0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80023a4:	20000708 	.word	0x20000708

080023a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC1_2_IRQHandler>

080023aa <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af04      	add	r7, sp, #16
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	2301      	movs	r3, #1
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	1dfb      	adds	r3, r7, #7
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2301      	movs	r3, #1
 80023d2:	2200      	movs	r2, #0
 80023d4:	2178      	movs	r1, #120	; 0x78
 80023d6:	4803      	ldr	r0, [pc, #12]	; (80023e4 <ssd1306_WriteCommand+0x2c>)
 80023d8:	f002 fe34 	bl	8005044 <HAL_I2C_Mem_Write>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2000011c 	.word	0x2000011c

080023e8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af04      	add	r7, sp, #16
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023fa:	9202      	str	r2, [sp, #8]
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	2240      	movs	r2, #64	; 0x40
 8002406:	2178      	movs	r1, #120	; 0x78
 8002408:	4803      	ldr	r0, [pc, #12]	; (8002418 <ssd1306_WriteData+0x30>)
 800240a:	f002 fe1b 	bl	8005044 <HAL_I2C_Mem_Write>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000011c 	.word	0x2000011c

0800241c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002420:	f7ff ffc3 	bl	80023aa <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002424:	2064      	movs	r0, #100	; 0x64
 8002426:	f000 fa6b 	bl	8002900 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800242a:	2000      	movs	r0, #0
 800242c:	f000 f9da 	bl	80027e4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002430:	2020      	movs	r0, #32
 8002432:	f7ff ffc1 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff ffbe 	bl	80023b8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800243c:	20b0      	movs	r0, #176	; 0xb0
 800243e:	f7ff ffbb 	bl	80023b8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002442:	20c8      	movs	r0, #200	; 0xc8
 8002444:	f7ff ffb8 	bl	80023b8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff ffb5 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800244e:	2010      	movs	r0, #16
 8002450:	f7ff ffb2 	bl	80023b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002454:	2040      	movs	r0, #64	; 0x40
 8002456:	f7ff ffaf 	bl	80023b8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800245a:	20ff      	movs	r0, #255	; 0xff
 800245c:	f000 f9ae 	bl	80027bc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002460:	20a1      	movs	r0, #161	; 0xa1
 8002462:	f7ff ffa9 	bl	80023b8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002466:	20a6      	movs	r0, #166	; 0xa6
 8002468:	f7ff ffa6 	bl	80023b8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800246c:	20a8      	movs	r0, #168	; 0xa8
 800246e:	f7ff ffa3 	bl	80023b8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002472:	203f      	movs	r0, #63	; 0x3f
 8002474:	f7ff ffa0 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002478:	20a4      	movs	r0, #164	; 0xa4
 800247a:	f7ff ff9d 	bl	80023b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800247e:	20d3      	movs	r0, #211	; 0xd3
 8002480:	f7ff ff9a 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002484:	2000      	movs	r0, #0
 8002486:	f7ff ff97 	bl	80023b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800248a:	20d5      	movs	r0, #213	; 0xd5
 800248c:	f7ff ff94 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002490:	20f0      	movs	r0, #240	; 0xf0
 8002492:	f7ff ff91 	bl	80023b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002496:	20d9      	movs	r0, #217	; 0xd9
 8002498:	f7ff ff8e 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800249c:	2022      	movs	r0, #34	; 0x22
 800249e:	f7ff ff8b 	bl	80023b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80024a2:	20da      	movs	r0, #218	; 0xda
 80024a4:	f7ff ff88 	bl	80023b8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80024a8:	2012      	movs	r0, #18
 80024aa:	f7ff ff85 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80024ae:	20db      	movs	r0, #219	; 0xdb
 80024b0:	f7ff ff82 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80024b4:	2020      	movs	r0, #32
 80024b6:	f7ff ff7f 	bl	80023b8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80024ba:	208d      	movs	r0, #141	; 0x8d
 80024bc:	f7ff ff7c 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80024c0:	2014      	movs	r0, #20
 80024c2:	f7ff ff79 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80024c6:	2001      	movs	r0, #1
 80024c8:	f000 f98c 	bl	80027e4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f000 f80f 	bl	80024f0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80024d2:	f000 f831 	bl	8002538 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <ssd1306_Init+0xd0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <ssd1306_Init+0xd0>)
 80024de:	2200      	movs	r2, #0
 80024e0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80024e2:	4b02      	ldr	r3, [pc, #8]	; (80024ec <ssd1306_Init+0xd0>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	711a      	strb	r2, [r3, #4]
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200006fc 	.word	0x200006fc

080024f0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	e00d      	b.n	800251c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <ssd1306_Fill+0x1a>
 8002506:	2100      	movs	r1, #0
 8002508:	e000      	b.n	800250c <ssd1306_Fill+0x1c>
 800250a:	21ff      	movs	r1, #255	; 0xff
 800250c:	4a09      	ldr	r2, [pc, #36]	; (8002534 <ssd1306_Fill+0x44>)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	460a      	mov	r2, r1
 8002514:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3301      	adds	r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002522:	d3ed      	bcc.n	8002500 <ssd1306_Fill+0x10>
    }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200002fc 	.word	0x200002fc

08002538 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800253e:	2300      	movs	r3, #0
 8002540:	71fb      	strb	r3, [r7, #7]
 8002542:	e016      	b.n	8002572 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	3b50      	subs	r3, #80	; 0x50
 8002548:	b2db      	uxtb	r3, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff34 	bl	80023b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002550:	2000      	movs	r0, #0
 8002552:	f7ff ff31 	bl	80023b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002556:	2010      	movs	r0, #16
 8002558:	f7ff ff2e 	bl	80023b8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	01db      	lsls	r3, r3, #7
 8002560:	4a08      	ldr	r2, [pc, #32]	; (8002584 <ssd1306_UpdateScreen+0x4c>)
 8002562:	4413      	add	r3, r2
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff3e 	bl	80023e8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	3301      	adds	r3, #1
 8002570:	71fb      	strb	r3, [r7, #7]
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2b07      	cmp	r3, #7
 8002576:	d9e5      	bls.n	8002544 <ssd1306_UpdateScreen+0xc>
    }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200002fc 	.word	0x200002fc

08002588 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	460b      	mov	r3, r1
 8002594:	71bb      	strb	r3, [r7, #6]
 8002596:	4613      	mov	r3, r2
 8002598:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db3d      	blt.n	800261e <ssd1306_DrawPixel+0x96>
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	2b3f      	cmp	r3, #63	; 0x3f
 80025a6:	d83a      	bhi.n	800261e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80025a8:	797b      	ldrb	r3, [r7, #5]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d11a      	bne.n	80025e4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	08db      	lsrs	r3, r3, #3
 80025b4:	b2d8      	uxtb	r0, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	01db      	lsls	r3, r3, #7
 80025ba:	4413      	add	r3, r2
 80025bc:	4a1b      	ldr	r2, [pc, #108]	; (800262c <ssd1306_DrawPixel+0xa4>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	b25a      	sxtb	r2, r3
 80025c2:	79bb      	ldrb	r3, [r7, #6]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b259      	sxtb	r1, r3
 80025d4:	79fa      	ldrb	r2, [r7, #7]
 80025d6:	4603      	mov	r3, r0
 80025d8:	01db      	lsls	r3, r3, #7
 80025da:	4413      	add	r3, r2
 80025dc:	b2c9      	uxtb	r1, r1
 80025de:	4a13      	ldr	r2, [pc, #76]	; (800262c <ssd1306_DrawPixel+0xa4>)
 80025e0:	54d1      	strb	r1, [r2, r3]
 80025e2:	e01d      	b.n	8002620 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025e4:	79fa      	ldrb	r2, [r7, #7]
 80025e6:	79bb      	ldrb	r3, [r7, #6]
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	b2d8      	uxtb	r0, r3
 80025ec:	4603      	mov	r3, r0
 80025ee:	01db      	lsls	r3, r3, #7
 80025f0:	4413      	add	r3, r2
 80025f2:	4a0e      	ldr	r2, [pc, #56]	; (800262c <ssd1306_DrawPixel+0xa4>)
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
 80025f6:	b25a      	sxtb	r2, r3
 80025f8:	79bb      	ldrb	r3, [r7, #6]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	2101      	movs	r1, #1
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	b25b      	sxtb	r3, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	b25b      	sxtb	r3, r3
 800260a:	4013      	ands	r3, r2
 800260c:	b259      	sxtb	r1, r3
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	4603      	mov	r3, r0
 8002612:	01db      	lsls	r3, r3, #7
 8002614:	4413      	add	r3, r2
 8002616:	b2c9      	uxtb	r1, r1
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <ssd1306_DrawPixel+0xa4>)
 800261a:	54d1      	strb	r1, [r2, r3]
 800261c:	e000      	b.n	8002620 <ssd1306_DrawPixel+0x98>
        return;
 800261e:	bf00      	nop
    }
}
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	200002fc 	.word	0x200002fc

08002630 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	4604      	mov	r4, r0
 8002638:	1d38      	adds	r0, r7, #4
 800263a:	e880 0006 	stmia.w	r0, {r1, r2}
 800263e:	461a      	mov	r2, r3
 8002640:	4623      	mov	r3, r4
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	4613      	mov	r3, r2
 8002646:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b1f      	cmp	r3, #31
 800264c:	d902      	bls.n	8002654 <ssd1306_WriteChar+0x24>
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b7e      	cmp	r3, #126	; 0x7e
 8002652:	d901      	bls.n	8002658 <ssd1306_WriteChar+0x28>
        return 0;
 8002654:	2300      	movs	r3, #0
 8002656:	e06d      	b.n	8002734 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002658:	4b38      	ldr	r3, [pc, #224]	; (800273c <ssd1306_WriteChar+0x10c>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	793b      	ldrb	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	2b80      	cmp	r3, #128	; 0x80
 8002664:	dc06      	bgt.n	8002674 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002666:	4b35      	ldr	r3, [pc, #212]	; (800273c <ssd1306_WriteChar+0x10c>)
 8002668:	885b      	ldrh	r3, [r3, #2]
 800266a:	461a      	mov	r2, r3
 800266c:	797b      	ldrb	r3, [r7, #5]
 800266e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	dd01      	ble.n	8002678 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002674:	2300      	movs	r3, #0
 8002676:	e05d      	b.n	8002734 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	e04c      	b.n	8002718 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	3b20      	subs	r3, #32
 8002684:	7979      	ldrb	r1, [r7, #5]
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4619      	mov	r1, r3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	440b      	add	r3, r1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	e034      	b.n	8002708 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <ssd1306_WriteChar+0x10c>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	b2d8      	uxtb	r0, r3
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <ssd1306_WriteChar+0x10c>)
 80026be:	885b      	ldrh	r3, [r3, #2]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	7bba      	ldrb	r2, [r7, #14]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f7ff ff5b 	bl	8002588 <ssd1306_DrawPixel>
 80026d2:	e016      	b.n	8002702 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <ssd1306_WriteChar+0x10c>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4413      	add	r3, r2
 80026e0:	b2d8      	uxtb	r0, r3
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <ssd1306_WriteChar+0x10c>)
 80026e4:	885b      	ldrh	r3, [r3, #2]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	b2d9      	uxtb	r1, r3
 80026f0:	7bbb      	ldrb	r3, [r7, #14]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	f7ff ff43 	bl	8002588 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	3301      	adds	r3, #1
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	793b      	ldrb	r3, [r7, #4]
 800270a:	461a      	mov	r2, r3
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4293      	cmp	r3, r2
 8002710:	d3c5      	bcc.n	800269e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	797b      	ldrb	r3, [r7, #5]
 800271a:	461a      	mov	r2, r3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4293      	cmp	r3, r2
 8002720:	d3ad      	bcc.n	800267e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <ssd1306_WriteChar+0x10c>)
 8002724:	881a      	ldrh	r2, [r3, #0]
 8002726:	793b      	ldrb	r3, [r7, #4]
 8002728:	b29b      	uxth	r3, r3
 800272a:	4413      	add	r3, r2
 800272c:	b29a      	uxth	r2, r3
 800272e:	4b03      	ldr	r3, [pc, #12]	; (800273c <ssd1306_WriteChar+0x10c>)
 8002730:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3724      	adds	r7, #36	; 0x24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	200006fc 	.word	0x200006fc

08002740 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	1d38      	adds	r0, r7, #4
 800274a:	e880 0006 	stmia.w	r0, {r1, r2}
 800274e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002750:	e012      	b.n	8002778 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	7818      	ldrb	r0, [r3, #0]
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	1d3a      	adds	r2, r7, #4
 800275a:	ca06      	ldmia	r2, {r1, r2}
 800275c:	f7ff ff68 	bl	8002630 <ssd1306_WriteChar>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d002      	beq.n	8002772 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	e008      	b.n	8002784 <ssd1306_WriteString+0x44>
        }
        str++;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3301      	adds	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e8      	bne.n	8002752 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	781b      	ldrb	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	460a      	mov	r2, r1
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	4613      	mov	r3, r2
 800279a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <ssd1306_SetCursor+0x2c>)
 80027a2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80027a4:	79bb      	ldrb	r3, [r7, #6]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <ssd1306_SetCursor+0x2c>)
 80027aa:	805a      	strh	r2, [r3, #2]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	200006fc 	.word	0x200006fc

080027bc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80027c6:	2381      	movs	r3, #129	; 0x81
 80027c8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fdf3 	bl	80023b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fdef 	bl	80023b8 <ssd1306_WriteCommand>
}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80027f4:	23af      	movs	r3, #175	; 0xaf
 80027f6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <ssd1306_SetDisplayOn+0x38>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	715a      	strb	r2, [r3, #5]
 80027fe:	e004      	b.n	800280a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002800:	23ae      	movs	r3, #174	; 0xae
 8002802:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <ssd1306_SetDisplayOn+0x38>)
 8002806:	2200      	movs	r2, #0
 8002808:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fdd3 	bl	80023b8 <ssd1306_WriteCommand>
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200006fc 	.word	0x200006fc

08002820 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282a:	2003      	movs	r0, #3
 800282c:	f001 fd70 	bl	8004310 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002830:	200f      	movs	r0, #15
 8002832:	f000 f80d 	bl	8002850 <HAL_InitTick>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	71fb      	strb	r3, [r7, #7]
 8002840:	e001      	b.n	8002846 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002842:	f7ff fac3 	bl	8001dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002846:	79fb      	ldrb	r3, [r7, #7]

}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_InitTick+0x68>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d022      	beq.n	80028aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_InitTick+0x6c>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_InitTick+0x68>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002870:	fbb1 f3f3 	udiv	r3, r1, r3
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	4618      	mov	r0, r3
 800287a:	f001 fd7c 	bl	8004376 <HAL_SYSTICK_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10f      	bne.n	80028a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b0f      	cmp	r3, #15
 8002888:	d809      	bhi.n	800289e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800288a:	2200      	movs	r2, #0
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002892:	f001 fd48 	bl	8004326 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <HAL_InitTick+0x70>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e007      	b.n	80028ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e004      	b.n	80028ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2000001c 	.word	0x2000001c
 80028bc:	20000004 	.word	0x20000004
 80028c0:	20000018 	.word	0x20000018

080028c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_IncTick+0x1c>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_IncTick+0x20>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <HAL_IncTick+0x1c>)
 80028d4:	6013      	str	r3, [r2, #0]
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	20000704 	.word	0x20000704
 80028e4:	2000001c 	.word	0x2000001c

080028e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_GetTick+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000704 	.word	0x20000704

08002900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff ffee 	bl	80028e8 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002918:	d004      	beq.n	8002924 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_Delay+0x40>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002924:	bf00      	nop
 8002926:	f7ff ffdf 	bl	80028e8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	429a      	cmp	r2, r3
 8002934:	d8f7      	bhi.n	8002926 <HAL_Delay+0x26>
  {
  }
}
 8002936:	bf00      	nop
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	2000001c 	.word	0x2000001c

08002944 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	609a      	str	r2, [r3, #8]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	609a      	str	r2, [r3, #8]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3360      	adds	r3, #96	; 0x60
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <LL_ADC_SetOffset+0x44>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	4313      	orrs	r3, r2
 80029dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029e4:	bf00      	nop
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	03fff000 	.word	0x03fff000

080029f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3360      	adds	r3, #96	; 0x60
 8002a02:	461a      	mov	r2, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3360      	adds	r3, #96	; 0x60
 8002a30:	461a      	mov	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3360      	adds	r3, #96	; 0x60
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a80:	bf00      	nop
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3360      	adds	r3, #96	; 0x60
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	615a      	str	r2, [r3, #20]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b087      	sub	sp, #28
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3330      	adds	r3, #48	; 0x30
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	4413      	add	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	211f      	movs	r1, #31
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	401a      	ands	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	f003 011f 	and.w	r1, r3, #31
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	431a      	orrs	r2, r3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b087      	sub	sp, #28
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3314      	adds	r3, #20
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	0e5b      	lsrs	r3, r3, #25
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	4413      	add	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0d1b      	lsrs	r3, r3, #20
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	2107      	movs	r1, #7
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0d1b      	lsrs	r3, r3, #20
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	431a      	orrs	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d10a      	bne.n	8002be6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002be4:	e00a      	b.n	8002bfc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	407f0000 	.word	0x407f0000

08002c0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 031f 	and.w	r3, r3, #31
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6093      	str	r3, [r2, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c7c:	d101      	bne.n	8002c82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ca0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ca4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ccc:	d101      	bne.n	8002cd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d1c:	f043 0202 	orr.w	r2, r3, #2
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <LL_ADC_IsEnabled+0x18>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_ADC_IsEnabled+0x1a>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d101      	bne.n	8002d6e <LL_ADC_IsDisableOngoing+0x18>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <LL_ADC_IsDisableOngoing+0x1a>
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d90:	f043 0204 	orr.w	r2, r3, #4
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002db8:	f043 0210 	orr.w	r2, r3, #16
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d101      	bne.n	8002de4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e06:	f043 0220 	orr.w	r2, r3, #32
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d101      	bne.n	8002e32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e177      	b.n	800314a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe ffe3 	bl	8001e34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fef1 	bl	8002c68 <LL_ADC_IsDeepPowerDownEnabled>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fed7 	bl	8002c44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff0c 	bl	8002cb8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d115      	bne.n	8002ed2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fef0 	bl	8002c90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb0:	4b9c      	ldr	r3, [pc, #624]	; (8003124 <HAL_ADC_Init+0x2e4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	4a9c      	ldr	r2, [pc, #624]	; (8003128 <HAL_ADC_Init+0x2e8>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ec4:	e002      	b.n	8002ecc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f9      	bne.n	8002ec6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff feee 	bl	8002cb8 <LL_ADC_IsInternalRegulatorEnabled>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10d      	bne.n	8002efe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	f043 0210 	orr.w	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff62 	bl	8002dcc <LL_ADC_REG_IsConversionOngoing>
 8002f08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 8110 	bne.w	8003138 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 810c 	bne.w	8003138 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f28:	f043 0202 	orr.w	r2, r3, #2
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fefb 	bl	8002d30 <LL_ADC_IsEnabled>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f44:	f7ff fef4 	bl	8002d30 <LL_ADC_IsEnabled>
 8002f48:	4604      	mov	r4, r0
 8002f4a:	4878      	ldr	r0, [pc, #480]	; (800312c <HAL_ADC_Init+0x2ec>)
 8002f4c:	f7ff fef0 	bl	8002d30 <LL_ADC_IsEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4323      	orrs	r3, r4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4874      	ldr	r0, [pc, #464]	; (8003130 <HAL_ADC_Init+0x2f0>)
 8002f60:	f7ff fcf0 	bl	8002944 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7f5b      	ldrb	r3, [r3, #29]
 8002f68:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f6e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f74:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f7a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f82:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d106      	bne.n	8002fa0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	045b      	lsls	r3, r3, #17
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d009      	beq.n	8002fbc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	4b5c      	ldr	r3, [pc, #368]	; (8003134 <HAL_ADC_Init+0x2f4>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	69b9      	ldr	r1, [r7, #24]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff feee 	bl	8002dcc <LL_ADC_REG_IsConversionOngoing>
 8002ff0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff0f 	bl	8002e1a <LL_ADC_INJ_IsConversionOngoing>
 8002ffc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d16d      	bne.n	80030e0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d16a      	bne.n	80030e0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800300e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003016:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003026:	f023 0302 	bic.w	r3, r3, #2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	430b      	orrs	r3, r1
 8003032:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d017      	beq.n	800306c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800304a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003054:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003058:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6911      	ldr	r1, [r2, #16]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800306a:	e013      	b.n	8003094 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800307a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800308c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003090:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309a:	2b01      	cmp	r3, #1
 800309c:	d118      	bne.n	80030d0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030a8:	f023 0304 	bic.w	r3, r3, #4
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030c0:	430a      	orrs	r2, r1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	611a      	str	r2, [r3, #16]
 80030ce:	e007      	b.n	80030e0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10c      	bne.n	8003102 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f023 010f 	bic.w	r1, r3, #15
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	1e5a      	subs	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003100:	e007      	b.n	8003112 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 020f 	bic.w	r2, r2, #15
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	65da      	str	r2, [r3, #92]	; 0x5c
 8003122:	e011      	b.n	8003148 <HAL_ADC_Init+0x308>
 8003124:	20000004 	.word	0x20000004
 8003128:	053e2d63 	.word	0x053e2d63
 800312c:	50000100 	.word	0x50000100
 8003130:	50000300 	.word	0x50000300
 8003134:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	f043 0210 	orr.w	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003148:	7ffb      	ldrb	r3, [r7, #31]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd90      	pop	{r4, r7, pc}
 8003152:	bf00      	nop

08003154 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800315c:	4859      	ldr	r0, [pc, #356]	; (80032c4 <HAL_ADC_Start+0x170>)
 800315e:	f7ff fd55 	bl	8002c0c <LL_ADC_GetMultimode>
 8003162:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fe2f 	bl	8002dcc <LL_ADC_REG_IsConversionOngoing>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 809f 	bne.w	80032b4 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_ADC_Start+0x30>
 8003180:	2302      	movs	r3, #2
 8003182:	e09a      	b.n	80032ba <HAL_ADC_Start+0x166>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fe63 	bl	8003e58 <ADC_Enable>
 8003192:	4603      	mov	r3, r0
 8003194:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003196:	7dfb      	ldrb	r3, [r7, #23]
 8003198:	2b00      	cmp	r3, #0
 800319a:	f040 8086 	bne.w	80032aa <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a44      	ldr	r2, [pc, #272]	; (80032c8 <HAL_ADC_Start+0x174>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d002      	beq.n	80031c2 <HAL_ADC_Start+0x6e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	e001      	b.n	80031c6 <HAL_ADC_Start+0x72>
 80031c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d002      	beq.n	80031d4 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ec:	d106      	bne.n	80031fc <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f2:	f023 0206 	bic.w	r2, r3, #6
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60
 80031fa:	e002      	b.n	8003202 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	221c      	movs	r2, #28
 8003208:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2c      	ldr	r2, [pc, #176]	; (80032c8 <HAL_ADC_Start+0x174>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d002      	beq.n	8003222 <HAL_ADC_Start+0xce>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	e001      	b.n	8003226 <HAL_ADC_Start+0xd2>
 8003222:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	4293      	cmp	r3, r2
 800322c:	d008      	beq.n	8003240 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2b05      	cmp	r3, #5
 8003238:	d002      	beq.n	8003240 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b09      	cmp	r3, #9
 800323e:	d114      	bne.n	800326a <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003256:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fd8a 	bl	8002d7c <LL_ADC_REG_StartConversion>
 8003268:	e026      	b.n	80032b8 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <HAL_ADC_Start+0x174>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d002      	beq.n	8003286 <HAL_ADC_Start+0x132>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	e001      	b.n	800328a <HAL_ADC_Start+0x136>
 8003286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800328a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00f      	beq.n	80032b8 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80032a8:	e006      	b.n	80032b8 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80032b2:	e001      	b.n	80032b8 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
 80032b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	50000300 	.word	0x50000300
 80032c8:	50000100 	.word	0x50000100

080032cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_Stop+0x16>
 80032de:	2302      	movs	r3, #2
 80032e0:	e023      	b.n	800332a <HAL_ADC_Stop+0x5e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80032ea:	2103      	movs	r1, #3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fcf7 	bl	8003ce0 <ADC_ConversionStop>
 80032f2:	4603      	mov	r3, r0
 80032f4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d111      	bne.n	8003320 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fe0d 	bl	8003f1c <ADC_Disable>
 8003302:	4603      	mov	r3, r0
 8003304:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800333e:	4867      	ldr	r0, [pc, #412]	; (80034dc <HAL_ADC_PollForConversion+0x1a8>)
 8003340:	f7ff fc64 	bl	8002c0c <LL_ADC_GetMultimode>
 8003344:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b08      	cmp	r3, #8
 800334c:	d102      	bne.n	8003354 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800334e:	2308      	movs	r3, #8
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e02a      	b.n	80033aa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d002      	beq.n	8003366 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b09      	cmp	r3, #9
 8003364:	d111      	bne.n	800338a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0a6      	b.n	80034d2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003384:	2304      	movs	r3, #4
 8003386:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003388:	e00f      	b.n	80033aa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800338a:	4854      	ldr	r0, [pc, #336]	; (80034dc <HAL_ADC_PollForConversion+0x1a8>)
 800338c:	f7ff fc4c 	bl	8002c28 <LL_ADC_GetMultiDMATransfer>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	f043 0220 	orr.w	r2, r3, #32
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e095      	b.n	80034d2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033a6:	2304      	movs	r3, #4
 80033a8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033aa:	f7ff fa9d 	bl	80028e8 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033b0:	e021      	b.n	80033f6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b8:	d01d      	beq.n	80033f6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033ba:	f7ff fa95 	bl	80028e8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <HAL_ADC_PollForConversion+0x9c>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d112      	bne.n	80033f6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	f043 0204 	orr.w	r2, r3, #4
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e06d      	b.n	80034d2 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0d6      	beq.n	80033b2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fb67 	bl	8002ae8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01c      	beq.n	800345a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7f5b      	ldrb	r3, [r3, #29]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d118      	bne.n	800345a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b08      	cmp	r3, #8
 8003434:	d111      	bne.n	800345a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	f043 0201 	orr.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <HAL_ADC_PollForConversion+0x1ac>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d002      	beq.n	800346a <HAL_ADC_PollForConversion+0x136>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	e001      	b.n	800346e <HAL_ADC_PollForConversion+0x13a>
 800346a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	4293      	cmp	r3, r2
 8003474:	d008      	beq.n	8003488 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d002      	beq.n	8003488 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b09      	cmp	r3, #9
 8003486:	d104      	bne.n	8003492 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e00d      	b.n	80034ae <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <HAL_ADC_PollForConversion+0x1ac>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d002      	beq.n	80034a2 <HAL_ADC_PollForConversion+0x16e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	e001      	b.n	80034a6 <HAL_ADC_PollForConversion+0x172>
 80034a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d104      	bne.n	80034be <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2208      	movs	r2, #8
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	e008      	b.n	80034d0 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d103      	bne.n	80034d0 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	220c      	movs	r2, #12
 80034ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	50000300 	.word	0x50000300
 80034e0:	50000100 	.word	0x50000100

080034e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b0b6      	sub	sp, #216	; 0xd8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x22>
 800351e:	2302      	movs	r3, #2
 8003520:	e3c8      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x7b4>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fc4c 	bl	8002dcc <LL_ADC_REG_IsConversionOngoing>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 83ad 	bne.w	8003c96 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	f7ff fae0 	bl	8002b0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fc3a 	bl	8002dcc <LL_ADC_REG_IsConversionOngoing>
 8003558:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fc5a 	bl	8002e1a <LL_ADC_INJ_IsConversionOngoing>
 8003566:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800356a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 81d9 	bne.w	8003926 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003578:	2b00      	cmp	r3, #0
 800357a:	f040 81d4 	bne.w	8003926 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003586:	d10f      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	4619      	mov	r1, r3
 8003594:	f7ff fae7 	bl	8002b66 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fa8e 	bl	8002ac2 <LL_ADC_SetSamplingTimeCommonConfig>
 80035a6:	e00e      	b.n	80035c6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	461a      	mov	r2, r3
 80035b6:	f7ff fad6 	bl	8002b66 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fa7e 	bl	8002ac2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d022      	beq.n	800362e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6919      	ldr	r1, [r3, #16]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035f8:	f7ff f9d8 	bl	80029ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6919      	ldr	r1, [r3, #16]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	461a      	mov	r2, r3
 800360a:	f7ff fa24 	bl	8002a56 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6919      	ldr	r1, [r3, #16]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	7f1b      	ldrb	r3, [r3, #28]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d102      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x124>
 800361e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003622:	e000      	b.n	8003626 <HAL_ADC_ConfigChannel+0x126>
 8003624:	2300      	movs	r3, #0
 8003626:	461a      	mov	r2, r3
 8003628:	f7ff fa30 	bl	8002a8c <LL_ADC_SetOffsetSaturation>
 800362c:	e17b      	b.n	8003926 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff f9dd 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 800363a:	4603      	mov	r3, r0
 800363c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_ADC_ConfigChannel+0x15a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff f9d2 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003650:	4603      	mov	r3, r0
 8003652:	0e9b      	lsrs	r3, r3, #26
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	e01e      	b.n	8003698 <HAL_ADC_ConfigChannel+0x198>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff f9c7 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800367c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e004      	b.n	8003696 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800368c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x1b0>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e9b      	lsrs	r3, r3, #26
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	e018      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x1e2>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80036c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80036cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80036d4:	2320      	movs	r3, #32
 80036d6:	e004      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80036d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d106      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff f996 	bl	8002a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff f97a 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003700:	4603      	mov	r3, r0
 8003702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x220>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2101      	movs	r1, #1
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff f96f 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	f003 021f 	and.w	r2, r3, #31
 800371e:	e01e      	b.n	800375e <HAL_ADC_ConfigChannel+0x25e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f964 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 800372c:	4603      	mov	r3, r0
 800372e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800373e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e004      	b.n	800375c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x276>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0e9b      	lsrs	r3, r3, #26
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	e018      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x2a8>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800378a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800378e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003792:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800379a:	2320      	movs	r3, #32
 800379c:	e004      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800379e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037a2:	fab3 f383 	clz	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d106      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2101      	movs	r1, #1
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff f933 	bl	8002a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2102      	movs	r1, #2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff f917 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x2e6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2102      	movs	r1, #2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff f90c 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80037dc:	4603      	mov	r3, r0
 80037de:	0e9b      	lsrs	r3, r3, #26
 80037e0:	f003 021f 	and.w	r2, r3, #31
 80037e4:	e01e      	b.n	8003824 <HAL_ADC_ConfigChannel+0x324>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2102      	movs	r1, #2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff f901 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800380c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003814:	2320      	movs	r3, #32
 8003816:	e004      	b.n	8003822 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_ADC_ConfigChannel+0x33c>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	e016      	b.n	800386a <HAL_ADC_ConfigChannel+0x36a>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800384e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800385c:	2320      	movs	r3, #32
 800385e:	e004      	b.n	800386a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003860:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800386a:	429a      	cmp	r2, r3
 800386c:	d106      	bne.n	800387c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2200      	movs	r2, #0
 8003874:	2102      	movs	r1, #2
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f8d2 	bl	8002a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2103      	movs	r1, #3
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f8b6 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003888:	4603      	mov	r3, r0
 800388a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x3a8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2103      	movs	r1, #3
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff f8ab 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 800389e:	4603      	mov	r3, r0
 80038a0:	0e9b      	lsrs	r3, r3, #26
 80038a2:	f003 021f 	and.w	r2, r3, #31
 80038a6:	e017      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x3d8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2103      	movs	r1, #3
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff f8a0 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80038b4:	4603      	mov	r3, r0
 80038b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80038c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038c2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80038c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80038ca:	2320      	movs	r3, #32
 80038cc:	e003      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80038ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x3f0>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0e9b      	lsrs	r3, r3, #26
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	e011      	b.n	8003914 <HAL_ADC_ConfigChannel+0x414>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80038fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003900:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003908:	2320      	movs	r3, #32
 800390a:	e003      	b.n	8003914 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800390c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003914:	429a      	cmp	r2, r3
 8003916:	d106      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2200      	movs	r2, #0
 800391e:	2103      	movs	r1, #3
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff f87d 	bl	8002a20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fa00 	bl	8002d30 <LL_ADC_IsEnabled>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	f040 8140 	bne.w	8003bb8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	461a      	mov	r2, r3
 8003946:	f7ff f939 	bl	8002bbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4a8f      	ldr	r2, [pc, #572]	; (8003b8c <HAL_ADC_ConfigChannel+0x68c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	f040 8131 	bne.w	8003bb8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <HAL_ADC_ConfigChannel+0x47e>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	0e9b      	lsrs	r3, r3, #26
 800396c:	3301      	adds	r3, #1
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	2b09      	cmp	r3, #9
 8003974:	bf94      	ite	ls
 8003976:	2301      	movls	r3, #1
 8003978:	2300      	movhi	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	e019      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x4b2>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800398c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800398e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003996:	2320      	movs	r3, #32
 8003998:	e003      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800399a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399c:	fab3 f383 	clz	r3, r3
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	bf94      	ite	ls
 80039ac:	2301      	movls	r3, #1
 80039ae:	2300      	movhi	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d079      	beq.n	8003aaa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d107      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x4d2>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0e9b      	lsrs	r3, r3, #26
 80039c8:	3301      	adds	r3, #1
 80039ca:	069b      	lsls	r3, r3, #26
 80039cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039d0:	e015      	b.n	80039fe <HAL_ADC_ConfigChannel+0x4fe>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80039e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80039ea:	2320      	movs	r3, #32
 80039ec:	e003      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80039ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	3301      	adds	r3, #1
 80039f8:	069b      	lsls	r3, r3, #26
 80039fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x51e>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	0e9b      	lsrs	r3, r3, #26
 8003a10:	3301      	adds	r3, #1
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2101      	movs	r1, #1
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	e017      	b.n	8003a4e <HAL_ADC_ConfigChannel+0x54e>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003a36:	2320      	movs	r3, #32
 8003a38:	e003      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3c:	fab3 f383 	clz	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	3301      	adds	r3, #1
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	2101      	movs	r1, #1
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	ea42 0103 	orr.w	r1, r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x574>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	0e9b      	lsrs	r3, r3, #26
 8003a64:	3301      	adds	r3, #1
 8003a66:	f003 021f 	and.w	r2, r3, #31
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	051b      	lsls	r3, r3, #20
 8003a72:	e018      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x5a6>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	e003      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f003 021f 	and.w	r2, r3, #31
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4413      	add	r3, r2
 8003aa4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	e081      	b.n	8003bae <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d107      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x5c6>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	0e9b      	lsrs	r3, r3, #26
 8003abc:	3301      	adds	r3, #1
 8003abe:	069b      	lsls	r3, r3, #26
 8003ac0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ac4:	e015      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x5f2>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003ade:	2320      	movs	r3, #32
 8003ae0:	e003      	b.n	8003aea <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	fab3 f383 	clz	r3, r3
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	069b      	lsls	r3, r3, #26
 8003aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x612>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	0e9b      	lsrs	r3, r3, #26
 8003b04:	3301      	adds	r3, #1
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	e017      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x642>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	61fb      	str	r3, [r7, #28]
  return result;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003b2a:	2320      	movs	r3, #32
 8003b2c:	e003      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	3301      	adds	r3, #1
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	ea42 0103 	orr.w	r1, r2, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x66e>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	0e9b      	lsrs	r3, r3, #26
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f003 021f 	and.w	r2, r3, #31
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	3b1e      	subs	r3, #30
 8003b66:	051b      	lsls	r3, r3, #20
 8003b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	e01e      	b.n	8003bac <HAL_ADC_ConfigChannel+0x6ac>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fa93 f3a3 	rbit	r3, r3
 8003b7a:	613b      	str	r3, [r7, #16]
  return result;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d104      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003b86:	2320      	movs	r3, #32
 8003b88:	e006      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x698>
 8003b8a:	bf00      	nop
 8003b8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f003 021f 	and.w	r2, r3, #31
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3b1e      	subs	r3, #30
 8003ba6:	051b      	lsls	r3, r3, #20
 8003ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bac:	430b      	orrs	r3, r1
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f7fe ffd7 	bl	8002b66 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <HAL_ADC_ConfigChannel+0x7bc>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d071      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bc4:	483e      	ldr	r0, [pc, #248]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003bc6:	f7fe fee3 	bl	8002990 <LL_ADC_GetCommonPathInternalCh>
 8003bca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a3c      	ldr	r2, [pc, #240]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_ADC_ConfigChannel+0x6e2>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a3a      	ldr	r2, [pc, #232]	; (8003cc8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d127      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d121      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf6:	d157      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c00:	4619      	mov	r1, r3
 8003c02:	482f      	ldr	r0, [pc, #188]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c04:	f7fe feb1 	bl	800296a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c08:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_ADC_ConfigChannel+0x7cc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	4a30      	ldr	r2, [pc, #192]	; (8003cd0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	099b      	lsrs	r3, r3, #6
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	4613      	mov	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c22:	e002      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f9      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c30:	e03a      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d113      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x764>
 8003c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a22      	ldr	r2, [pc, #136]	; (8003cd8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d02a      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4818      	ldr	r0, [pc, #96]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c5e:	f7fe fe84 	bl	800296a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c62:	e021      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <HAL_ADC_ConfigChannel+0x7dc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d11c      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d116      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d011      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	480c      	ldr	r0, [pc, #48]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c90:	f7fe fe6b 	bl	800296a <LL_ADC_SetCommonPathInternalCh>
 8003c94:	e008      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9a:	f043 0220 	orr.w	r2, r3, #32
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cb0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	37d8      	adds	r7, #216	; 0xd8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	80080000 	.word	0x80080000
 8003cc0:	50000300 	.word	0x50000300
 8003cc4:	c3210000 	.word	0xc3210000
 8003cc8:	90c00010 	.word	0x90c00010
 8003ccc:	20000004 	.word	0x20000004
 8003cd0:	053e2d63 	.word	0x053e2d63
 8003cd4:	c7520000 	.word	0xc7520000
 8003cd8:	50000100 	.word	0x50000100
 8003cdc:	cb840000 	.word	0xcb840000

08003ce0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff f868 	bl	8002dcc <LL_ADC_REG_IsConversionOngoing>
 8003cfc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff f889 	bl	8002e1a <LL_ADC_INJ_IsConversionOngoing>
 8003d08:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d103      	bne.n	8003d18 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8098 	beq.w	8003e48 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02a      	beq.n	8003d7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	7f5b      	ldrb	r3, [r3, #29]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d126      	bne.n	8003d7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7f1b      	ldrb	r3, [r3, #28]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d122      	bne.n	8003d7c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d3a:	e014      	b.n	8003d66 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4a45      	ldr	r2, [pc, #276]	; (8003e54 <ADC_ConversionStop+0x174>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d90d      	bls.n	8003d60 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	f043 0210 	orr.w	r2, r3, #16
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d54:	f043 0201 	orr.w	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e074      	b.n	8003e4a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	3301      	adds	r3, #1
 8003d64:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d1e3      	bne.n	8003d3c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2240      	movs	r2, #64	; 0x40
 8003d7a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d014      	beq.n	8003dac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff f820 	bl	8002dcc <LL_ADC_REG_IsConversionOngoing>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe ffdd 	bl	8002d56 <LL_ADC_IsDisableOngoing>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fffc 	bl	8002da4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d014      	beq.n	8003ddc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff f82f 	bl	8002e1a <LL_ADC_INJ_IsConversionOngoing>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00c      	beq.n	8003ddc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe ffc5 	bl	8002d56 <LL_ADC_IsDisableOngoing>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d104      	bne.n	8003ddc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff f80b 	bl	8002df2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d005      	beq.n	8003dee <ADC_ConversionStop+0x10e>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d105      	bne.n	8003df4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003de8:	230c      	movs	r3, #12
 8003dea:	617b      	str	r3, [r7, #20]
        break;
 8003dec:	e005      	b.n	8003dfa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003dee:	2308      	movs	r3, #8
 8003df0:	617b      	str	r3, [r7, #20]
        break;
 8003df2:	e002      	b.n	8003dfa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003df4:	2304      	movs	r3, #4
 8003df6:	617b      	str	r3, [r7, #20]
        break;
 8003df8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003dfa:	f7fe fd75 	bl	80028e8 <HAL_GetTick>
 8003dfe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e00:	e01b      	b.n	8003e3a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e02:	f7fe fd71 	bl	80028e8 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d914      	bls.n	8003e3a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e007      	b.n	8003e4a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1dc      	bne.n	8003e02 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	a33fffff 	.word	0xa33fffff

08003e58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe ff63 	bl	8002d30 <LL_ADC_IsEnabled>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d14d      	bne.n	8003f0c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <ADC_Enable+0xc0>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	f043 0210 	orr.w	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e039      	b.n	8003f0e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe ff1e 	bl	8002ce0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ea4:	f7fe fd20 	bl	80028e8 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eaa:	e028      	b.n	8003efe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe ff3d 	bl	8002d30 <LL_ADC_IsEnabled>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fe ff0d 	bl	8002ce0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ec6:	f7fe fd0f 	bl	80028e8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d914      	bls.n	8003efe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d00d      	beq.n	8003efe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	f043 0210 	orr.w	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef2:	f043 0201 	orr.w	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e007      	b.n	8003f0e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d1cf      	bne.n	8003eac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	8000003f 	.word	0x8000003f

08003f1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe ff14 	bl	8002d56 <LL_ADC_IsDisableOngoing>
 8003f2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe fefb 	bl	8002d30 <LL_ADC_IsEnabled>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d047      	beq.n	8003fd0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d144      	bne.n	8003fd0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030d 	and.w	r3, r3, #13
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10c      	bne.n	8003f6e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe fed5 	bl	8002d08 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2203      	movs	r2, #3
 8003f64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f66:	f7fe fcbf 	bl	80028e8 <HAL_GetTick>
 8003f6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f6c:	e029      	b.n	8003fc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	f043 0210 	orr.w	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e023      	b.n	8003fd2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f8a:	f7fe fcad 	bl	80028e8 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d914      	bls.n	8003fc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e007      	b.n	8003fd2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1dc      	bne.n	8003f8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <LL_ADC_IsEnabled>:
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <LL_ADC_IsEnabled+0x18>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <LL_ADC_IsEnabled+0x1a>
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_ADC_REG_IsConversionOngoing>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d101      	bne.n	8004018 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b0a1      	sub	sp, #132	; 0x84
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004042:	2302      	movs	r3, #2
 8004044:	e08b      	b.n	800415e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800404e:	2300      	movs	r3, #0
 8004050:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004052:	2300      	movs	r3, #0
 8004054:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800405e:	d102      	bne.n	8004066 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004060:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	e001      	b.n	800406a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	f043 0220 	orr.w	r2, r3, #32
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e06a      	b.n	800415e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff ffb8 	bl	8004000 <LL_ADC_REG_IsConversionOngoing>
 8004090:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ffb2 	bl	8004000 <LL_ADC_REG_IsConversionOngoing>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d14c      	bne.n	800413c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d149      	bne.n	800413c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040a8:	4b30      	ldr	r3, [pc, #192]	; (800416c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80040aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d028      	beq.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040c6:	035b      	lsls	r3, r3, #13
 80040c8:	430b      	orrs	r3, r1
 80040ca:	431a      	orrs	r2, r3
 80040cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040d4:	f7ff ff81 	bl	8003fda <LL_ADC_IsEnabled>
 80040d8:	4604      	mov	r4, r0
 80040da:	4823      	ldr	r0, [pc, #140]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80040dc:	f7ff ff7d 	bl	8003fda <LL_ADC_IsEnabled>
 80040e0:	4603      	mov	r3, r0
 80040e2:	4323      	orrs	r3, r4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d133      	bne.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040f0:	f023 030f 	bic.w	r3, r3, #15
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	6811      	ldr	r1, [r2, #0]
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	431a      	orrs	r2, r3
 8004100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004102:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004104:	e024      	b.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004110:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004112:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004116:	f7ff ff60 	bl	8003fda <LL_ADC_IsEnabled>
 800411a:	4604      	mov	r4, r0
 800411c:	4812      	ldr	r0, [pc, #72]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800411e:	f7ff ff5c 	bl	8003fda <LL_ADC_IsEnabled>
 8004122:	4603      	mov	r3, r0
 8004124:	4323      	orrs	r3, r4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d112      	bne.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800412a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004132:	f023 030f 	bic.w	r3, r3, #15
 8004136:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004138:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800413a:	e009      	b.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800414e:	e000      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004150:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800415a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800415e:	4618      	mov	r0, r3
 8004160:	3784      	adds	r7, #132	; 0x84
 8004162:	46bd      	mov	sp, r7
 8004164:	bd90      	pop	{r4, r7, pc}
 8004166:	bf00      	nop
 8004168:	50000100 	.word	0x50000100
 800416c:	50000300 	.word	0x50000300

08004170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800418c:	4013      	ands	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800419c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <__NVIC_SetPriorityGrouping+0x44>)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	60d3      	str	r3, [r2, #12]
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <__NVIC_GetPriorityGrouping+0x18>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	f003 0307 	and.w	r3, r3, #7
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	db0b      	blt.n	80041fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	f003 021f 	and.w	r2, r3, #31
 80041ec:	4907      	ldr	r1, [pc, #28]	; (800420c <__NVIC_EnableIRQ+0x38>)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	2001      	movs	r0, #1
 80041f6:	fa00 f202 	lsl.w	r2, r0, r2
 80041fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	e000e100 	.word	0xe000e100

08004210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	6039      	str	r1, [r7, #0]
 800421a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004220:	2b00      	cmp	r3, #0
 8004222:	db0a      	blt.n	800423a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	490c      	ldr	r1, [pc, #48]	; (800425c <__NVIC_SetPriority+0x4c>)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	0112      	lsls	r2, r2, #4
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	440b      	add	r3, r1
 8004234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004238:	e00a      	b.n	8004250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4908      	ldr	r1, [pc, #32]	; (8004260 <__NVIC_SetPriority+0x50>)
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	3b04      	subs	r3, #4
 8004248:	0112      	lsls	r2, r2, #4
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	440b      	add	r3, r1
 800424e:	761a      	strb	r2, [r3, #24]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000e100 	.word	0xe000e100
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004264:	b480      	push	{r7}
 8004266:	b089      	sub	sp, #36	; 0x24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f1c3 0307 	rsb	r3, r3, #7
 800427e:	2b04      	cmp	r3, #4
 8004280:	bf28      	it	cs
 8004282:	2304      	movcs	r3, #4
 8004284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	3304      	adds	r3, #4
 800428a:	2b06      	cmp	r3, #6
 800428c:	d902      	bls.n	8004294 <NVIC_EncodePriority+0x30>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3b03      	subs	r3, #3
 8004292:	e000      	b.n	8004296 <NVIC_EncodePriority+0x32>
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43da      	mvns	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	401a      	ands	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	43d9      	mvns	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042bc:	4313      	orrs	r3, r2
         );
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3724      	adds	r7, #36	; 0x24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042dc:	d301      	bcc.n	80042e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042de:	2301      	movs	r3, #1
 80042e0:	e00f      	b.n	8004302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042e2:	4a0a      	ldr	r2, [pc, #40]	; (800430c <SysTick_Config+0x40>)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ea:	210f      	movs	r1, #15
 80042ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042f0:	f7ff ff8e 	bl	8004210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <SysTick_Config+0x40>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <SysTick_Config+0x40>)
 80042fc:	2207      	movs	r2, #7
 80042fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	e000e010 	.word	0xe000e010

08004310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ff29 	bl	8004170 <__NVIC_SetPriorityGrouping>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	4603      	mov	r3, r0
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004334:	f7ff ff40 	bl	80041b8 <__NVIC_GetPriorityGrouping>
 8004338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	6978      	ldr	r0, [r7, #20]
 8004340:	f7ff ff90 	bl	8004264 <NVIC_EncodePriority>
 8004344:	4602      	mov	r2, r0
 8004346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff5f 	bl	8004210 <__NVIC_SetPriority>
}
 8004352:	bf00      	nop
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff33 	bl	80041d4 <__NVIC_EnableIRQ>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff ffa4 	bl	80042cc <SysTick_Config>
 8004384:	4603      	mov	r3, r0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e014      	b.n	80043ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	791b      	ldrb	r3, [r3, #4]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7fd fddb 	bl	8001f6c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	795b      	ldrb	r3, [r3, #5]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_DAC_Start+0x16>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e043      	b.n	8004470 <HAL_DAC_Start+0x9e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2201      	movs	r2, #1
 8004402:	409a      	lsls	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800440c:	2001      	movs	r0, #1
 800440e:	f7fe fa77 	bl	8002900 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10f      	bne.n	8004438 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004422:	2b02      	cmp	r3, #2
 8004424:	d11d      	bne.n	8004462 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	e014      	b.n	8004462 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2102      	movs	r1, #2
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	429a      	cmp	r2, r3
 8004450:	d107      	bne.n	8004462 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0202 	orr.w	r2, r2, #2
 8004460:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	3308      	adds	r3, #8
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e004      	b.n	80044b2 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3314      	adds	r3, #20
 80044b0:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	461a      	mov	r2, r3
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	795b      	ldrb	r3, [r3, #5]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_DAC_ConfigChannel+0x18>
 80044dc:	2302      	movs	r3, #2
 80044de:	e192      	b.n	8004806 <HAL_DAC_ConfigChannel+0x33e>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2202      	movs	r2, #2
 80044ea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d174      	bne.n	80045de <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80044f4:	f7fe f9f8 	bl	80028e8 <HAL_GetTick>
 80044f8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d134      	bne.n	800456a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004500:	e011      	b.n	8004526 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004502:	f7fe f9f1 	bl	80028e8 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d90a      	bls.n	8004526 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f043 0208 	orr.w	r2, r3, #8
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2203      	movs	r2, #3
 8004520:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e16f      	b.n	8004806 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e6      	bne.n	8004502 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004534:	2001      	movs	r0, #1
 8004536:	f7fe f9e3 	bl	8002900 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
 8004544:	e01e      	b.n	8004584 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004546:	f7fe f9cf 	bl	80028e8 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d90a      	bls.n	800456a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f043 0208 	orr.w	r2, r3, #8
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2203      	movs	r2, #3
 8004564:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e14d      	b.n	8004806 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	2b00      	cmp	r3, #0
 8004572:	dbe8      	blt.n	8004546 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004574:	2001      	movs	r0, #1
 8004576:	f7fe f9c3 	bl	8002900 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004582:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	ea02 0103 	and.w	r1, r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	409a      	lsls	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	21ff      	movs	r1, #255	; 0xff
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	ea02 0103 	and.w	r1, r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	409a      	lsls	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d11d      	bne.n	8004622 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	221f      	movs	r2, #31
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fe:	4013      	ands	r3, r2
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	4313      	orrs	r3, r2
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2207      	movs	r2, #7
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463a:	4013      	ands	r3, r2
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d102      	bne.n	800464c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004646:	2300      	movs	r3, #0
 8004648:	623b      	str	r3, [r7, #32]
 800464a:	e00f      	b.n	800466c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d102      	bne.n	800465a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004654:	2301      	movs	r3, #1
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	e008      	b.n	800466c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004662:	2301      	movs	r3, #1
 8004664:	623b      	str	r3, [r7, #32]
 8004666:	e001      	b.n	800466c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004668:	2300      	movs	r3, #0
 800466a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468e:	4013      	ands	r3, r2
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	791b      	ldrb	r3, [r3, #4]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d102      	bne.n	80046a0 <HAL_DAC_ConfigChannel+0x1d8>
 800469a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800469e:	e000      	b.n	80046a2 <HAL_DAC_ConfigChannel+0x1da>
 80046a0:	2300      	movs	r3, #0
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	4013      	ands	r3, r2
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	795b      	ldrb	r3, [r3, #5]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d102      	bne.n	80046cc <HAL_DAC_ConfigChannel+0x204>
 80046c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046ca:	e000      	b.n	80046ce <HAL_DAC_ConfigChannel+0x206>
 80046cc:	2300      	movs	r3, #0
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d114      	bne.n	800470e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80046e4:	f001 fe86 	bl	80063f4 <HAL_RCC_GetHCLKFreq>
 80046e8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4a48      	ldr	r2, [pc, #288]	; (8004810 <HAL_DAC_ConfigChannel+0x348>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d904      	bls.n	80046fc <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
 80046fa:	e00f      	b.n	800471c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	4a45      	ldr	r2, [pc, #276]	; (8004814 <HAL_DAC_ConfigChannel+0x34c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d90a      	bls.n	800471a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
 800470c:	e006      	b.n	800471c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004714:	4313      	orrs	r3, r2
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
 8004718:	e000      	b.n	800471c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800471a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472a:	4313      	orrs	r3, r2
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6819      	ldr	r1, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	400a      	ands	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476e:	4013      	ands	r3, r2
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	4313      	orrs	r3, r2
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004790:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6819      	ldr	r1, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	22c0      	movs	r2, #192	; 0xc0
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43da      	mvns	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	400a      	ands	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	ea02 0103 	and.w	r1, r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	409a      	lsls	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3728      	adds	r7, #40	; 0x28
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	09896800 	.word	0x09896800
 8004814:	04c4b400 	.word	0x04c4b400

08004818 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e08d      	b.n	8004946 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	4b47      	ldr	r3, [pc, #284]	; (8004950 <HAL_DMA_Init+0x138>)
 8004832:	429a      	cmp	r2, r3
 8004834:	d80f      	bhi.n	8004856 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	4b45      	ldr	r3, [pc, #276]	; (8004954 <HAL_DMA_Init+0x13c>)
 800483e:	4413      	add	r3, r2
 8004840:	4a45      	ldr	r2, [pc, #276]	; (8004958 <HAL_DMA_Init+0x140>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	009a      	lsls	r2, r3, #2
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a42      	ldr	r2, [pc, #264]	; (800495c <HAL_DMA_Init+0x144>)
 8004852:	641a      	str	r2, [r3, #64]	; 0x40
 8004854:	e00e      	b.n	8004874 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	4b40      	ldr	r3, [pc, #256]	; (8004960 <HAL_DMA_Init+0x148>)
 800485e:	4413      	add	r3, r2
 8004860:	4a3d      	ldr	r2, [pc, #244]	; (8004958 <HAL_DMA_Init+0x140>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	009a      	lsls	r2, r3, #2
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a3c      	ldr	r2, [pc, #240]	; (8004964 <HAL_DMA_Init+0x14c>)
 8004872:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f8fe 	bl	8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d4:	d102      	bne.n	80048dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048f0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d010      	beq.n	800491c <HAL_DMA_Init+0x104>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d80c      	bhi.n	800491c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f91e 	bl	8004b44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	e008      	b.n	800492e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40020407 	.word	0x40020407
 8004954:	bffdfff8 	.word	0xbffdfff8
 8004958:	cccccccd 	.word	0xcccccccd
 800495c:	40020000 	.word	0x40020000
 8004960:	bffdfbf8 	.word	0xbffdfbf8
 8004964:	40020400 	.word	0x40020400

08004968 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	2204      	movs	r2, #4
 800498a:	409a      	lsls	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d026      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x7a>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d021      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0204 	bic.w	r2, r2, #4
 80049ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c0:	f003 021f 	and.w	r2, r3, #31
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	2104      	movs	r1, #4
 80049ca:	fa01 f202 	lsl.w	r2, r1, r2
 80049ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d071      	beq.n	8004abc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80049e0:	e06c      	b.n	8004abc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2202      	movs	r2, #2
 80049ec:	409a      	lsls	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d02e      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d029      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10b      	bne.n	8004a26 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 020a 	bic.w	r2, r2, #10
 8004a1c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2a:	f003 021f 	and.w	r2, r3, #31
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2102      	movs	r1, #2
 8004a34:	fa01 f202 	lsl.w	r2, r1, r2
 8004a38:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d038      	beq.n	8004abc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a52:	e033      	b.n	8004abc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02a      	beq.n	8004abe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d025      	beq.n	8004abe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 020e 	bic.w	r2, r2, #14
 8004a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	f003 021f 	and.w	r2, r3, #31
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	2101      	movs	r1, #1
 8004a90:	fa01 f202 	lsl.w	r2, r1, r2
 8004a94:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
}
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d802      	bhi.n	8004ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004adc:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e001      	b.n	8004ae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ae4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	3b08      	subs	r3, #8
 8004af2:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	089b      	lsrs	r3, r3, #2
 8004b02:	009a      	lsls	r2, r3, #2
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b12:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40020407 	.word	0x40020407
 8004b34:	40020800 	.word	0x40020800
 8004b38:	40020820 	.word	0x40020820
 8004b3c:	cccccccd 	.word	0xcccccccd
 8004b40:	40020880 	.word	0x40020880

08004b44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b66:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2201      	movs	r2, #1
 8004b72:	409a      	lsls	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	1000823f 	.word	0x1000823f
 8004b88:	40020940 	.word	0x40020940

08004b8c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_FLASH_Lock+0x30>)
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <HAL_FLASH_Lock+0x30>)
 8004b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ba0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_FLASH_Lock+0x30>)
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da01      	bge.n	8004bae <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004bae:	79fb      	ldrb	r3, [r7, #7]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40022000 	.word	0x40022000

08004bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bce:	e15a      	b.n	8004e86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 814c 	beq.w	8004e80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d005      	beq.n	8004c00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d130      	bne.n	8004c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c36:	2201      	movs	r2, #1
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 0201 	and.w	r2, r3, #1
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d017      	beq.n	8004c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d123      	bne.n	8004cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	08da      	lsrs	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3208      	adds	r2, #8
 8004cec:	6939      	ldr	r1, [r7, #16]
 8004cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0203 	and.w	r2, r3, #3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80a6 	beq.w	8004e80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d34:	4b5b      	ldr	r3, [pc, #364]	; (8004ea4 <HAL_GPIO_Init+0x2e4>)
 8004d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d38:	4a5a      	ldr	r2, [pc, #360]	; (8004ea4 <HAL_GPIO_Init+0x2e4>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6613      	str	r3, [r2, #96]	; 0x60
 8004d40:	4b58      	ldr	r3, [pc, #352]	; (8004ea4 <HAL_GPIO_Init+0x2e4>)
 8004d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d4c:	4a56      	ldr	r2, [pc, #344]	; (8004ea8 <HAL_GPIO_Init+0x2e8>)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	089b      	lsrs	r3, r3, #2
 8004d52:	3302      	adds	r3, #2
 8004d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	220f      	movs	r2, #15
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d76:	d01f      	beq.n	8004db8 <HAL_GPIO_Init+0x1f8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a4c      	ldr	r2, [pc, #304]	; (8004eac <HAL_GPIO_Init+0x2ec>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d019      	beq.n	8004db4 <HAL_GPIO_Init+0x1f4>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a4b      	ldr	r2, [pc, #300]	; (8004eb0 <HAL_GPIO_Init+0x2f0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_GPIO_Init+0x1f0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a4a      	ldr	r2, [pc, #296]	; (8004eb4 <HAL_GPIO_Init+0x2f4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00d      	beq.n	8004dac <HAL_GPIO_Init+0x1ec>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a49      	ldr	r2, [pc, #292]	; (8004eb8 <HAL_GPIO_Init+0x2f8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <HAL_GPIO_Init+0x1e8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a48      	ldr	r2, [pc, #288]	; (8004ebc <HAL_GPIO_Init+0x2fc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d101      	bne.n	8004da4 <HAL_GPIO_Init+0x1e4>
 8004da0:	2305      	movs	r3, #5
 8004da2:	e00a      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004da4:	2306      	movs	r3, #6
 8004da6:	e008      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004da8:	2304      	movs	r3, #4
 8004daa:	e006      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004dac:	2303      	movs	r3, #3
 8004dae:	e004      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e002      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004db8:	2300      	movs	r3, #0
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	f002 0203 	and.w	r2, r2, #3
 8004dc0:	0092      	lsls	r2, r2, #2
 8004dc2:	4093      	lsls	r3, r2
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dca:	4937      	ldr	r1, [pc, #220]	; (8004ea8 <HAL_GPIO_Init+0x2e8>)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dd8:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4013      	ands	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dfc:	4a30      	ldr	r2, [pc, #192]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e02:	4b2f      	ldr	r3, [pc, #188]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e26:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e2c:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e50:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4013      	ands	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e7a:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	3301      	adds	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f47f ae9d 	bne.w	8004bd0 <HAL_GPIO_Init+0x10>
  }
}
 8004e96:	bf00      	nop
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	48000400 	.word	0x48000400
 8004eb0:	48000800 	.word	0x48000800
 8004eb4:	48000c00 	.word	0x48000c00
 8004eb8:	48001000 	.word	0x48001000
 8004ebc:	48001400 	.word	0x48001400
 8004ec0:	40010400 	.word	0x40010400

08004ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	887b      	ldrh	r3, [r7, #2]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
 8004ee0:	e001      	b.n	8004ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	807b      	strh	r3, [r7, #2]
 8004f00:	4613      	mov	r3, r2
 8004f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f04:	787b      	ldrb	r3, [r7, #1]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f0a:	887a      	ldrh	r2, [r7, #2]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f10:	e002      	b.n	8004f18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f12:	887a      	ldrh	r2, [r7, #2]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e081      	b.n	800503a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fd f84c 	bl	8001fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2224      	movs	r2, #36	; 0x24
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0201 	bic.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d107      	bne.n	8004f9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	e006      	b.n	8004fac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004faa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d104      	bne.n	8004fbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fe0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69d9      	ldr	r1, [r3, #28]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	4608      	mov	r0, r1
 800504e:	4611      	mov	r1, r2
 8005050:	461a      	mov	r2, r3
 8005052:	4603      	mov	r3, r0
 8005054:	817b      	strh	r3, [r7, #10]
 8005056:	460b      	mov	r3, r1
 8005058:	813b      	strh	r3, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b20      	cmp	r3, #32
 8005068:	f040 80f9 	bne.w	800525e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_I2C_Mem_Write+0x34>
 8005072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005074:	2b00      	cmp	r3, #0
 8005076:	d105      	bne.n	8005084 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800507e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0ed      	b.n	8005260 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <HAL_I2C_Mem_Write+0x4e>
 800508e:	2302      	movs	r3, #2
 8005090:	e0e6      	b.n	8005260 <HAL_I2C_Mem_Write+0x21c>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800509a:	f7fd fc25 	bl	80028e8 <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2319      	movs	r3, #25
 80050a6:	2201      	movs	r2, #1
 80050a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f955 	bl	800535c <I2C_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0d1      	b.n	8005260 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2221      	movs	r2, #33	; 0x21
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2240      	movs	r2, #64	; 0x40
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a3a      	ldr	r2, [r7, #32]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050e4:	88f8      	ldrh	r0, [r7, #6]
 80050e6:	893a      	ldrh	r2, [r7, #8]
 80050e8:	8979      	ldrh	r1, [r7, #10]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	4603      	mov	r3, r0
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f8b9 	bl	800526c <I2C_RequestMemoryWrite>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0a9      	b.n	8005260 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	2bff      	cmp	r3, #255	; 0xff
 8005114:	d90e      	bls.n	8005134 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	22ff      	movs	r2, #255	; 0xff
 800511a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	b2da      	uxtb	r2, r3
 8005122:	8979      	ldrh	r1, [r7, #10]
 8005124:	2300      	movs	r3, #0
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fabd 	bl	80056ac <I2C_TransferConfig>
 8005132:	e00f      	b.n	8005154 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005142:	b2da      	uxtb	r2, r3
 8005144:	8979      	ldrh	r1, [r7, #10]
 8005146:	2300      	movs	r3, #0
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 faac 	bl	80056ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f93f 	bl	80053dc <I2C_WaitOnTXISFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e07b      	b.n	8005260 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	781a      	ldrb	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d034      	beq.n	800520c <HAL_I2C_Mem_Write+0x1c8>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d130      	bne.n	800520c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	2200      	movs	r2, #0
 80051b2:	2180      	movs	r1, #128	; 0x80
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f8d1 	bl	800535c <I2C_WaitOnFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e04d      	b.n	8005260 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2bff      	cmp	r3, #255	; 0xff
 80051cc:	d90e      	bls.n	80051ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	22ff      	movs	r2, #255	; 0xff
 80051d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	8979      	ldrh	r1, [r7, #10]
 80051dc:	2300      	movs	r3, #0
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 fa61 	bl	80056ac <I2C_TransferConfig>
 80051ea:	e00f      	b.n	800520c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	8979      	ldrh	r1, [r7, #10]
 80051fe:	2300      	movs	r3, #0
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fa50 	bl	80056ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d19e      	bne.n	8005154 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f91e 	bl	800545c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e01a      	b.n	8005260 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2220      	movs	r2, #32
 8005230:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6859      	ldr	r1, [r3, #4]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <HAL_I2C_Mem_Write+0x224>)
 800523e:	400b      	ands	r3, r1
 8005240:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e000      	b.n	8005260 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800525e:	2302      	movs	r3, #2
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	fe00e800 	.word	0xfe00e800

0800526c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	4608      	mov	r0, r1
 8005276:	4611      	mov	r1, r2
 8005278:	461a      	mov	r2, r3
 800527a:	4603      	mov	r3, r0
 800527c:	817b      	strh	r3, [r7, #10]
 800527e:	460b      	mov	r3, r1
 8005280:	813b      	strh	r3, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	8979      	ldrh	r1, [r7, #10]
 800528c:	4b20      	ldr	r3, [pc, #128]	; (8005310 <I2C_RequestMemoryWrite+0xa4>)
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fa09 	bl	80056ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	69b9      	ldr	r1, [r7, #24]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f89c 	bl	80053dc <I2C_WaitOnTXISFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e02c      	b.n	8005308 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d105      	bne.n	80052c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052b4:	893b      	ldrh	r3, [r7, #8]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	629a      	str	r2, [r3, #40]	; 0x28
 80052be:	e015      	b.n	80052ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052c0:	893b      	ldrh	r3, [r7, #8]
 80052c2:	0a1b      	lsrs	r3, r3, #8
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	69b9      	ldr	r1, [r7, #24]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f882 	bl	80053dc <I2C_WaitOnTXISFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e012      	b.n	8005308 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052e2:	893b      	ldrh	r3, [r7, #8]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2200      	movs	r2, #0
 80052f4:	2180      	movs	r1, #128	; 0x80
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f830 	bl	800535c <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	80002000 	.word	0x80002000

08005314 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b02      	cmp	r3, #2
 8005328:	d103      	bne.n	8005332 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2200      	movs	r2, #0
 8005330:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d007      	beq.n	8005350 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	619a      	str	r2, [r3, #24]
  }
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800536c:	e022      	b.n	80053b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005374:	d01e      	beq.n	80053b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005376:	f7fd fab7 	bl	80028e8 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d302      	bcc.n	800538c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d113      	bne.n	80053b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	f043 0220 	orr.w	r2, r3, #32
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e00f      	b.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4013      	ands	r3, r2
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	bf0c      	ite	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2300      	movne	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d0cd      	beq.n	800536e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053e8:	e02c      	b.n	8005444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f870 	bl	80054d4 <I2C_IsErrorOccurred>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e02a      	b.n	8005454 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005404:	d01e      	beq.n	8005444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005406:	f7fd fa6f 	bl	80028e8 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	429a      	cmp	r2, r3
 8005414:	d302      	bcc.n	800541c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d113      	bne.n	8005444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e007      	b.n	8005454 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b02      	cmp	r3, #2
 8005450:	d1cb      	bne.n	80053ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005468:	e028      	b.n	80054bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f830 	bl	80054d4 <I2C_IsErrorOccurred>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e026      	b.n	80054cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547e:	f7fd fa33 	bl	80028e8 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	429a      	cmp	r2, r3
 800548c:	d302      	bcc.n	8005494 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d113      	bne.n	80054bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	f043 0220 	orr.w	r2, r3, #32
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e007      	b.n	80054cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d1cf      	bne.n	800546a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	; 0x28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d075      	beq.n	80055ec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2210      	movs	r2, #16
 8005506:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005508:	e056      	b.n	80055b8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005510:	d052      	beq.n	80055b8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fd f9e9 	bl	80028e8 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <I2C_IsErrorOccurred+0x54>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d147      	bne.n	80055b8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005532:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800553a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554a:	d12e      	bne.n	80055aa <I2C_IsErrorOccurred+0xd6>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005552:	d02a      	beq.n	80055aa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	2b20      	cmp	r3, #32
 8005558:	d027      	beq.n	80055aa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005568:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800556a:	f7fd f9bd 	bl	80028e8 <HAL_GetTick>
 800556e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005570:	e01b      	b.n	80055aa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005572:	f7fd f9b9 	bl	80028e8 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b19      	cmp	r3, #25
 800557e:	d914      	bls.n	80055aa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d1dc      	bne.n	8005572 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d003      	beq.n	80055ce <I2C_IsErrorOccurred+0xfa>
 80055c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d09d      	beq.n	800550a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80055ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2220      	movs	r2, #32
 80055dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	f043 0304 	orr.w	r3, r3, #4
 80055e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800560e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	f043 0308 	orr.w	r3, r3, #8
 8005626:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005652:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800565a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800565e:	2b00      	cmp	r3, #0
 8005660:	d01c      	beq.n	800569c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff fe56 	bl	8005314 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <I2C_IsErrorOccurred+0x1d4>)
 8005674:	400b      	ands	r3, r1
 8005676:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	431a      	orrs	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800569c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3728      	adds	r7, #40	; 0x28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	fe00e800 	.word	0xfe00e800

080056ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	607b      	str	r3, [r7, #4]
 80056b6:	460b      	mov	r3, r1
 80056b8:	817b      	strh	r3, [r7, #10]
 80056ba:	4613      	mov	r3, r2
 80056bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056be:	897b      	ldrh	r3, [r7, #10]
 80056c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056c4:	7a7b      	ldrb	r3, [r7, #9]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056cc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056da:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	0d5b      	lsrs	r3, r3, #21
 80056e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80056ea:	4b08      	ldr	r3, [pc, #32]	; (800570c <I2C_TransferConfig+0x60>)
 80056ec:	430b      	orrs	r3, r1
 80056ee:	43db      	mvns	r3, r3
 80056f0:	ea02 0103 	and.w	r1, r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	03ff63ff 	.word	0x03ff63ff

08005710 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b20      	cmp	r3, #32
 8005724:	d138      	bne.n	8005798 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005730:	2302      	movs	r3, #2
 8005732:	e032      	b.n	800579a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2224      	movs	r2, #36	; 0x24
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005762:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	e000      	b.n	800579a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005798:	2302      	movs	r3, #2
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d139      	bne.n	8005830 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e033      	b.n	8005832 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2224      	movs	r2, #36	; 0x24
 80057d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	e000      	b.n	8005832 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005830:	2302      	movs	r3, #2
  }
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8005848:	4b2b      	ldr	r3, [pc, #172]	; (80058f8 <HAL_PWR_ConfigPVD+0xb8>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f023 020e 	bic.w	r2, r3, #14
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4928      	ldr	r1, [pc, #160]	; (80058f8 <HAL_PWR_ConfigPVD+0xb8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800585a:	4b28      	ldr	r3, [pc, #160]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4a27      	ldr	r2, [pc, #156]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 8005860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005864:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8005866:	4b25      	ldr	r3, [pc, #148]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a24      	ldr	r2, [pc, #144]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 800586c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005870:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8005872:	4b22      	ldr	r3, [pc, #136]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	4a21      	ldr	r2, [pc, #132]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 8005878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800587c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800587e:	4b1f      	ldr	r3, [pc, #124]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	4a1e      	ldr	r2, [pc, #120]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 8005884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005888:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8005896:	4b19      	ldr	r3, [pc, #100]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a18      	ldr	r2, [pc, #96]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 800589c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a0:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4a12      	ldr	r2, [pc, #72]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 80058b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b8:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80058c6:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d0:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80058de:	4b07      	ldr	r3, [pc, #28]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	4a06      	ldr	r2, [pc, #24]	; (80058fc <HAL_PWR_ConfigPVD+0xbc>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e8:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40007000 	.word	0x40007000
 80058fc:	40010400 	.word	0x40010400

08005900 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_PWR_EnablePVD+0x1c>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4a04      	ldr	r2, [pc, #16]	; (800591c <HAL_PWR_EnablePVD+0x1c>)
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	6053      	str	r3, [r2, #4]
}
 8005910:	bf00      	nop
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40007000 	.word	0x40007000

08005920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d141      	bne.n	80059b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800592e:	4b4b      	ldr	r3, [pc, #300]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593a:	d131      	bne.n	80059a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800593c:	4b47      	ldr	r3, [pc, #284]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005942:	4a46      	ldr	r2, [pc, #280]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005948:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800594c:	4b43      	ldr	r3, [pc, #268]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005954:	4a41      	ldr	r2, [pc, #260]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800595a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800595c:	4b40      	ldr	r3, [pc, #256]	; (8005a60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2232      	movs	r2, #50	; 0x32
 8005962:	fb02 f303 	mul.w	r3, r2, r3
 8005966:	4a3f      	ldr	r2, [pc, #252]	; (8005a64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005968:	fba2 2303 	umull	r2, r3, r2, r3
 800596c:	0c9b      	lsrs	r3, r3, #18
 800596e:	3301      	adds	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005972:	e002      	b.n	800597a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3b01      	subs	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800597a:	4b38      	ldr	r3, [pc, #224]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005986:	d102      	bne.n	800598e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f2      	bne.n	8005974 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800598e:	4b33      	ldr	r3, [pc, #204]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599a:	d158      	bne.n	8005a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e057      	b.n	8005a50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059a0:	4b2e      	ldr	r3, [pc, #184]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059a6:	4a2d      	ldr	r2, [pc, #180]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80059b0:	e04d      	b.n	8005a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b8:	d141      	bne.n	8005a3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059ba:	4b28      	ldr	r3, [pc, #160]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c6:	d131      	bne.n	8005a2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059c8:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ce:	4a23      	ldr	r2, [pc, #140]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059d8:	4b20      	ldr	r3, [pc, #128]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059e0:	4a1e      	ldr	r2, [pc, #120]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059e8:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2232      	movs	r2, #50	; 0x32
 80059ee:	fb02 f303 	mul.w	r3, r2, r3
 80059f2:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059f4:	fba2 2303 	umull	r2, r3, r2, r3
 80059f8:	0c9b      	lsrs	r3, r3, #18
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059fe:	e002      	b.n	8005a06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a12:	d102      	bne.n	8005a1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f2      	bne.n	8005a00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a26:	d112      	bne.n	8005a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e011      	b.n	8005a50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a32:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a3c:	e007      	b.n	8005a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a3e:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a46:	4a05      	ldr	r2, [pc, #20]	; (8005a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40007000 	.word	0x40007000
 8005a60:	20000004 	.word	0x20000004
 8005a64:	431bde83 	.word	0x431bde83

08005a68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a76:	6093      	str	r3, [r2, #8]
}
 8005a78:	bf00      	nop
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40007000 	.word	0x40007000

08005a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e306      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d075      	beq.n	8005b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aa6:	4b97      	ldr	r3, [pc, #604]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
 8005aae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ab0:	4b94      	ldr	r3, [pc, #592]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b0c      	cmp	r3, #12
 8005abe:	d102      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x3e>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d002      	beq.n	8005acc <HAL_RCC_OscConfig+0x44>
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d10b      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005acc:	4b8d      	ldr	r3, [pc, #564]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d05b      	beq.n	8005b90 <HAL_RCC_OscConfig+0x108>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d157      	bne.n	8005b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e2e1      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aec:	d106      	bne.n	8005afc <HAL_RCC_OscConfig+0x74>
 8005aee:	4b85      	ldr	r3, [pc, #532]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a84      	ldr	r2, [pc, #528]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	e01d      	b.n	8005b38 <HAL_RCC_OscConfig+0xb0>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b04:	d10c      	bne.n	8005b20 <HAL_RCC_OscConfig+0x98>
 8005b06:	4b7f      	ldr	r3, [pc, #508]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a7e      	ldr	r2, [pc, #504]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	4b7c      	ldr	r3, [pc, #496]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a7b      	ldr	r2, [pc, #492]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	e00b      	b.n	8005b38 <HAL_RCC_OscConfig+0xb0>
 8005b20:	4b78      	ldr	r3, [pc, #480]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a77      	ldr	r2, [pc, #476]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	4b75      	ldr	r3, [pc, #468]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a74      	ldr	r2, [pc, #464]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d013      	beq.n	8005b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b40:	f7fc fed2 	bl	80028e8 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b48:	f7fc fece 	bl	80028e8 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b64      	cmp	r3, #100	; 0x64
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e2a6      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b5a:	4b6a      	ldr	r3, [pc, #424]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0f0      	beq.n	8005b48 <HAL_RCC_OscConfig+0xc0>
 8005b66:	e014      	b.n	8005b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b68:	f7fc febe 	bl	80028e8 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b70:	f7fc feba 	bl	80028e8 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b64      	cmp	r3, #100	; 0x64
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e292      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b82:	4b60      	ldr	r3, [pc, #384]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f0      	bne.n	8005b70 <HAL_RCC_OscConfig+0xe8>
 8005b8e:	e000      	b.n	8005b92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d075      	beq.n	8005c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b9e:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ba8:	4b56      	ldr	r3, [pc, #344]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	2b0c      	cmp	r3, #12
 8005bb6:	d102      	bne.n	8005bbe <HAL_RCC_OscConfig+0x136>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d002      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x13c>
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d11f      	bne.n	8005c04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bc4:	4b4f      	ldr	r3, [pc, #316]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_RCC_OscConfig+0x154>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e265      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bdc:	4b49      	ldr	r3, [pc, #292]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	061b      	lsls	r3, r3, #24
 8005bea:	4946      	ldr	r1, [pc, #280]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005bf0:	4b45      	ldr	r3, [pc, #276]	; (8005d08 <HAL_RCC_OscConfig+0x280>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fc fe2b 	bl	8002850 <HAL_InitTick>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d043      	beq.n	8005c88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e251      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d023      	beq.n	8005c54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c0c:	4b3d      	ldr	r3, [pc, #244]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a3c      	ldr	r2, [pc, #240]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c18:	f7fc fe66 	bl	80028e8 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c20:	f7fc fe62 	bl	80028e8 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e23a      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c32:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f0      	beq.n	8005c20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c3e:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	061b      	lsls	r3, r3, #24
 8005c4c:	492d      	ldr	r1, [pc, #180]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	604b      	str	r3, [r1, #4]
 8005c52:	e01a      	b.n	8005c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c54:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fc fe42 	bl	80028e8 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c68:	f7fc fe3e 	bl	80028e8 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e216      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c7a:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x1e0>
 8005c86:	e000      	b.n	8005c8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d041      	beq.n	8005d1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01c      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c9e:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca4:	4a17      	ldr	r2, [pc, #92]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cae:	f7fc fe1b 	bl	80028e8 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cb6:	f7fc fe17 	bl	80028e8 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e1ef      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cc8:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0ef      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x22e>
 8005cd6:	e020      	b.n	8005d1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <HAL_RCC_OscConfig+0x27c>)
 8005ce0:	f023 0301 	bic.w	r3, r3, #1
 8005ce4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce8:	f7fc fdfe 	bl	80028e8 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cee:	e00d      	b.n	8005d0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf0:	f7fc fdfa 	bl	80028e8 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d906      	bls.n	8005d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e1d2      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
 8005d02:	bf00      	nop
 8005d04:	40021000 	.word	0x40021000
 8005d08:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d0c:	4b8c      	ldr	r3, [pc, #560]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1ea      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80a6 	beq.w	8005e74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d2c:	4b84      	ldr	r3, [pc, #528]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_OscConfig+0x2b4>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <HAL_RCC_OscConfig+0x2b6>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00d      	beq.n	8005d5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d42:	4b7f      	ldr	r3, [pc, #508]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	4a7e      	ldr	r2, [pc, #504]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d4e:	4b7c      	ldr	r3, [pc, #496]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d5e:	4b79      	ldr	r3, [pc, #484]	; (8005f44 <HAL_RCC_OscConfig+0x4bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d118      	bne.n	8005d9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d6a:	4b76      	ldr	r3, [pc, #472]	; (8005f44 <HAL_RCC_OscConfig+0x4bc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a75      	ldr	r2, [pc, #468]	; (8005f44 <HAL_RCC_OscConfig+0x4bc>)
 8005d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d76:	f7fc fdb7 	bl	80028e8 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7e:	f7fc fdb3 	bl	80028e8 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e18b      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d90:	4b6c      	ldr	r3, [pc, #432]	; (8005f44 <HAL_RCC_OscConfig+0x4bc>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f0      	beq.n	8005d7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d108      	bne.n	8005db6 <HAL_RCC_OscConfig+0x32e>
 8005da4:	4b66      	ldr	r3, [pc, #408]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005daa:	4a65      	ldr	r2, [pc, #404]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005db4:	e024      	b.n	8005e00 <HAL_RCC_OscConfig+0x378>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d110      	bne.n	8005de0 <HAL_RCC_OscConfig+0x358>
 8005dbe:	4b60      	ldr	r3, [pc, #384]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc4:	4a5e      	ldr	r2, [pc, #376]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005dc6:	f043 0304 	orr.w	r3, r3, #4
 8005dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dce:	4b5c      	ldr	r3, [pc, #368]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd4:	4a5a      	ldr	r2, [pc, #360]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005dd6:	f043 0301 	orr.w	r3, r3, #1
 8005dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dde:	e00f      	b.n	8005e00 <HAL_RCC_OscConfig+0x378>
 8005de0:	4b57      	ldr	r3, [pc, #348]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de6:	4a56      	ldr	r2, [pc, #344]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005de8:	f023 0301 	bic.w	r3, r3, #1
 8005dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005df0:	4b53      	ldr	r3, [pc, #332]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df6:	4a52      	ldr	r2, [pc, #328]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005df8:	f023 0304 	bic.w	r3, r3, #4
 8005dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d016      	beq.n	8005e36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e08:	f7fc fd6e 	bl	80028e8 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e0e:	e00a      	b.n	8005e26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e10:	f7fc fd6a 	bl	80028e8 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e140      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e26:	4b46      	ldr	r3, [pc, #280]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0ed      	beq.n	8005e10 <HAL_RCC_OscConfig+0x388>
 8005e34:	e015      	b.n	8005e62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e36:	f7fc fd57 	bl	80028e8 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e3c:	e00a      	b.n	8005e54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3e:	f7fc fd53 	bl	80028e8 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e129      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e54:	4b3a      	ldr	r3, [pc, #232]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1ed      	bne.n	8005e3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e62:	7ffb      	ldrb	r3, [r7, #31]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d105      	bne.n	8005e74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e68:	4b35      	ldr	r3, [pc, #212]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6c:	4a34      	ldr	r2, [pc, #208]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d03c      	beq.n	8005efa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01c      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e88:	4b2d      	ldr	r3, [pc, #180]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e8e:	4a2c      	ldr	r2, [pc, #176]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005e90:	f043 0301 	orr.w	r3, r3, #1
 8005e94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e98:	f7fc fd26 	bl	80028e8 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ea0:	f7fc fd22 	bl	80028e8 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e0fa      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eb2:	4b23      	ldr	r3, [pc, #140]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0ef      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x418>
 8005ec0:	e01b      	b.n	8005efa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ec2:	4b1f      	ldr	r3, [pc, #124]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ec8:	4a1d      	ldr	r2, [pc, #116]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005eca:	f023 0301 	bic.w	r3, r3, #1
 8005ece:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed2:	f7fc fd09 	bl	80028e8 <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005eda:	f7fc fd05 	bl	80028e8 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e0dd      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1ef      	bne.n	8005eda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80d1 	beq.w	80060a6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 030c 	and.w	r3, r3, #12
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	f000 808b 	beq.w	8006028 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d15e      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a08      	ldr	r2, [pc, #32]	; (8005f40 <HAL_RCC_OscConfig+0x4b8>)
 8005f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f26:	f7fc fcdf 	bl	80028e8 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f2c:	e00c      	b.n	8005f48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f2e:	f7fc fcdb 	bl	80028e8 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d905      	bls.n	8005f48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e0b3      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f48:	4b59      	ldr	r3, [pc, #356]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1ec      	bne.n	8005f2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f54:	4b56      	ldr	r3, [pc, #344]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	4b56      	ldr	r3, [pc, #344]	; (80060b4 <HAL_RCC_OscConfig+0x62c>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6a11      	ldr	r1, [r2, #32]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f64:	3a01      	subs	r2, #1
 8005f66:	0112      	lsls	r2, r2, #4
 8005f68:	4311      	orrs	r1, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005f6e:	0212      	lsls	r2, r2, #8
 8005f70:	4311      	orrs	r1, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f76:	0852      	lsrs	r2, r2, #1
 8005f78:	3a01      	subs	r2, #1
 8005f7a:	0552      	lsls	r2, r2, #21
 8005f7c:	4311      	orrs	r1, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f82:	0852      	lsrs	r2, r2, #1
 8005f84:	3a01      	subs	r2, #1
 8005f86:	0652      	lsls	r2, r2, #25
 8005f88:	4311      	orrs	r1, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f8e:	06d2      	lsls	r2, r2, #27
 8005f90:	430a      	orrs	r2, r1
 8005f92:	4947      	ldr	r1, [pc, #284]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f98:	4b45      	ldr	r3, [pc, #276]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a44      	ldr	r2, [pc, #272]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fa2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fa4:	4b42      	ldr	r3, [pc, #264]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4a41      	ldr	r2, [pc, #260]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fc fc9a 	bl	80028e8 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fc fc96 	bl	80028e8 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e06e      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fca:	4b39      	ldr	r3, [pc, #228]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x530>
 8005fd6:	e066      	b.n	80060a6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd8:	4b35      	ldr	r3, [pc, #212]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a34      	ldr	r2, [pc, #208]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fe2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005fe4:	4b32      	ldr	r3, [pc, #200]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4a31      	ldr	r2, [pc, #196]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005ff0:	4b2f      	ldr	r3, [pc, #188]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4a2e      	ldr	r2, [pc, #184]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8005ff6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006000:	f7fc fc72 	bl	80028e8 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006008:	f7fc fc6e 	bl	80028e8 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e046      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800601a:	4b25      	ldr	r3, [pc, #148]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f0      	bne.n	8006008 <HAL_RCC_OscConfig+0x580>
 8006026:	e03e      	b.n	80060a6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e039      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006034:	4b1e      	ldr	r3, [pc, #120]	; (80060b0 <HAL_RCC_OscConfig+0x628>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f003 0203 	and.w	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	429a      	cmp	r2, r3
 8006046:	d12c      	bne.n	80060a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	3b01      	subs	r3, #1
 8006054:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006056:	429a      	cmp	r2, r3
 8006058:	d123      	bne.n	80060a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006064:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006066:	429a      	cmp	r2, r3
 8006068:	d11b      	bne.n	80060a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006076:	429a      	cmp	r2, r3
 8006078:	d113      	bne.n	80060a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	3b01      	subs	r3, #1
 8006088:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800608a:	429a      	cmp	r2, r3
 800608c:	d109      	bne.n	80060a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	085b      	lsrs	r3, r3, #1
 800609a:	3b01      	subs	r3, #1
 800609c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800609e:	429a      	cmp	r2, r3
 80060a0:	d001      	beq.n	80060a6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3720      	adds	r7, #32
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40021000 	.word	0x40021000
 80060b4:	019f800c 	.word	0x019f800c

080060b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e11e      	b.n	800630e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060d0:	4b91      	ldr	r3, [pc, #580]	; (8006318 <HAL_RCC_ClockConfig+0x260>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d910      	bls.n	8006100 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060de:	4b8e      	ldr	r3, [pc, #568]	; (8006318 <HAL_RCC_ClockConfig+0x260>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 020f 	bic.w	r2, r3, #15
 80060e6:	498c      	ldr	r1, [pc, #560]	; (8006318 <HAL_RCC_ClockConfig+0x260>)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ee:	4b8a      	ldr	r3, [pc, #552]	; (8006318 <HAL_RCC_ClockConfig+0x260>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e106      	b.n	800630e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d073      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b03      	cmp	r3, #3
 8006112:	d129      	bne.n	8006168 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006114:	4b81      	ldr	r3, [pc, #516]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0f4      	b.n	800630e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006124:	f000 f972 	bl	800640c <RCC_GetSysClockFreqFromPLLSource>
 8006128:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4a7c      	ldr	r2, [pc, #496]	; (8006320 <HAL_RCC_ClockConfig+0x268>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d93f      	bls.n	80061b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006132:	4b7a      	ldr	r3, [pc, #488]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006146:	2b00      	cmp	r3, #0
 8006148:	d033      	beq.n	80061b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800614e:	2b00      	cmp	r3, #0
 8006150:	d12f      	bne.n	80061b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006152:	4b72      	ldr	r3, [pc, #456]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615a:	4a70      	ldr	r2, [pc, #448]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 800615c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006160:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	e024      	b.n	80061b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d107      	bne.n	8006180 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006170:	4b6a      	ldr	r3, [pc, #424]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0c6      	b.n	800630e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006180:	4b66      	ldr	r3, [pc, #408]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0be      	b.n	800630e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006190:	f000 f8ce 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 8006194:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4a61      	ldr	r2, [pc, #388]	; (8006320 <HAL_RCC_ClockConfig+0x268>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d909      	bls.n	80061b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800619e:	4b5f      	ldr	r3, [pc, #380]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061a6:	4a5d      	ldr	r2, [pc, #372]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 80061a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80061ae:	2380      	movs	r3, #128	; 0x80
 80061b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061b2:	4b5a      	ldr	r3, [pc, #360]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f023 0203 	bic.w	r2, r3, #3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	4957      	ldr	r1, [pc, #348]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c4:	f7fc fb90 	bl	80028e8 <HAL_GetTick>
 80061c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ca:	e00a      	b.n	80061e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061cc:	f7fc fb8c 	bl	80028e8 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061da:	4293      	cmp	r3, r2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e095      	b.n	800630e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e2:	4b4e      	ldr	r3, [pc, #312]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 020c 	and.w	r2, r3, #12
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d1eb      	bne.n	80061cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d023      	beq.n	8006248 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800620c:	4b43      	ldr	r3, [pc, #268]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a42      	ldr	r2, [pc, #264]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006216:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006224:	4b3d      	ldr	r3, [pc, #244]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800622c:	4a3b      	ldr	r2, [pc, #236]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 800622e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006232:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006234:	4b39      	ldr	r3, [pc, #228]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	4936      	ldr	r1, [pc, #216]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006242:	4313      	orrs	r3, r2
 8006244:	608b      	str	r3, [r1, #8]
 8006246:	e008      	b.n	800625a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b80      	cmp	r3, #128	; 0x80
 800624c:	d105      	bne.n	800625a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800624e:	4b33      	ldr	r3, [pc, #204]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	4a32      	ldr	r2, [pc, #200]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 8006254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006258:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800625a:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <HAL_RCC_ClockConfig+0x260>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d21d      	bcs.n	80062a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006268:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <HAL_RCC_ClockConfig+0x260>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f023 020f 	bic.w	r2, r3, #15
 8006270:	4929      	ldr	r1, [pc, #164]	; (8006318 <HAL_RCC_ClockConfig+0x260>)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	4313      	orrs	r3, r2
 8006276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006278:	f7fc fb36 	bl	80028e8 <HAL_GetTick>
 800627c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800627e:	e00a      	b.n	8006296 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006280:	f7fc fb32 	bl	80028e8 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	f241 3288 	movw	r2, #5000	; 0x1388
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e03b      	b.n	800630e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006296:	4b20      	ldr	r3, [pc, #128]	; (8006318 <HAL_RCC_ClockConfig+0x260>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d1ed      	bne.n	8006280 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062b0:	4b1a      	ldr	r3, [pc, #104]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4917      	ldr	r1, [pc, #92]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	490f      	ldr	r1, [pc, #60]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062e2:	f000 f825 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 80062e6:	4602      	mov	r2, r0
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <HAL_RCC_ClockConfig+0x264>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	490c      	ldr	r1, [pc, #48]	; (8006324 <HAL_RCC_ClockConfig+0x26c>)
 80062f4:	5ccb      	ldrb	r3, [r1, r3]
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	fa22 f303 	lsr.w	r3, r2, r3
 80062fe:	4a0a      	ldr	r2, [pc, #40]	; (8006328 <HAL_RCC_ClockConfig+0x270>)
 8006300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006302:	4b0a      	ldr	r3, [pc, #40]	; (800632c <HAL_RCC_ClockConfig+0x274>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7fc faa2 	bl	8002850 <HAL_InitTick>
 800630c:	4603      	mov	r3, r0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40022000 	.word	0x40022000
 800631c:	40021000 	.word	0x40021000
 8006320:	04c4b400 	.word	0x04c4b400
 8006324:	08007d4c 	.word	0x08007d4c
 8006328:	20000004 	.word	0x20000004
 800632c:	20000018 	.word	0x20000018

08006330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006336:	4b2c      	ldr	r3, [pc, #176]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 030c 	and.w	r3, r3, #12
 800633e:	2b04      	cmp	r3, #4
 8006340:	d102      	bne.n	8006348 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006342:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	e047      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006348:	4b27      	ldr	r3, [pc, #156]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 030c 	and.w	r3, r3, #12
 8006350:	2b08      	cmp	r3, #8
 8006352:	d102      	bne.n	800635a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006354:	4b26      	ldr	r3, [pc, #152]	; (80063f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	e03e      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800635a:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 030c 	and.w	r3, r3, #12
 8006362:	2b0c      	cmp	r3, #12
 8006364:	d136      	bne.n	80063d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006366:	4b20      	ldr	r3, [pc, #128]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006370:	4b1d      	ldr	r3, [pc, #116]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	3301      	adds	r3, #1
 800637c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d10c      	bne.n	800639e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006384:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	fbb2 f3f3 	udiv	r3, r2, r3
 800638c:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800638e:	68d2      	ldr	r2, [r2, #12]
 8006390:	0a12      	lsrs	r2, r2, #8
 8006392:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006396:	fb02 f303 	mul.w	r3, r2, r3
 800639a:	617b      	str	r3, [r7, #20]
      break;
 800639c:	e00c      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800639e:	4a13      	ldr	r2, [pc, #76]	; (80063ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a6:	4a10      	ldr	r2, [pc, #64]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063a8:	68d2      	ldr	r2, [r2, #12]
 80063aa:	0a12      	lsrs	r2, r2, #8
 80063ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063b0:	fb02 f303 	mul.w	r3, r2, r3
 80063b4:	617b      	str	r3, [r7, #20]
      break;
 80063b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063b8:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	0e5b      	lsrs	r3, r3, #25
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	3301      	adds	r3, #1
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	e001      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80063d8:	693b      	ldr	r3, [r7, #16]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40021000 	.word	0x40021000
 80063ec:	00f42400 	.word	0x00f42400
 80063f0:	02dc6c00 	.word	0x02dc6c00

080063f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063f8:	4b03      	ldr	r3, [pc, #12]	; (8006408 <HAL_RCC_GetHCLKFreq+0x14>)
 80063fa:	681b      	ldr	r3, [r3, #0]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	20000004 	.word	0x20000004

0800640c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006412:	4b1e      	ldr	r3, [pc, #120]	; (800648c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800641c:	4b1b      	ldr	r3, [pc, #108]	; (800648c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	091b      	lsrs	r3, r3, #4
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b03      	cmp	r3, #3
 800642e:	d10c      	bne.n	800644a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006430:	4a17      	ldr	r2, [pc, #92]	; (8006490 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	fbb2 f3f3 	udiv	r3, r2, r3
 8006438:	4a14      	ldr	r2, [pc, #80]	; (800648c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800643a:	68d2      	ldr	r2, [r2, #12]
 800643c:	0a12      	lsrs	r2, r2, #8
 800643e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006442:	fb02 f303 	mul.w	r3, r2, r3
 8006446:	617b      	str	r3, [r7, #20]
    break;
 8006448:	e00c      	b.n	8006464 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800644a:	4a12      	ldr	r2, [pc, #72]	; (8006494 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	4a0e      	ldr	r2, [pc, #56]	; (800648c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006454:	68d2      	ldr	r2, [r2, #12]
 8006456:	0a12      	lsrs	r2, r2, #8
 8006458:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800645c:	fb02 f303 	mul.w	r3, r2, r3
 8006460:	617b      	str	r3, [r7, #20]
    break;
 8006462:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	0e5b      	lsrs	r3, r3, #25
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	3301      	adds	r3, #1
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800647e:	687b      	ldr	r3, [r7, #4]
}
 8006480:	4618      	mov	r0, r3
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	40021000 	.word	0x40021000
 8006490:	02dc6c00 	.word	0x02dc6c00
 8006494:	00f42400 	.word	0x00f42400

08006498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064a0:	2300      	movs	r3, #0
 80064a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064a4:	2300      	movs	r3, #0
 80064a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8098 	beq.w	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064b6:	2300      	movs	r3, #0
 80064b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ba:	4b43      	ldr	r3, [pc, #268]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10d      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c6:	4b40      	ldr	r3, [pc, #256]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ca:	4a3f      	ldr	r2, [pc, #252]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d0:	6593      	str	r3, [r2, #88]	; 0x58
 80064d2:	4b3d      	ldr	r3, [pc, #244]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064da:	60bb      	str	r3, [r7, #8]
 80064dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064de:	2301      	movs	r3, #1
 80064e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064e2:	4b3a      	ldr	r3, [pc, #232]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a39      	ldr	r2, [pc, #228]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064ee:	f7fc f9fb 	bl	80028e8 <HAL_GetTick>
 80064f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064f4:	e009      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f6:	f7fc f9f7 	bl	80028e8 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d902      	bls.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	74fb      	strb	r3, [r7, #19]
        break;
 8006508:	e005      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800650a:	4b30      	ldr	r3, [pc, #192]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0ef      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006516:	7cfb      	ldrb	r3, [r7, #19]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d159      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800651c:	4b2a      	ldr	r3, [pc, #168]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800651e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006526:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d01e      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	429a      	cmp	r2, r3
 8006536:	d019      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006538:	4b23      	ldr	r3, [pc, #140]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006542:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006544:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654a:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800654c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006554:	4b1c      	ldr	r3, [pc, #112]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655a:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800655c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006564:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d016      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006576:	f7fc f9b7 	bl	80028e8 <HAL_GetTick>
 800657a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800657c:	e00b      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657e:	f7fc f9b3 	bl	80028e8 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	f241 3288 	movw	r2, #5000	; 0x1388
 800658c:	4293      	cmp	r3, r2
 800658e:	d902      	bls.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	74fb      	strb	r3, [r7, #19]
            break;
 8006594:	e006      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006596:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0ec      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80065a4:	7cfb      	ldrb	r3, [r7, #19]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065aa:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	4903      	ldr	r1, [pc, #12]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80065c0:	e008      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065c2:	7cfb      	ldrb	r3, [r7, #19]
 80065c4:	74bb      	strb	r3, [r7, #18]
 80065c6:	e005      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80065c8:	40021000 	.word	0x40021000
 80065cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d0:	7cfb      	ldrb	r3, [r7, #19]
 80065d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065d4:	7c7b      	ldrb	r3, [r7, #17]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d105      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065da:	4ba6      	ldr	r3, [pc, #664]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065de:	4aa5      	ldr	r2, [pc, #660]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065f2:	4ba0      	ldr	r3, [pc, #640]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f8:	f023 0203 	bic.w	r2, r3, #3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	499c      	ldr	r1, [pc, #624]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006614:	4b97      	ldr	r3, [pc, #604]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f023 020c 	bic.w	r2, r3, #12
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	4994      	ldr	r1, [pc, #592]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006636:	4b8f      	ldr	r3, [pc, #572]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	498b      	ldr	r1, [pc, #556]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006658:	4b86      	ldr	r3, [pc, #536]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	4983      	ldr	r1, [pc, #524]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800667a:	4b7e      	ldr	r3, [pc, #504]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800667c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006680:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	497a      	ldr	r1, [pc, #488]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800669c:	4b75      	ldr	r3, [pc, #468]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	4972      	ldr	r1, [pc, #456]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066be:	4b6d      	ldr	r3, [pc, #436]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	4969      	ldr	r1, [pc, #420]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066e0:	4b64      	ldr	r3, [pc, #400]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	4961      	ldr	r1, [pc, #388]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006702:	4b5c      	ldr	r3, [pc, #368]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006708:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	4958      	ldr	r1, [pc, #352]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006712:	4313      	orrs	r3, r2
 8006714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006720:	2b00      	cmp	r3, #0
 8006722:	d015      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006724:	4b53      	ldr	r3, [pc, #332]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	4950      	ldr	r1, [pc, #320]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006742:	d105      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006744:	4b4b      	ldr	r3, [pc, #300]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	4a4a      	ldr	r2, [pc, #296]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800674a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800674e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006758:	2b00      	cmp	r3, #0
 800675a:	d015      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800675c:	4b45      	ldr	r3, [pc, #276]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	4942      	ldr	r1, [pc, #264]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800676c:	4313      	orrs	r3, r2
 800676e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800677a:	d105      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800677c:	4b3d      	ldr	r3, [pc, #244]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	4a3c      	ldr	r2, [pc, #240]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006786:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d015      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006794:	4b37      	ldr	r3, [pc, #220]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	4934      	ldr	r1, [pc, #208]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067b2:	d105      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067b4:	4b2f      	ldr	r3, [pc, #188]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4a2e      	ldr	r2, [pc, #184]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d015      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067cc:	4b29      	ldr	r3, [pc, #164]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067da:	4926      	ldr	r1, [pc, #152]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ea:	d105      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067ec:	4b21      	ldr	r3, [pc, #132]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	4a20      	ldr	r2, [pc, #128]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d015      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	4918      	ldr	r1, [pc, #96]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006822:	d105      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006824:	4b13      	ldr	r3, [pc, #76]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4a12      	ldr	r2, [pc, #72]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800682a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800682e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d015      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800683c:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006842:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684a:	490a      	ldr	r1, [pc, #40]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800685a:	d105      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	4a04      	ldr	r2, [pc, #16]	; (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006866:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006868:	7cbb      	ldrb	r3, [r7, #18]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40021000 	.word	0x40021000

08006878 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d066      	beq.n	8006958 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7fb fbfa 	bl	8002098 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	22ca      	movs	r2, #202	; 0xca
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2253      	movs	r2, #83	; 0x53
 80068ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f99a 	bl	8006bf6 <RTC_EnterInitMode>
 80068c2:	4603      	mov	r3, r0
 80068c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d13a      	bne.n	8006942 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80068da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068de:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6999      	ldr	r1, [r3, #24]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68d9      	ldr	r1, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	041a      	lsls	r2, r3, #16
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f9a6 	bl	8006c62 <RTC_ExitInitMode>
 8006916:	4603      	mov	r3, r0
 8006918:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d110      	bne.n	8006942 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1a      	ldr	r2, [r3, #32]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	22ff      	movs	r2, #255	; 0xff
 8006948:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d103      	bne.n	8006958 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006962:	b590      	push	{r4, r7, lr}
 8006964:	b087      	sub	sp, #28
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_RTC_SetTime+0x1a>
 8006978:	2302      	movs	r3, #2
 800697a:	e08b      	b.n	8006a94 <HAL_RTC_SetTime+0x132>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	22ca      	movs	r2, #202	; 0xca
 8006992:	625a      	str	r2, [r3, #36]	; 0x24
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2253      	movs	r2, #83	; 0x53
 800699a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f92a 	bl	8006bf6 <RTC_EnterInitMode>
 80069a2:	4603      	mov	r3, r0
 80069a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80069a6:	7cfb      	ldrb	r3, [r7, #19]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d163      	bne.n	8006a74 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d126      	bne.n	8006a00 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2200      	movs	r2, #0
 80069c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 f98c 	bl	8006ce8 <RTC_ByteToBcd2>
 80069d0:	4603      	mov	r3, r0
 80069d2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 f985 	bl	8006ce8 <RTC_ByteToBcd2>
 80069de:	4603      	mov	r3, r0
 80069e0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80069e2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	789b      	ldrb	r3, [r3, #2]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 f97d 	bl	8006ce8 <RTC_ByteToBcd2>
 80069ee:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80069f0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	78db      	ldrb	r3, [r3, #3]
 80069f8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	e018      	b.n	8006a32 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	785b      	ldrb	r3, [r3, #1]
 8006a1e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a20:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a26:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	78db      	ldrb	r3, [r3, #3]
 8006a2c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006a3c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a40:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699a      	ldr	r2, [r3, #24]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a50:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6999      	ldr	r1, [r3, #24]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	431a      	orrs	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f8f9 	bl	8006c62 <RTC_ExitInitMode>
 8006a70:	4603      	mov	r3, r0
 8006a72:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	22ff      	movs	r2, #255	; 0xff
 8006a7a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006a7c:	7cfb      	ldrb	r3, [r7, #19]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d103      	bne.n	8006a8a <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006a92:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd90      	pop	{r4, r7, pc}

08006a9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a9c:	b590      	push	{r4, r7, lr}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_RTC_SetDate+0x1a>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e075      	b.n	8006ba2 <HAL_RTC_SetDate+0x106>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10e      	bne.n	8006aea <HAL_RTC_SetDate+0x4e>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d008      	beq.n	8006aea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	785b      	ldrb	r3, [r3, #1]
 8006adc:	f023 0310 	bic.w	r3, r3, #16
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	330a      	adds	r3, #10
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11c      	bne.n	8006b2a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	78db      	ldrb	r3, [r3, #3]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 f8f7 	bl	8006ce8 <RTC_ByteToBcd2>
 8006afa:	4603      	mov	r3, r0
 8006afc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	785b      	ldrb	r3, [r3, #1]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 f8f0 	bl	8006ce8 <RTC_ByteToBcd2>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006b0c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	789b      	ldrb	r3, [r3, #2]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 f8e8 	bl	8006ce8 <RTC_ByteToBcd2>
 8006b18:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006b1a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	e00e      	b.n	8006b48 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	78db      	ldrb	r3, [r3, #3]
 8006b2e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006b36:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006b3c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	22ca      	movs	r2, #202	; 0xca
 8006b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2253      	movs	r2, #83	; 0x53
 8006b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f84c 	bl	8006bf6 <RTC_EnterInitMode>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006b62:	7cfb      	ldrb	r3, [r7, #19]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10c      	bne.n	8006b82 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b76:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f872 	bl	8006c62 <RTC_ExitInitMode>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	22ff      	movs	r2, #255	; 0xff
 8006b88:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8006b8a:	7cfb      	ldrb	r3, [r7, #19]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006ba0:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd90      	pop	{r4, r7, pc}

08006baa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68da      	ldr	r2, [r3, #12]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0220 	bic.w	r2, r2, #32
 8006bc0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006bc2:	f7fb fe91 	bl	80028e8 <HAL_GetTick>
 8006bc6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006bc8:	e009      	b.n	8006bde <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006bca:	f7fb fe8d 	bl	80028e8 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bd8:	d901      	bls.n	8006bde <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e007      	b.n	8006bee <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0ee      	beq.n	8006bca <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d123      	bne.n	8006c58 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c1e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006c20:	f7fb fe62 	bl	80028e8 <HAL_GetTick>
 8006c24:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c26:	e00d      	b.n	8006c44 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006c28:	f7fb fe5e 	bl	80028e8 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c36:	d905      	bls.n	8006c44 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2203      	movs	r2, #3
 8006c40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <RTC_EnterInitMode+0x62>
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d1e7      	bne.n	8006c28 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c7c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10c      	bne.n	8006ca6 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ff8c 	bl	8006baa <HAL_RTC_WaitForSynchro>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d022      	beq.n	8006cde <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	73fb      	strb	r3, [r7, #15]
 8006ca4:	e01b      	b.n	8006cde <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0220 	bic.w	r2, r2, #32
 8006cb4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff ff77 	bl	8006baa <HAL_RTC_WaitForSynchro>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699a      	ldr	r2, [r3, #24]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0220 	orr.w	r2, r2, #32
 8006cdc:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006cf6:	79fb      	ldrb	r3, [r7, #7]
 8006cf8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006cfa:	e005      	b.n	8006d08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006d02:	7afb      	ldrb	r3, [r7, #11]
 8006d04:	3b0a      	subs	r3, #10
 8006d06:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006d08:	7afb      	ldrb	r3, [r7, #11]
 8006d0a:	2b09      	cmp	r3, #9
 8006d0c:	d8f6      	bhi.n	8006cfc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	7afb      	ldrb	r3, [r7, #11]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	b2db      	uxtb	r3, r3
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e049      	b.n	8006dce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fb f9de 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4619      	mov	r1, r3
 8006d66:	4610      	mov	r0, r2
 8006d68:	f000 fb86 	bl	8007478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b086      	sub	sp, #24
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e097      	b.n	8006f1a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fb f9c8 	bl	8002194 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f000 fb24 	bl	8007478 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e58:	f023 0303 	bic.w	r3, r3, #3
 8006e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e76:	f023 030c 	bic.w	r3, r3, #12
 8006e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	4313      	orrs	r3, r2
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	011a      	lsls	r2, r3, #4
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	031b      	lsls	r3, r3, #12
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006eb4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ebc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d122      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d11b      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f06f 0202 	mvn.w	r2, #2
 8006f4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fa69 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006f6a:	e005      	b.n	8006f78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fa5b 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa6c 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d122      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d11b      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f06f 0204 	mvn.w	r2, #4
 8006fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fa3f 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8006fbe:	e005      	b.n	8006fcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fa31 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa42 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d122      	bne.n	8007026 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d11b      	bne.n	8007026 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f06f 0208 	mvn.w	r2, #8
 8006ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2204      	movs	r2, #4
 8006ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fa15 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8007012:	e005      	b.n	8007020 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fa07 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa18 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f003 0310 	and.w	r3, r3, #16
 8007030:	2b10      	cmp	r3, #16
 8007032:	d122      	bne.n	800707a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0310 	and.w	r3, r3, #16
 800703e:	2b10      	cmp	r3, #16
 8007040:	d11b      	bne.n	800707a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f06f 0210 	mvn.w	r2, #16
 800704a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2208      	movs	r2, #8
 8007050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f9eb 	bl	800743c <HAL_TIM_IC_CaptureCallback>
 8007066:	e005      	b.n	8007074 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f9dd 	bl	8007428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9ee 	bl	8007450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b01      	cmp	r3, #1
 8007086:	d10e      	bne.n	80070a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b01      	cmp	r3, #1
 8007094:	d107      	bne.n	80070a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f06f 0201 	mvn.w	r2, #1
 800709e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f9b7 	bl	8007414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b0:	2b80      	cmp	r3, #128	; 0x80
 80070b2:	d10e      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070be:	2b80      	cmp	r3, #128	; 0x80
 80070c0:	d107      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fb8b 	bl	80077e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e0:	d10e      	bne.n	8007100 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ec:	2b80      	cmp	r3, #128	; 0x80
 80070ee:	d107      	bne.n	8007100 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fb7e 	bl	80077fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d10e      	bne.n	800712c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d107      	bne.n	800712c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f99c 	bl	8007464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b20      	cmp	r3, #32
 8007138:	d10e      	bne.n	8007158 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b20      	cmp	r3, #32
 8007146:	d107      	bne.n	8007158 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f06f 0220 	mvn.w	r2, #32
 8007150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fb3e 	bl	80077d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007166:	d10f      	bne.n	8007188 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007176:	d107      	bne.n	8007188 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fb44 	bl	8007810 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007196:	d10f      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071a6:	d107      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80071b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fb36 	bl	8007824 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071c6:	d10f      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071d6:	d107      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80071e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fb28 	bl	8007838 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071f6:	d10f      	bne.n	8007218 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007206:	d107      	bne.n	8007218 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fb1a 	bl	800784c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_TIM_ConfigClockSource+0x1c>
 8007238:	2302      	movs	r3, #2
 800723a:	e0de      	b.n	80073fa <HAL_TIM_ConfigClockSource+0x1da>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800725a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800725e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a63      	ldr	r2, [pc, #396]	; (8007404 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	f000 80a9 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ae>
 800727c:	4a61      	ldr	r2, [pc, #388]	; (8007404 <HAL_TIM_ConfigClockSource+0x1e4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	f200 80ae 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007284:	4a60      	ldr	r2, [pc, #384]	; (8007408 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	f000 80a1 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ae>
 800728c:	4a5e      	ldr	r2, [pc, #376]	; (8007408 <HAL_TIM_ConfigClockSource+0x1e8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	f200 80a6 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007294:	4a5d      	ldr	r2, [pc, #372]	; (800740c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007296:	4293      	cmp	r3, r2
 8007298:	f000 8099 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ae>
 800729c:	4a5b      	ldr	r2, [pc, #364]	; (800740c <HAL_TIM_ConfigClockSource+0x1ec>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	f200 809e 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80072a4:	4a5a      	ldr	r2, [pc, #360]	; (8007410 <HAL_TIM_ConfigClockSource+0x1f0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	f000 8091 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ae>
 80072ac:	4a58      	ldr	r2, [pc, #352]	; (8007410 <HAL_TIM_ConfigClockSource+0x1f0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	f200 8096 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80072b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80072b8:	f000 8089 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x1ae>
 80072bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80072c0:	f200 808e 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80072c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072c8:	d03e      	beq.n	8007348 <HAL_TIM_ConfigClockSource+0x128>
 80072ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ce:	f200 8087 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80072d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d6:	f000 8086 	beq.w	80073e6 <HAL_TIM_ConfigClockSource+0x1c6>
 80072da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072de:	d87f      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80072e0:	2b70      	cmp	r3, #112	; 0x70
 80072e2:	d01a      	beq.n	800731a <HAL_TIM_ConfigClockSource+0xfa>
 80072e4:	2b70      	cmp	r3, #112	; 0x70
 80072e6:	d87b      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80072e8:	2b60      	cmp	r3, #96	; 0x60
 80072ea:	d050      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x16e>
 80072ec:	2b60      	cmp	r3, #96	; 0x60
 80072ee:	d877      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80072f0:	2b50      	cmp	r3, #80	; 0x50
 80072f2:	d03c      	beq.n	800736e <HAL_TIM_ConfigClockSource+0x14e>
 80072f4:	2b50      	cmp	r3, #80	; 0x50
 80072f6:	d873      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80072f8:	2b40      	cmp	r3, #64	; 0x40
 80072fa:	d058      	beq.n	80073ae <HAL_TIM_ConfigClockSource+0x18e>
 80072fc:	2b40      	cmp	r3, #64	; 0x40
 80072fe:	d86f      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007300:	2b30      	cmp	r3, #48	; 0x30
 8007302:	d064      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x1ae>
 8007304:	2b30      	cmp	r3, #48	; 0x30
 8007306:	d86b      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007308:	2b20      	cmp	r3, #32
 800730a:	d060      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x1ae>
 800730c:	2b20      	cmp	r3, #32
 800730e:	d867      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d05c      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x1ae>
 8007314:	2b10      	cmp	r3, #16
 8007316:	d05a      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x1ae>
 8007318:	e062      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	6899      	ldr	r1, [r3, #8]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f000 f9b1 	bl	8007690 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800733c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	609a      	str	r2, [r3, #8]
      break;
 8007346:	e04f      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	6899      	ldr	r1, [r3, #8]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f000 f99a 	bl	8007690 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800736a:	609a      	str	r2, [r3, #8]
      break;
 800736c:	e03c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6859      	ldr	r1, [r3, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	461a      	mov	r2, r3
 800737c:	f000 f90c 	bl	8007598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2150      	movs	r1, #80	; 0x50
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f965 	bl	8007656 <TIM_ITRx_SetConfig>
      break;
 800738c:	e02c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6859      	ldr	r1, [r3, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	461a      	mov	r2, r3
 800739c:	f000 f92b 	bl	80075f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2160      	movs	r1, #96	; 0x60
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 f955 	bl	8007656 <TIM_ITRx_SetConfig>
      break;
 80073ac:	e01c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6818      	ldr	r0, [r3, #0]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6859      	ldr	r1, [r3, #4]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	461a      	mov	r2, r3
 80073bc:	f000 f8ec 	bl	8007598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2140      	movs	r1, #64	; 0x40
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 f945 	bl	8007656 <TIM_ITRx_SetConfig>
      break;
 80073cc:	e00c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f000 f93c 	bl	8007656 <TIM_ITRx_SetConfig>
      break;
 80073de:	e003      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	73fb      	strb	r3, [r7, #15]
      break;
 80073e4:	e000      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80073e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	00100070 	.word	0x00100070
 8007408:	00100040 	.word	0x00100040
 800740c:	00100030 	.word	0x00100030
 8007410:	00100020 	.word	0x00100020

08007414 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a3c      	ldr	r2, [pc, #240]	; (800757c <TIM_Base_SetConfig+0x104>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00f      	beq.n	80074b0 <TIM_Base_SetConfig+0x38>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007496:	d00b      	beq.n	80074b0 <TIM_Base_SetConfig+0x38>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a39      	ldr	r2, [pc, #228]	; (8007580 <TIM_Base_SetConfig+0x108>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d007      	beq.n	80074b0 <TIM_Base_SetConfig+0x38>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a38      	ldr	r2, [pc, #224]	; (8007584 <TIM_Base_SetConfig+0x10c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d003      	beq.n	80074b0 <TIM_Base_SetConfig+0x38>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a37      	ldr	r2, [pc, #220]	; (8007588 <TIM_Base_SetConfig+0x110>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d108      	bne.n	80074c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a2d      	ldr	r2, [pc, #180]	; (800757c <TIM_Base_SetConfig+0x104>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d01b      	beq.n	8007502 <TIM_Base_SetConfig+0x8a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d0:	d017      	beq.n	8007502 <TIM_Base_SetConfig+0x8a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a2a      	ldr	r2, [pc, #168]	; (8007580 <TIM_Base_SetConfig+0x108>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d013      	beq.n	8007502 <TIM_Base_SetConfig+0x8a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a29      	ldr	r2, [pc, #164]	; (8007584 <TIM_Base_SetConfig+0x10c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d00f      	beq.n	8007502 <TIM_Base_SetConfig+0x8a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a28      	ldr	r2, [pc, #160]	; (8007588 <TIM_Base_SetConfig+0x110>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00b      	beq.n	8007502 <TIM_Base_SetConfig+0x8a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a27      	ldr	r2, [pc, #156]	; (800758c <TIM_Base_SetConfig+0x114>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d007      	beq.n	8007502 <TIM_Base_SetConfig+0x8a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a26      	ldr	r2, [pc, #152]	; (8007590 <TIM_Base_SetConfig+0x118>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d003      	beq.n	8007502 <TIM_Base_SetConfig+0x8a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a25      	ldr	r2, [pc, #148]	; (8007594 <TIM_Base_SetConfig+0x11c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d108      	bne.n	8007514 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <TIM_Base_SetConfig+0x104>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00f      	beq.n	8007560 <TIM_Base_SetConfig+0xe8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a11      	ldr	r2, [pc, #68]	; (8007588 <TIM_Base_SetConfig+0x110>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_Base_SetConfig+0xe8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a10      	ldr	r2, [pc, #64]	; (800758c <TIM_Base_SetConfig+0x114>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_Base_SetConfig+0xe8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a0f      	ldr	r2, [pc, #60]	; (8007590 <TIM_Base_SetConfig+0x118>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_Base_SetConfig+0xe8>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a0e      	ldr	r2, [pc, #56]	; (8007594 <TIM_Base_SetConfig+0x11c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d103      	bne.n	8007568 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	615a      	str	r2, [r3, #20]
}
 800756e:	bf00      	nop
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40012c00 	.word	0x40012c00
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800
 8007588:	40013400 	.word	0x40013400
 800758c:	40014000 	.word	0x40014000
 8007590:	40014400 	.word	0x40014400
 8007594:	40014800 	.word	0x40014800

08007598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f023 0201 	bic.w	r2, r3, #1
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f023 030a 	bic.w	r3, r3, #10
 80075d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b087      	sub	sp, #28
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	f023 0210 	bic.w	r2, r3, #16
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	031b      	lsls	r3, r3, #12
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	4313      	orrs	r3, r2
 800762a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007632:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	4313      	orrs	r3, r2
 800763c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	621a      	str	r2, [r3, #32]
}
 800764a:	bf00      	nop
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007656:	b480      	push	{r7}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800766c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	f043 0307 	orr.w	r3, r3, #7
 800767c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	609a      	str	r2, [r3, #8]
}
 8007684:	bf00      	nop
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	021a      	lsls	r2, r3, #8
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	609a      	str	r2, [r3, #8]
}
 80076c4:	bf00      	nop
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e065      	b.n	80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a2c      	ldr	r2, [pc, #176]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d004      	beq.n	800771c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a2b      	ldr	r2, [pc, #172]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d108      	bne.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1b      	ldr	r2, [pc, #108]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d018      	beq.n	8007788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775e:	d013      	beq.n	8007788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00e      	beq.n	8007788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a17      	ldr	r2, [pc, #92]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d009      	beq.n	8007788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a12      	ldr	r2, [pc, #72]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a13      	ldr	r2, [pc, #76]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d10c      	bne.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800778e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	4313      	orrs	r3, r2
 8007798:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	40012c00 	.word	0x40012c00
 80077c4:	40013400 	.word	0x40013400
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40014000 	.word	0x40014000

080077d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <__libc_init_array>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	4d0d      	ldr	r5, [pc, #52]	; (8007898 <__libc_init_array+0x38>)
 8007864:	4c0d      	ldr	r4, [pc, #52]	; (800789c <__libc_init_array+0x3c>)
 8007866:	1b64      	subs	r4, r4, r5
 8007868:	10a4      	asrs	r4, r4, #2
 800786a:	2600      	movs	r6, #0
 800786c:	42a6      	cmp	r6, r4
 800786e:	d109      	bne.n	8007884 <__libc_init_array+0x24>
 8007870:	4d0b      	ldr	r5, [pc, #44]	; (80078a0 <__libc_init_array+0x40>)
 8007872:	4c0c      	ldr	r4, [pc, #48]	; (80078a4 <__libc_init_array+0x44>)
 8007874:	f000 f87c 	bl	8007970 <_init>
 8007878:	1b64      	subs	r4, r4, r5
 800787a:	10a4      	asrs	r4, r4, #2
 800787c:	2600      	movs	r6, #0
 800787e:	42a6      	cmp	r6, r4
 8007880:	d105      	bne.n	800788e <__libc_init_array+0x2e>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	f855 3b04 	ldr.w	r3, [r5], #4
 8007888:	4798      	blx	r3
 800788a:	3601      	adds	r6, #1
 800788c:	e7ee      	b.n	800786c <__libc_init_array+0xc>
 800788e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007892:	4798      	blx	r3
 8007894:	3601      	adds	r6, #1
 8007896:	e7f2      	b.n	800787e <__libc_init_array+0x1e>
 8007898:	080096c0 	.word	0x080096c0
 800789c:	080096c0 	.word	0x080096c0
 80078a0:	080096c0 	.word	0x080096c0
 80078a4:	080096c4 	.word	0x080096c4

080078a8 <__itoa>:
 80078a8:	1e93      	subs	r3, r2, #2
 80078aa:	2b22      	cmp	r3, #34	; 0x22
 80078ac:	b510      	push	{r4, lr}
 80078ae:	460c      	mov	r4, r1
 80078b0:	d904      	bls.n	80078bc <__itoa+0x14>
 80078b2:	2300      	movs	r3, #0
 80078b4:	700b      	strb	r3, [r1, #0]
 80078b6:	461c      	mov	r4, r3
 80078b8:	4620      	mov	r0, r4
 80078ba:	bd10      	pop	{r4, pc}
 80078bc:	2a0a      	cmp	r2, #10
 80078be:	d109      	bne.n	80078d4 <__itoa+0x2c>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	da07      	bge.n	80078d4 <__itoa+0x2c>
 80078c4:	232d      	movs	r3, #45	; 0x2d
 80078c6:	700b      	strb	r3, [r1, #0]
 80078c8:	4240      	negs	r0, r0
 80078ca:	2101      	movs	r1, #1
 80078cc:	4421      	add	r1, r4
 80078ce:	f000 f80d 	bl	80078ec <__utoa>
 80078d2:	e7f1      	b.n	80078b8 <__itoa+0x10>
 80078d4:	2100      	movs	r1, #0
 80078d6:	e7f9      	b.n	80078cc <__itoa+0x24>

080078d8 <itoa>:
 80078d8:	f7ff bfe6 	b.w	80078a8 <__itoa>

080078dc <memset>:
 80078dc:	4402      	add	r2, r0
 80078de:	4603      	mov	r3, r0
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d100      	bne.n	80078e6 <memset+0xa>
 80078e4:	4770      	bx	lr
 80078e6:	f803 1b01 	strb.w	r1, [r3], #1
 80078ea:	e7f9      	b.n	80078e0 <memset+0x4>

080078ec <__utoa>:
 80078ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ee:	4c1f      	ldr	r4, [pc, #124]	; (800796c <__utoa+0x80>)
 80078f0:	b08b      	sub	sp, #44	; 0x2c
 80078f2:	4605      	mov	r5, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	466e      	mov	r6, sp
 80078f8:	f104 0c20 	add.w	ip, r4, #32
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	6861      	ldr	r1, [r4, #4]
 8007900:	4637      	mov	r7, r6
 8007902:	c703      	stmia	r7!, {r0, r1}
 8007904:	3408      	adds	r4, #8
 8007906:	4564      	cmp	r4, ip
 8007908:	463e      	mov	r6, r7
 800790a:	d1f7      	bne.n	80078fc <__utoa+0x10>
 800790c:	7921      	ldrb	r1, [r4, #4]
 800790e:	7139      	strb	r1, [r7, #4]
 8007910:	1e91      	subs	r1, r2, #2
 8007912:	6820      	ldr	r0, [r4, #0]
 8007914:	6038      	str	r0, [r7, #0]
 8007916:	2922      	cmp	r1, #34	; 0x22
 8007918:	f04f 0100 	mov.w	r1, #0
 800791c:	d904      	bls.n	8007928 <__utoa+0x3c>
 800791e:	7019      	strb	r1, [r3, #0]
 8007920:	460b      	mov	r3, r1
 8007922:	4618      	mov	r0, r3
 8007924:	b00b      	add	sp, #44	; 0x2c
 8007926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007928:	1e58      	subs	r0, r3, #1
 800792a:	4684      	mov	ip, r0
 800792c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007930:	fb02 5617 	mls	r6, r2, r7, r5
 8007934:	3628      	adds	r6, #40	; 0x28
 8007936:	446e      	add	r6, sp
 8007938:	460c      	mov	r4, r1
 800793a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800793e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007942:	462e      	mov	r6, r5
 8007944:	42b2      	cmp	r2, r6
 8007946:	f101 0101 	add.w	r1, r1, #1
 800794a:	463d      	mov	r5, r7
 800794c:	d9ee      	bls.n	800792c <__utoa+0x40>
 800794e:	2200      	movs	r2, #0
 8007950:	545a      	strb	r2, [r3, r1]
 8007952:	1919      	adds	r1, r3, r4
 8007954:	1aa5      	subs	r5, r4, r2
 8007956:	42aa      	cmp	r2, r5
 8007958:	dae3      	bge.n	8007922 <__utoa+0x36>
 800795a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800795e:	780e      	ldrb	r6, [r1, #0]
 8007960:	7006      	strb	r6, [r0, #0]
 8007962:	3201      	adds	r2, #1
 8007964:	f801 5901 	strb.w	r5, [r1], #-1
 8007968:	e7f4      	b.n	8007954 <__utoa+0x68>
 800796a:	bf00      	nop
 800796c:	08009698 	.word	0x08009698

08007970 <_init>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	bf00      	nop
 8007974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007976:	bc08      	pop	{r3}
 8007978:	469e      	mov	lr, r3
 800797a:	4770      	bx	lr

0800797c <_fini>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	bf00      	nop
 8007980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007982:	bc08      	pop	{r3}
 8007984:	469e      	mov	lr, r3
 8007986:	4770      	bx	lr
